{"file_contents":{"README.md":{"content":"# FuelFlow - Petrol Pump Management System\n\n## Overview\n\nFuelFlow is a comprehensive Petrol Pump Management System designed to handle all aspects of fuel retail business operations. The system provides complete business management functionality including point-of-sale operations, inventory management, financial tracking, customer and supplier management, and comprehensive reporting capabilities.\n\n## üöÄ Quick Start\n\n### Default Login Credentials\n- **Username:** `admin`\n- **Password:** `admin123`\n\n### Google Authentication\nThe system also supports Google Sign-In for convenient access. Users can sign in with their Google accounts and be automatically registered in the system.\n\n## üèóÔ∏è System Architecture\n\n### Frontend Architecture\n- **Framework:** React 18 with TypeScript\n- **Build Tool:** Vite for fast development and optimized builds\n- **UI Library:** Custom component system built on Radix UI primitives\n- **Styling:** Tailwind CSS for consistent and responsive design\n- **State Management:** TanStack Query for server state with optimistic updates\n- **Routing:** Wouter for lightweight client-side routing\n- **Authentication:** Dual system supporting local and Google authentication\n\n### Backend Architecture\n- **Runtime:** Node.js with Express.js framework\n- **Language:** TypeScript with ES modules\n- **API Design:** RESTful API with structured error handling\n- **Authentication:** Session-based with bcrypt password hashing + Firebase Google Auth\n- **Database:** PostgreSQL with Drizzle ORM\n- **Real-time:** WebSocket support for live updates\n\n## üîê Authentication System\n\n### Dual Authentication Support\nThe system supports two authentication methods:\n\n#### 1. Local Authentication\n- Username and password based\n- Bcrypt password hashing for security\n- Role-based access control (admin, manager, cashier)\n- Station-specific access\n\n#### 2. Google Authentication\n- Firebase-powered Google Sign-In\n- Automatic user registration\n- Seamless integration with existing system\n- Default 'cashier' role assignment\n\n### Setting Up Google Authentication\n\nTo enable Google authentication, you need to:\n\n1. **Firebase Console Setup:**\n   - Go to [Firebase Console](https://console.firebase.google.com/)\n   - Create a new Firebase project\n   - Add a web app to your project\n   - Enable Google Sign-In in Authentication section\n   - Add your Replit domain to authorized domains\n\n2. **Environment Variables:**\n   Set these environment variables in your Replit:\n   - `VITE_FIREBASE_PROJECT_ID`: Your Firebase project ID\n   - `VITE_FIREBASE_APP_ID`: Your Firebase app ID\n   - `VITE_FIREBASE_API_KEY`: Your Firebase API key\n\n## üìä Core Features\n\n### 1. Point of Sale (POS)\n- **Real-time Fuel Sales:** Process petrol, diesel, and other fuel transactions\n- **Multi-pump Support:** Handle multiple fuel dispensers simultaneously\n- **Payment Methods:** Cash, card, and credit transactions\n- **Receipt Generation:** Automatic receipt printing and digital copies\n- **Inventory Integration:** Real-time stock updates during sales\n\n### 2. Inventory Management\n- **Tank Monitoring:** Track fuel levels in storage tanks\n- **Stock Movements:** Record fuel receipts, sales, and transfers\n- **Automatic Alerts:** Low stock and overfill warnings\n- **Fuel Quality Tracking:** Monitor fuel quality metrics\n- **Purchase Order Integration:** Seamless restocking workflow\n\n### 3. Financial Management\n- **Accounts Receivable:** Track customer credit and payments\n- **Accounts Payable:** Manage supplier invoices and payments\n- **Cash Reconciliation:** Daily cash drawer balancing\n- **Expense Management:** Record and categorize business expenses\n- **Financial Reporting:** Comprehensive financial statements\n\n### 4. Customer Management\n- **Customer Database:** Maintain detailed customer records\n- **Credit Management:** Track credit limits and outstanding balances\n- **Payment History:** Complete payment tracking and aging reports\n- **Loyalty Programs:** Support for customer loyalty initiatives\n\n### 5. Supplier Management\n- **Supplier Directory:** Comprehensive supplier database\n- **Purchase Orders:** Create and manage fuel purchase orders\n- **Payment Tracking:** Monitor supplier payments and due dates\n- **Quality Management:** Track supplier performance metrics\n\n### 6. Reporting System\n- **Sales Reports:** Daily, weekly, monthly sales analysis\n- **Financial Statements:** Profit & loss, balance sheet, cash flow\n- **Inventory Reports:** Stock levels, movement analysis\n- **Customer Analytics:** Customer behavior and credit analysis\n- **Management Dashboard:** Key performance indicators and trends\n\n## üóÑÔ∏è Database Schema\n\n### Core Tables\n\n#### Users & Authentication\n- `users`: System users with roles and permissions\n- `stations`: Fuel station locations and details\n\n#### Inventory Management\n- `products`: Fuel types and other products\n- `tanks`: Storage tank information and capacity\n- `stock_movements`: All inventory movements and transactions\n\n#### Customer & Supplier Relations\n- `customers`: Customer database with credit information\n- `suppliers`: Supplier information and contacts\n- `purchase_orders`: Purchase order management\n\n#### Financial Management\n- `transactions`: All sales transactions\n- `payments`: Customer and supplier payments\n- `expenses`: Business expense tracking\n\n## üõ†Ô∏è Development Setup\n\n### Prerequisites\n- Node.js 20+\n- PostgreSQL database\n- Firebase project (for Google Auth)\n\n### Installation\n```bash\n# Install dependencies\nnpm install\n\n# Set up database\nnpm run db:push\n\n# Start development server\nnpm run dev\n```\n\n### Environment Variables\n```env\nDATABASE_URL=postgresql://...\nVITE_FIREBASE_PROJECT_ID=your-project-id\nVITE_FIREBASE_APP_ID=your-app-id\nVITE_FIREBASE_API_KEY=your-api-key\n```\n\n## üîß Key Technologies\n\n### Frontend Technologies\n- **React 18**: Modern React with hooks and concurrent features\n- **TypeScript**: Type-safe development\n- **Vite**: Fast build tool and dev server\n- **TailwindCSS**: Utility-first CSS framework\n- **Radix UI**: Accessible component primitives\n- **TanStack Query**: Powerful data synchronization\n- **React Hook Form**: Performant form management\n- **Zod**: Runtime type validation\n\n### Backend Technologies\n- **Express.js**: Web application framework\n- **Drizzle ORM**: Type-safe database queries\n- **bcrypt**: Password hashing\n- **Firebase Auth**: Google authentication\n- **WebSocket**: Real-time communication\n- **Session Management**: Secure user sessions\n\n## üöÄ Deployment\n\nThe application is designed for Replit deployment with:\n- Automatic workflow management\n- Built-in PostgreSQL database\n- Environment variable management\n- Domain and SSL handling\n\n## üì± User Interface\n\n### Dashboard\n- Real-time sales metrics\n- Inventory status overview\n- Financial summary\n- Quick action buttons\n\n### Navigation\n- Sidebar navigation with role-based menu items\n- Responsive design for mobile and desktop\n- Quick search functionality\n- User profile and settings\n\n### Form Design\n- Consistent form layouts\n- Real-time validation\n- Error handling and user feedback\n- Auto-save capabilities\n\n## üîí Security Features\n\n### Data Security\n- Password hashing with bcrypt\n- Session-based authentication\n- SQL injection prevention\n- XSS protection\n- CSRF protection\n\n### Access Control\n- Role-based permissions\n- Station-specific access\n- API endpoint protection\n- Audit logging\n\n## üìà Performance Features\n\n### Frontend Optimization\n- Code splitting and lazy loading\n- Component memoization\n- Optimistic updates\n- Efficient re-rendering\n\n### Backend Optimization\n- Database connection pooling\n- Query optimization\n- Response caching\n- Error handling middleware\n\n## üîÑ Real-time Features\n\n- Live inventory updates\n- Real-time transaction processing\n- WebSocket-based notifications\n- Automatic data synchronization\n\n## üìä Business Intelligence\n\n### Analytics\n- Sales trend analysis\n- Customer behavior insights\n- Inventory turnover reports\n- Profitability analysis\n\n### Decision Support\n- Automated alerts and notifications\n- Key performance indicators\n- Predictive analytics\n- Business forecasting\n\n## üõ°Ô∏è Backup & Recovery\n\n- Automatic database backups\n- Point-in-time recovery\n- Data export capabilities\n- System health monitoring\n\n## üìû Support & Maintenance\n\n### System Monitoring\n- Application performance monitoring\n- Error tracking and logging\n- Database performance metrics\n- User activity monitoring\n\n### Maintenance Tasks\n- Regular data cleanup\n- Security updates\n- Performance optimization\n- Feature enhancements\n\n---\n\n*This system is designed to scale with your business needs while maintaining security, performance, and reliability.*","size_bytes":8635},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a comprehensive Petrol Pump Management System built as a full-stack web application. The system provides complete business management functionality for petrol stations, including point-of-sale operations, inventory management, financial tracking, customer and supplier management, and comprehensive reporting capabilities. It's designed to handle the complex operational needs of fuel retail businesses with features for cash reconciliation, credit management, stock monitoring, and financial reporting.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Library**: Custom component system built on Radix UI primitives with Tailwind CSS styling\n- **State Management**: TanStack Query (React Query) for server state management with optimistic updates\n- **Routing**: Wouter for lightweight client-side routing\n- **Authentication**: Context-based authentication system with localStorage persistence\n- **Form Management**: React Hook Form with Zod validation schemas\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with structured error handling and request logging middleware\n- **Authentication**: Session-based authentication with bcrypt password hashing\n- **Database Layer**: Repository pattern with a storage abstraction layer for clean separation of concerns\n\n## Data Storage\n- **Database**: PostgreSQL with Neon serverless configuration\n- **ORM**: Drizzle ORM with type-safe schema definitions\n- **Schema Design**: Comprehensive relational schema covering users, stations, products, tanks, customers, suppliers, transactions, purchase orders, expenses, payments, and stock movements\n- **Migration System**: Drizzle Kit for database schema migrations and management\n\n## Component Architecture\n- **Design System**: Shadcn/ui components with consistent styling and behavior\n- **Layout System**: Sidebar navigation with protected routes and role-based access\n- **Form Components**: Reusable form components with validation and error handling\n- **Data Tables**: Sortable and filterable tables with search and pagination capabilities\n\n## Business Logic Modules\n- **Point of Sale**: Real-time transaction processing with inventory updates\n- **Inventory Management**: Tank monitoring, stock movements, and automatic alerts\n- **Financial Management**: Accounts receivable/payable, expense tracking, and cash reconciliation\n- **Customer/Supplier Relations**: Credit management and payment tracking\n- **Reporting System**: Financial statements, sales reports, and aging analysis\n\n## Security & Authentication\n- **Password Security**: Bcrypt hashing with salt rounds\n- **Route Protection**: AuthGuard component ensuring authenticated access\n- **Role-Based Access**: User roles (admin, manager, cashier) with appropriate permissions\n- **Session Management**: Secure session handling with automatic logout\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **WebSocket Support**: Real-time database connections via WebSocket constructor\n\n## UI & Styling\n- **Radix UI**: Headless UI primitives for accessible components\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **Lucide React**: Icon library for consistent iconography\n- **Class Variance Authority**: Type-safe component variants\n\n## Development Tools\n- **Vite**: Fast development server and build tool with HMR\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **TypeScript**: Static type checking and enhanced developer experience\n- **Drizzle Kit**: Database schema management and migration tools\n\n## Third-Party Libraries\n- **TanStack Query**: Server state management with caching and synchronization\n- **React Hook Form**: Performant form library with minimal re-renders\n- **Zod**: Schema validation for type-safe data handling\n- **Date-fns**: Date manipulation and formatting utilities\n- **Recharts**: Chart library for financial data visualization\n\n## Authentication & Security\n- **bcrypt**: Password hashing and verification\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n- **Wouter**: Lightweight routing for single-page application navigation","size_bytes":4404},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fadeIn: {\n          from: { opacity: \"0\" },\n          to: { opacity: \"1\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fadeIn 0.3s ease-in\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2892},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport jwt from \"jsonwebtoken\";\nimport { storage } from \"./storage\";\n\n// Firebase Admin SDK - simplified initialization\nlet admin: any = null;\nconsole.warn(\"Firebase Admin SDK disabled for now - Google auth will not work server-side\");\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-super-secret-jwt-key-change-this-in-production\";\n\nexport interface AuthenticatedUser {\n  id: string;\n  username: string;\n  fullName: string;\n  role: string;\n  stationId?: string;\n  email?: string;\n  isGoogleAuth?: boolean;\n}\n\n// Extend Express Request type to include user\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: AuthenticatedUser;\n    }\n  }\n}\n\n// Generate JWT token\nexport function generateToken(user: AuthenticatedUser): string {\n  return jwt.sign(\n    { \n      id: user.id, \n      username: user.username, \n      role: user.role,\n      stationId: user.stationId,\n      isGoogleAuth: user.isGoogleAuth \n    },\n    JWT_SECRET,\n    { expiresIn: \"24h\" }\n  );\n}\n\n// Verify JWT token\nexport function verifyToken(token: string): AuthenticatedUser | null {\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as any;\n    return {\n      id: decoded.id,\n      username: decoded.username,\n      fullName: decoded.fullName || decoded.username,\n      role: decoded.role,\n      stationId: decoded.stationId,\n      isGoogleAuth: decoded.isGoogleAuth || false\n    };\n  } catch (error) {\n    return null;\n  }\n}\n\n// Verify Firebase ID token\nexport async function verifyFirebaseToken(idToken: string): Promise<any | null> {\n  if (!admin) {\n    console.error(\"Firebase Admin SDK not available for token verification\");\n    return null;\n  }\n  \n  try {\n    const decodedToken = await admin.auth().verifyIdToken(idToken);\n    return decodedToken;\n  } catch (error) {\n    console.error(\"Firebase token verification failed:\", error);\n    return null;\n  }\n}\n\n// Authentication middleware\nexport function requireAuth(req: Request, res: Response, next: NextFunction) {\n  const authHeader = req.headers.authorization;\n  \n  if (!authHeader) {\n    return res.status(401).json({ message: \"No authorization header provided\" });\n  }\n\n  const token = authHeader.startsWith(\"Bearer \") \n    ? authHeader.substring(7)\n    : authHeader;\n\n  const user = verifyToken(token);\n  \n  if (!user) {\n    return res.status(401).json({ message: \"Invalid or expired token\" });\n  }\n\n  req.user = user;\n  next();\n}\n\n// Role-based authorization middleware\nexport function requireRole(roles: string[]) {\n  return (req: Request, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n\n    if (!roles.includes(req.user.role)) {\n      return res.status(403).json({ message: \"Insufficient permissions\" });\n    }\n\n    next();\n  };\n}\n\n// Station access authorization middleware\nexport function requireStationAccess(req: Request, res: Response, next: NextFunction) {\n  if (!req.user) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n\n  const stationId = req.params.stationId || req.body.stationId;\n  \n  // Admin can access all stations\n  if (req.user.role === \"admin\") {\n    return next();\n  }\n\n  // Other users can only access their assigned station\n  if (req.user.stationId && req.user.stationId !== stationId) {\n    return res.status(403).json({ message: \"Access denied to this station\" });\n  }\n\n  next();\n}","size_bytes":3457},"server/db.ts":{"content":"import pg from 'pg';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from \"@shared/schema\";\n\nconst { Pool } = pg;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n\n// This function is used to migrate the database schema.\n// It will create tables if they don't exist.\nexport async function migrate() {\n  // Using a transaction to ensure all operations are atomic.\n  await db.transaction(async (tx) => {\n    const sql = (await import('drizzle-orm/sql')).sql;\n\n    // Create tables if they don't exist\n    await tx.execute(sql`\n      CREATE TABLE IF NOT EXISTS users (\n        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n        username TEXT NOT NULL UNIQUE,\n        password TEXT NOT NULL,\n        full_name TEXT NOT NULL,\n        role TEXT NOT NULL DEFAULT 'cashier',\n        station_id VARCHAR,\n        is_active BOOLEAN DEFAULT true,\n        created_at TIMESTAMP DEFAULT NOW(),\n        updated_at TIMESTAMP DEFAULT NOW()\n      );\n    `);\n\n    await tx.execute(sql`\n      CREATE TABLE IF NOT EXISTS stations (\n        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n        name TEXT NOT NULL,\n        address TEXT,\n        gst_number TEXT,\n        license_number TEXT,\n        contact_phone TEXT,\n        contact_email TEXT,\n        default_currency TEXT NOT NULL DEFAULT 'PKR',\n        is_active BOOLEAN DEFAULT true,\n        created_at TIMESTAMP DEFAULT NOW()\n      );\n    `);\n\n    // Create pumps table\n    await tx.execute(sql`\n      CREATE TABLE IF NOT EXISTS pumps (\n        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n        station_id VARCHAR NOT NULL REFERENCES stations(id),\n        name TEXT NOT NULL,\n        pump_number TEXT NOT NULL,\n        product_id VARCHAR NOT NULL REFERENCES products(id),\n        is_active BOOLEAN DEFAULT true,\n        created_at TIMESTAMP DEFAULT NOW()\n      );\n    `);\n\n    // Create pump_readings table\n    await tx.execute(sql`\n      CREATE TABLE IF NOT EXISTS pump_readings (\n        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n        pump_id VARCHAR NOT NULL REFERENCES pumps(id),\n        station_id VARCHAR NOT NULL REFERENCES stations(id),\n        user_id VARCHAR NOT NULL REFERENCES users(id),\n        product_id VARCHAR NOT NULL REFERENCES products(id),\n        reading_date DATE NOT NULL,\n        opening_reading DECIMAL(10,3) NOT NULL,\n        closing_reading DECIMAL(10,3) NOT NULL,\n        total_sale DECIMAL(10,3) NOT NULL,\n        shift_number TEXT NOT NULL,\n        operator_name TEXT NOT NULL,\n        created_at TIMESTAMP DEFAULT NOW()\n      );\n    `);\n  });\n}","size_bytes":2781},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { seedInitialData } from \"./seed\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      \n      // Don't log sensitive auth response data containing tokens\n      if (capturedJsonResponse && !path.includes(\"/api/auth/\")) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  // Seed initial data if database is empty\n  try {\n    await seedInitialData();\n  } catch (error) {\n    console.error(\"Failed to seed initial data:\", error);\n  }\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    // Log error for debugging but don't throw after response is sent\n    console.error(\"Error handled:\", err);\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2474},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport {\n  insertUserSchema, insertStationSchema, insertProductSchema, insertTankSchema,\n  insertCustomerSchema, insertSupplierSchema, insertSalesTransactionSchema,\n  insertSalesTransactionItemSchema, insertPurchaseOrderSchema, insertPurchaseOrderItemSchema,\n  insertExpenseSchema, insertPaymentSchema, insertStockMovementSchema, insertSettingsSchema,\n  insertPumpSchema, insertPumpReadingSchema\n} from \"@shared/schema\";\nimport bcrypt from \"bcrypt\";\nimport { requireAuth, requireRole, requireStationAccess, generateToken, verifyFirebaseToken, AuthenticatedUser } from \"./auth\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n\n  // Admin routes (admin only)\n  app.get(\"/api/admin/users\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const users = await storage.getUsers();\n      // Remove passwords from response\n      const safeUsers = users.map(({ password, ...user }) => user);\n      res.json(safeUsers);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      res.status(500).json({ message: \"Failed to fetch users\", error: error instanceof Error ? error.message : String(error) });\n    }\n  });\n\n  app.post(\"/api/admin/users\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const validatedData = insertUserSchema.parse(req.body);\n      const hashedPassword = await bcrypt.hash(validatedData.password, 10);\n      const userData = { ...validatedData, password: hashedPassword };\n      const user = await storage.createUser(userData);\n      // Remove password from response\n      const { password, ...safeUser } = user;\n      res.status(201).json(safeUser);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid user data\" });\n    }\n  });\n\n  app.put(\"/api/admin/users/:id\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertUserSchema.partial().parse(req.body);\n\n      // Hash password if provided\n      if (validatedData.password) {\n        validatedData.password = await bcrypt.hash(validatedData.password, 10);\n      }\n\n      const user = await storage.updateUser(id, validatedData);\n      // Remove password from response\n      const { password, ...safeUser } = user;\n      res.json(safeUser);\n    } catch (error) {\n      console.error('User update error:', error);\n      res.status(400).json({ message: \"Invalid user data\" });\n    }\n  });\n\n  app.delete(\"/api/admin/users/:id\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteUser(id);\n      res.json({ message: \"User deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  // Signup route (unprotected)\n  app.post(\"/api/auth/signup\", async (req, res) => {\n    try {\n      const validatedData = insertUserSchema.parse(req.body);\n      const hashedPassword = await bcrypt.hash(validatedData.password, 10);\n      \n      // Check if username already exists\n      const existingUser = await storage.getUserByUsername(validatedData.username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n      \n      // Admin users are automatically active, others need approval\n      const isActive = validatedData.role === 'admin';\n      \n      const userData = { \n        ...validatedData, \n        password: hashedPassword,\n        isActive\n      };\n      const user = await storage.createUser(userData);\n      \n      // Remove password from response\n      const { password, ...safeUser } = user;\n      \n      if (isActive) {\n        res.status(201).json({ \n          user: safeUser, \n          message: \"Admin account created successfully. You can now login.\" \n        });\n      } else {\n        res.status(201).json({ \n          user: safeUser, \n          message: \"Account created successfully. Please wait for admin approval.\" \n        });\n      }\n    } catch (error) {\n      console.error('Signup error:', error);\n      res.status(400).json({ message: \"Invalid user data\" });\n    }\n  });\n\n  // Authentication routes (unprotected)\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n\n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Admin users can always login, others need approval\n      if (!user.isActive && user.role !== 'admin') {\n        return res.status(401).json({ message: \"Account pending approval. Please contact administrator.\" });\n      }\n\n      const passwordMatch = await bcrypt.compare(password, user.password);\n      if (!passwordMatch) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Remove password from response and generate token\n      const { password: _, ...userWithoutPassword } = user;\n      const authUser: AuthenticatedUser = {\n        id: userWithoutPassword.id,\n        username: userWithoutPassword.username,\n        fullName: userWithoutPassword.fullName,\n        role: userWithoutPassword.role,\n        stationId: userWithoutPassword.stationId || undefined,\n        isGoogleAuth: false\n      };\n\n      const token = generateToken(authUser);\n      res.json({ user: authUser, token });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/auth/google\", async (req, res) => {\n    try {\n      const { idToken } = req.body;\n\n      if (!idToken) {\n        return res.status(400).json({ message: \"Firebase ID token required\" });\n      }\n\n      const decodedToken = await verifyFirebaseToken(idToken);\n      if (!decodedToken) {\n        return res.status(401).json({ message: \"Invalid Firebase token\" });\n      }\n\n      // Check if user exists in database\n      let user = await storage.getUserByUsername(decodedToken.email || decodedToken.uid);\n\n      if (!user) {\n        // Create new user for Google sign-in\n        const hashedPassword = await bcrypt.hash(Math.random().toString(36), 10); // Random password for Google users\n        const newUser = {\n          username: decodedToken.email || decodedToken.uid,\n          password: hashedPassword,\n          fullName: decodedToken.name || decodedToken.email || 'Google User',\n          role: 'cashier' as const, // Default role for Google users\n          isActive: true\n        };\n\n        user = await storage.createUser(newUser);\n      }\n\n      // Create authenticated user object\n      const authUser: AuthenticatedUser = {\n        id: user.id,\n        username: user.username,\n        fullName: user.fullName,\n        role: user.role,\n        stationId: user.stationId || undefined,\n        email: decodedToken.email,\n        isGoogleAuth: true\n      };\n\n      const token = generateToken(authUser);\n      res.json({ user: authUser, token });\n    } catch (error) {\n      console.error('Google auth error:', error);\n      res.status(500).json({ message: \"Google authentication failed\" });\n    }\n  });\n\n  // Get current user\n  app.get(\"/api/auth/me\", requireAuth, (req, res) => {\n    if (req.user) {\n      res.json({\n        id: req.user.id,\n        username: req.user.username,\n        email: req.user.email,\n        fullName: req.user.fullName,\n        role: req.user.role,\n        stationId: req.user.stationId,\n        isGoogleAuth: req.user.isGoogleAuth,\n        // Add responsive flag for mobile clients\n        preferences: {\n          sidebarCollapsed: false,\n          mobileLayout: true\n        }\n      });\n    } else {\n      res.status(401).json({ error: \"Not authenticated\" });\n    }\n  });\n\n  // Protected routes (require authentication)\n  // Stations routes\n  app.get(\"/api/stations\", requireAuth, async (req, res) => {\n    try {\n      const stations = await storage.getStations();\n      res.json(stations);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch stations\" });\n    }\n  });\n\n  app.post(\"/api/stations\", requireAuth, requireRole(['admin', 'manager']), async (req, res) => {\n    try {\n      const validatedData = insertStationSchema.parse(req.body);\n      const station = await storage.createStation(validatedData);\n      res.status(201).json(station);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid station data\" });\n    }\n  });\n\n  app.get(\"/api/stations/:id\", requireAuth, requireStationAccess, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const station = await storage.getStation(id);\n      if (!station) {\n        return res.status(404).json({ message: \"Station not found\" });\n      }\n      res.json(station);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch station\" });\n    }\n  });\n\n  app.put(\"/api/stations/:id\", requireAuth, requireRole(['admin', 'manager']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertStationSchema.partial().parse(req.body);\n      const station = await storage.updateStation(id, validatedData);\n      res.json(station);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid station data\" });\n    }\n  });\n\n  // Settings routes\n  app.get(\"/api/settings/:stationId\", requireAuth, requireStationAccess, async (req, res) => {\n    try {\n      const { stationId } = req.params;\n      const settings = await storage.getSettings(stationId);\n      if (!settings) {\n        // Return default settings if none exist\n        const defaultSettings = {\n          stationId,\n          taxEnabled: false,\n          taxRate: '0',\n          currencyCode: 'PKR' as const,\n        };\n        return res.json(defaultSettings);\n      }\n      res.json(settings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch settings\" });\n    }\n  });\n\n  app.post(\"/api/settings/:stationId\", requireAuth, requireRole(['admin', 'manager']), requireStationAccess, async (req, res) => {\n    try {\n      const { stationId } = req.params;\n      // Ensure stationId comes from URL params, not body\n      const { stationId: _, ...bodyData } = req.body;\n      const validatedData = insertSettingsSchema.parse({ ...bodyData, stationId });\n\n      try {\n        const settings = await storage.createSettings(validatedData);\n        res.status(201).json(settings);\n      } catch (error: any) {\n        // Handle unique constraint violation - settings already exist\n        if (error.message.includes('duplicate') || error.message.includes('unique')) {\n          const existingSettings = await storage.getSettings(stationId);\n          if (existingSettings) {\n            return res.status(409).json({\n              message: \"Settings already exist for this station. Use PUT to update.\",\n              settings: existingSettings\n            });\n          }\n        }\n        throw error;\n      }\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid settings data\" });\n    }\n  });\n\n  app.put(\"/api/settings/:stationId\", requireAuth, requireRole(['admin', 'manager']), requireStationAccess, async (req, res) => {\n    try {\n      const { stationId } = req.params;\n      // Ensure stationId comes from URL params, not body\n      const { stationId: _, ...bodyData } = req.body;\n      const validatedData = insertSettingsSchema.partial().parse(bodyData);\n      const settings = await storage.updateSettings(stationId, validatedData);\n      res.json(settings);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid settings data\" });\n    }\n  });\n\n  // Pumps routes\n  app.get(\"/api/pumps\", requireAuth, async (req, res) => {\n    try {\n      const { stationId } = req.query;\n      if (!stationId) {\n        return res.status(400).json({ message: \"Station ID is required\" });\n      }\n      const pumps = await storage.getPumpsByStation(stationId as string);\n      res.json(pumps);\n    } catch (error) {\n      console.error('Error fetching pumps:', error);\n      res.status(500).json({ message: \"Failed to fetch pumps\" });\n    }\n  });\n\n  app.post(\"/api/pumps\", requireAuth, requireRole(['admin', 'manager']), async (req, res) => {\n    try {\n      console.log('Creating pump with data:', req.body);\n      const validatedData = insertPumpSchema.parse(req.body);\n      const pump = await storage.createPump(validatedData);\n      res.status(201).json(pump);\n    } catch (error) {\n      console.error('Error creating pump:', error);\n      res.status(400).json({ message: \"Invalid pump data\", error: error instanceof Error ? error.message : String(error) });\n    }\n  });\n\n  app.put(\"/api/pumps/:id\", requireAuth, requireRole(['admin', 'manager']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertPumpSchema.partial().parse(req.body);\n      const pump = await storage.updatePump(id, validatedData);\n      res.json(pump);\n    } catch (error) {\n      console.error('Error updating pump:', error);\n      res.status(400).json({ message: \"Invalid pump data\", error: error instanceof Error ? error.message : String(error) });\n    }\n  });\n\n  app.delete(\"/api/pumps/:id\", requireAuth, requireRole(['admin', 'manager']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deletePump(id);\n      res.json({ message: \"Pump deleted successfully\" });\n    } catch (error) {\n      console.error('Error deleting pump:', error);\n      res.status(500).json({ message: \"Failed to delete pump\" });\n    }\n  });\n\n  // Pump readings routes\n  app.get(\"/api/pump-readings\", requireAuth, async (req, res) => {\n    try {\n      const { stationId } = req.query;\n      if (!stationId) {\n        return res.status(400).json({ message: \"Station ID is required\" });\n      }\n      const readings = await storage.getPumpReadingsByStation(stationId as string);\n      res.json(readings);\n    } catch (error) {\n      console.error('Error fetching pump readings:', error);\n      res.status(500).json({ message: \"Failed to fetch pump readings\" });\n    }\n  });\n\n  app.post(\"/api/pump-readings\", requireAuth, async (req, res) => {\n    try {\n      console.log('Creating pump reading with data:', req.body);\n      const validatedData = insertPumpReadingSchema.parse(req.body);\n      const reading = await storage.createPumpReading(validatedData);\n      res.status(201).json(reading);\n    } catch (error) {\n      console.error('Error creating pump reading:', error);\n      res.status(400).json({ message: \"Invalid pump reading data\", error: error instanceof Error ? error.message : String(error) });\n    }\n  });\n\n  // Products routes\n  app.get(\"/api/products\", requireAuth, async (req, res) => {\n    try {\n      const products = await storage.getProducts();\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.post(\"/api/products\", requireAuth, requireRole(['admin', 'manager']), async (req, res) => {\n    try {\n      const validatedData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(validatedData);\n      res.status(201).json(product);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid product data\" });\n    }\n  });\n\n  // Price Management endpoints\n  app.put('/api/products/:id', async (req, res) => {\n    try {\n      const productId = req.params.id;\n      const updateData = req.body;\n\n      // Add price history tracking\n      if (updateData.currentPrice) {\n        const [existingProduct] = await storage.getProduct(productId); // Assuming storage.getProduct exists and returns an array or single product\n\n        if (existingProduct && existingProduct.currentPrice !== updateData.currentPrice) {\n          // Log price change for history\n          console.log(`Price updated for ${existingProduct.name}: ${existingProduct.currentPrice} -> ${updateData.currentPrice}`);\n        }\n      }\n\n      const [product] = await storage.updateProduct(productId, {\n        ...updateData,\n        updatedAt: new Date().toISOString()\n      });\n\n      res.json(product);\n    } catch (error) {\n      console.error('Product update error:', error);\n      res.status(500).json({ error: 'Failed to update product' });\n    }\n  });\n\n  // Bulk price update endpoint\n  app.post('/api/products/bulk-update', async (req, res) => {\n    try {\n      const { productIds, updateType, value } = req.body;\n\n      if (!productIds || !Array.isArray(productIds) || !updateType || !value) {\n        return res.status(400).json({ error: 'Invalid bulk update parameters' });\n      }\n\n      const updates = [];\n\n      for (const productId of productIds) {\n        const [product] = await storage.getProduct(productId); // Assuming storage.getProduct exists\n\n        if (product) {\n          let newPrice;\n          const currentPrice = parseFloat(product.currentPrice || '0');\n\n          if (updateType === 'percentage') {\n            newPrice = currentPrice * (1 + parseFloat(value) / 100);\n          } else {\n            newPrice = currentPrice + parseFloat(value);\n          }\n\n          const [updatedProduct] = await storage.updateProduct(productId, {\n            currentPrice: newPrice.toFixed(2),\n            updatedAt: new Date().toISOString()\n          });\n\n          updates.push(updatedProduct);\n        }\n      }\n\n      res.json({ message: 'Bulk update completed', updated: updates });\n    } catch (error) {\n      console.error('Bulk update error:', error);\n      res.status(500).json({ error: 'Failed to perform bulk update' });\n    }\n  });\n\n  // Tanks routes\n  app.get(\"/api/tanks/:stationId\", requireAuth, requireStationAccess, async (req, res) => {\n    try {\n      const { stationId } = req.params;\n      const tanks = await storage.getTanksByStation(stationId);\n      res.json(tanks);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch tanks\" });\n    }\n  });\n\n  app.post(\"/api/tanks\", requireAuth, requireRole(['admin', 'manager']), async (req, res) => {\n    try {\n      const validatedData = insertTankSchema.parse(req.body);\n      const tank = await storage.createTank(validatedData);\n      res.status(201).json(tank);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid tank data\" });\n    }\n  });\n\n  // Stock Movements routes\n  app.get(\"/api/stock-movements/:tankId\", requireAuth, async (req, res) => {\n    try {\n      const { tankId } = req.params;\n      const stockMovements = await storage.getStockMovements(tankId);\n      res.json(stockMovements);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch stock movements\" });\n    }\n  });\n\n  app.post(\"/api/stock-movements\", requireAuth, async (req, res) => {\n    try {\n      const validatedData = insertStockMovementSchema.parse(req.body);\n      const stockMovement = await storage.createStockMovement(validatedData);\n      res.status(201).json(stockMovement);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid stock movement data\" });\n    }\n  });\n\n  // Customers routes\n  app.get(\"/api/customers\", requireAuth, async (req, res) => {\n    try {\n      const customers = await storage.getCustomers();\n      res.json(customers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch customers\" });\n    }\n  });\n\n  app.post(\"/api/customers\", requireAuth, async (req, res) => {\n    try {\n      const customer = await storage.createCustomer(req.body);\n      res.status(201).json(customer);\n    } catch (error) {\n      console.error(\"Error creating customer:\", error);\n      res.status(500).json({ error: \"Failed to create customer\" });\n    }\n  });\n\n  app.delete(\"/api/customers/:id\", requireAuth, async (req, res) => {\n    const { id } = req.params;\n    const user = req.user!;\n\n    try {\n      // Check if customer has outstanding transactions\n      const customer = await storage.getCustomer(id);\n      if (!customer) {\n        return res.status(404).json({ error: \"Customer not found\" });\n      }\n\n      if (parseFloat(customer.outstandingAmount || '0') > 0) {\n        return res.status(400).json({ error: \"Cannot delete customer with outstanding amount\" });\n      }\n\n      await storage.deleteCustomer(id);\n      res.json({ message: \"Customer deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting customer:\", error);\n      res.status(500).json({ error: \"Failed to delete customer\" });\n    }\n  });\n\n  app.put(\"/api/customers/:id\", requireAuth, async (req, res) => {\n    const { id } = req.params;\n    try {\n      const customer = await storage.updateCustomer(id, req.body);\n      res.json(customer);\n    } catch (error) {\n      console.error(\"Error updating customer:\", error);\n      res.status(500).json({ error: \"Failed to update customer\" });\n    }\n  });\n\n  // Suppliers routes\n  app.get(\"/api/suppliers\", requireAuth, async (req, res) => {\n    try {\n      const suppliers = await storage.getSuppliers();\n      res.json(suppliers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch suppliers\" });\n    }\n  });\n\n  app.post(\"/api/suppliers\", requireAuth, requireRole(['admin', 'manager']), async (req, res) => {\n    try {\n      const supplier = await storage.createSupplier(req.body);\n      res.status(201).json(supplier);\n    } catch (error) {\n      console.error(\"Error creating supplier:\", error);\n      res.status(500).json({ error: \"Failed to create supplier\" });\n    }\n  });\n\n  app.delete(\"/api/suppliers/:id\", requireAuth, async (req, res) => {\n    const { id } = req.params;\n\n    try {\n      const supplier = await storage.getSupplier(id);\n      if (!supplier) {\n        return res.status(404).json({ error: \"Supplier not found\" });\n      }\n\n      if (parseFloat(supplier.outstandingAmount || '0') > 0) {\n        return res.status(400).json({ error: \"Cannot delete supplier with outstanding amount\" });\n      }\n\n      await storage.deleteSupplier(id);\n      res.json({ message: \"Supplier deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting supplier:\", error);\n      res.status(500).json({ error: \"Failed to delete supplier\" });\n    }\n  });\n\n  app.put(\"/api/suppliers/:id\", requireAuth, async (req, res) => {\n    const { id } = req.params;\n    try {\n      const supplier = await storage.updateSupplier(id, req.body);\n      res.json(supplier);\n    } catch (error) {\n      console.error(\"Error updating supplier:\", error);\n      res.status(500).json({ error: \"Failed to update supplier\" });\n    }\n  });\n\n  // Sales transactions routes\n  app.get(\"/api/sales/:stationId\", requireAuth, requireStationAccess, async (req, res) => {\n    try {\n      const { stationId } = req.params;\n      const { limit } = req.query;\n      const sales = await storage.getSalesTransactions(stationId, limit ? parseInt(limit as string) : undefined);\n      res.json(sales);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch sales\" });\n    }\n  });\n\n  app.get(\"/api/sales/:stationId/recent\", requireAuth, requireStationAccess, async (req, res) => {\n    try {\n      const { stationId } = req.params;\n      const sales = await storage.getSalesTransactions(stationId, 5); // Get recent 5 sales\n      res.json(sales);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch recent sales\" });\n    }\n  });\n\n  app.get(\"/api/sales/detail/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const userStationId = req.user?.stationId || '';\n      const userRole = req.user?.role || '';\n\n      const sale = await storage.getSalesTransactionWithItemsSecure(id, userStationId, userRole);\n      if (!sale) {\n        return res.status(404).json({ message: \"Sales transaction not found\" });\n      }\n      res.json(sale);\n    } catch (error) {\n      if (error instanceof Error && error.message.includes('Access denied')) {\n        return res.status(403).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Failed to fetch sales transaction details\" });\n    }\n  });\n\n  app.put(\"/api/sales/:transactionId\", requireAuth, async (req, res) => {\n    const { transactionId } = req.params;\n    const { transaction, items } = req.body;\n    const user = req.user!;\n\n    try {\n      // Get existing transaction to check permissions\n      const existingTransaction = await storage.getSalesTransaction(transactionId);\n      if (!existingTransaction) {\n        return res.status(404).json({ error: \"Transaction not found\" });\n      }\n\n      if (user.role !== 'admin' && user.stationId !== existingTransaction.stationId) {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n\n      // Update transaction\n      const updatedTransaction = await storage.updateSalesTransaction(transactionId, transaction);\n\n      // Delete existing items\n      await storage.deleteSalesTransactionItems(transactionId);\n\n      // Add new items\n      const updatedItems = [];\n      for (const item of items) {\n        const newItem = await storage.createSalesTransactionItem({\n          ...item,\n          transactionId: transactionId\n        });\n        updatedItems.push(newItem);\n      }\n\n      res.json({ transaction: updatedTransaction, items: updatedItems });\n    } catch (error) {\n      console.error(\"Error updating sale:\", error);\n      res.status(500).json({ error: \"Failed to update sale\" });\n    }\n  });\n\n  app.delete(\"/api/sales/:id\", requireAuth, requireRole(['admin', 'manager']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const userStationId = req.user?.stationId || '';\n      const userRole = req.user?.role || '';\n\n      await storage.deleteSalesTransactionSecure(id, userStationId, userRole);\n      res.json({ message: \"Sales transaction deleted successfully\" });\n    } catch (error) {\n      if (error instanceof Error && error.message.includes('Access denied')) {\n        return res.status(403).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Failed to delete sales transaction\" });\n    }\n  });\n\n  app.post(\"/api/sales\", requireAuth, async (req, res) => {\n    try {\n      const { transaction, items } = req.body;\n\n      // Generate a shorter invoice number, similar to purchase invoice\n      const invoiceNumber = `SAL${Date.now().toString().slice(-6)}`; // Example: SAL123456\n\n      // Validate transaction data\n      const validatedTransaction = insertSalesTransactionSchema.parse({\n        ...transaction,\n        invoiceNumber: invoiceNumber\n      });\n      const createdTransaction = await storage.createSalesTransaction(validatedTransaction);\n\n      // Create transaction items\n      const createdItems = [];\n      for (const item of items) {\n        const validatedItem = insertSalesTransactionItemSchema.parse({\n          ...item,\n          transactionId: createdTransaction.id\n        });\n        const createdItem = await storage.createSalesTransactionItem(validatedItem);\n        createdItems.push(createdItem);\n\n        // Create stock movement for inventory tracking (only for fuel products with tanks)\n        if (item.tankId && item.tankId !== 'null') {\n          await storage.createStockMovement({\n            tankId: item.tankId,\n            movementType: \"out\",\n            quantity: item.quantity,\n            unitPrice: item.unitPrice,\n            remarks: `Sale - Invoice ${transaction.invoiceNumber}`,\n            referenceType: \"sale\",\n            referenceId: createdTransaction.id,\n            stationId: validatedTransaction.stationId,\n            userId: validatedTransaction.userId,\n          });\n        }\n      }\n\n      // Update customer outstanding amount for credit sales\n      if (validatedTransaction.paymentMethod === 'credit' && validatedTransaction.customerId) {\n        await storage.updateCustomerOutstanding(\n          validatedTransaction.customerId,\n          parseFloat(validatedTransaction.outstandingAmount || '0')\n        );\n      }\n\n      res.status(201).json({ transaction: createdTransaction, items: createdItems });\n    } catch (error) {\n      if (error instanceof Error && error.name === 'ZodError') {\n        console.error(\"Sales validation error:\", error.message, (error as any).errors);\n        return res.status(400).json({\n          message: \"Validation failed\",\n          errors: (error as any).errors\n        });\n      }\n      console.error(\"Sales creation error:\", error);\n      console.error(\"Request body:\", JSON.stringify(req.body, null, 2));\n      res.status(400).json({ message: \"Invalid sales data\", error: error instanceof Error ? error.message : String(error) });\n    }\n  });\n\n  // Purchase orders routes\n  app.get(\"/api/purchase-orders/:stationId\", requireAuth, requireStationAccess, async (req, res) => {\n    try {\n      const { stationId } = req.params;\n      const orders = await storage.getPurchaseOrders(stationId);\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch purchase orders\" });\n    }\n  });\n\n  app.get(\"/api/purchase-orders/detail/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const userStationId = req.user?.stationId || '';\n      const userRole = req.user?.role || '';\n\n      const order = await storage.getPurchaseOrderWithItemsSecure(id, userStationId, userRole);\n      if (!order) {\n        return res.status(404).json({ message: \"Purchase order not found\" });\n      }\n      res.json(order);\n    } catch (error) {\n      if (error instanceof Error && error.message.includes('Access denied')) {\n        return res.status(403).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Failed to fetch purchase order details\" });\n    }\n  });\n\n  app.delete(\"/api/purchase-orders/:id\", requireAuth, requireRole(['admin', 'manager']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const userStationId = req.user?.stationId || '';\n      const userRole = req.user?.role || '';\n\n      await storage.deletePurchaseOrderSecure(id, userStationId, userRole);\n      res.json({ message: \"Purchase order deleted successfully\" });\n    } catch (error) {\n      if (error instanceof Error && error.message.includes('Access denied')) {\n        return res.status(403).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Failed to delete purchase order\" });\n    }\n  });\n\n  app.post(\"/api/purchase-orders\", requireAuth, requireRole(['admin', 'manager']), async (req, res) => {\n    try {\n      const { order, items } = req.body;\n\n      // Generate a shorter invoice number, similar to sale invoice\n      const invoiceNumber = `PUR${Date.now().toString().slice(-6)}`; // Example: PUR123456\n\n      const validatedOrder = insertPurchaseOrderSchema.parse({\n        ...order,\n        invoiceNumber: invoiceNumber\n      });\n      const createdOrder = await storage.createPurchaseOrder(validatedOrder);\n\n      const createdItems = [];\n      for (const item of items) {\n        const validatedItem = insertPurchaseOrderItemSchema.parse({\n          ...item,\n          orderId: createdOrder.id\n        });\n        const createdItem = await storage.createPurchaseOrderItem(validatedItem);\n        createdItems.push(createdItem);\n      }\n\n      res.status(201).json({ order: createdOrder, items: createdItems });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid purchase order data\" });\n    }\n  });\n\n  // Expenses routes\n  app.get(\"/api/expenses/:stationId\", requireAuth, requireStationAccess, async (req, res) => {\n    try {\n      const { stationId } = req.params;\n      const expenses = await storage.getExpenses(stationId);\n      res.json(expenses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch expenses\" });\n    }\n  });\n\n  app.delete(\"/api/expenses/:stationId/:id\", requireAuth, requireRole(['admin', 'manager']), requireStationAccess, async (req, res) => {\n    try {\n      const { id, stationId } = req.params;\n      await storage.deleteExpense(id, stationId);\n      res.json({ message: \"Expense deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete expense\" });\n    }\n  });\n\n  app.post(\"/api/expenses\", requireAuth, async (req, res) => {\n    try {\n      const validatedData = insertExpenseSchema.parse(req.body);\n      const expense = await storage.createExpense(validatedData);\n      res.status(201).json(expense);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid expense data\" });\n    }\n  });\n\n  // Payments routes\n  app.get(\"/api/payments/:stationId\", requireAuth, requireStationAccess, async (req, res) => {\n    try {\n      const { stationId } = req.params;\n      const payments = await storage.getPayments(stationId);\n      res.json(payments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch payments\" });\n    }\n  });\n\n  app.delete(\"/api/payments/:stationId/:id\", requireAuth, requireRole(['admin', 'manager']), requireStationAccess, async (req, res) => {\n    try {\n      const { id, stationId } = req.params;\n      await storage.deletePayment(id, stationId);\n      res.json({ message: \"Payment deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete payment\" });\n    }\n  });\n\n  app.post(\"/api/payments\", requireAuth, async (req, res) => {\n    try {\n      // Validate that user has stationId for security\n      if (!req.user.stationId) {\n        return res.status(400).json({ message: \"User must be assigned to a station to record payments\" });\n      }\n\n      // Extract only allowed fields from client, ignore userId/stationId\n      const { customerId, supplierId, amount, currencyCode, paymentMethod, referenceNumber, notes, type } = req.body;\n\n      // Use server-side attribution from authenticated user\n      const paymentData = {\n        customerId,\n        supplierId,\n        amount,\n        currencyCode: currencyCode || 'PKR',\n        paymentMethod,\n        referenceNumber,\n        notes,\n        type,\n        // Server-side attribution - never trust client\n        userId: req.user.id,\n        stationId: req.user.stationId\n      };\n\n      const payment = await storage.createPayment(paymentData);\n      res.status(201).json(payment);\n    } catch (error) {\n      console.error('Payment creation error:', error);\n      res.status(400).json({ message: \"Invalid payment data\" });\n    }\n  });\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/:stationId\", requireAuth, requireStationAccess, async (req, res) => {\n    try {\n      const { stationId } = req.params;\n      const stats = await storage.getDashboardStats(stationId);\n      console.log('Dashboard stats:', JSON.stringify(stats, null, 2));\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Reports\n  app.get(\"/api/reports/sales/:stationId\", requireAuth, requireStationAccess, async (req, res) => {\n    try {\n      const { stationId } = req.params;\n      const { startDate, endDate } = req.query;\n\n      const report = await storage.getSalesReport(\n        stationId,\n        new Date(startDate as string),\n        new Date(endDate as string)\n      );\n      res.json(report);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate sales report\" });\n    }\n  });\n\n  app.get(\"/api/reports/financial/:stationId\", requireAuth, requireStationAccess, async (req, res) => {\n    try {\n      const { stationId } = req.params;\n      const { startDate, endDate } = req.query;\n\n      const report = await storage.getFinancialReport(\n        stationId,\n        new Date(startDate as string),\n        new Date(endDate as string)\n      );\n      res.json(report);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate financial report\" });\n    }\n  });\n\n  app.get(\"/api/reports/daily/:stationId\", requireAuth, requireStationAccess, async (req, res) => {\n    try {\n      const { stationId } = req.params;\n      const { date } = req.query;\n\n      const report = await storage.getDailyReport(\n        stationId,\n        date ? new Date(date as string) : new Date()\n      );\n      res.json(report);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate daily report\" });\n    }\n  });\n\n  app.get(\"/api/reports/aging/:stationId\", requireAuth, requireStationAccess, async (req, res) => {\n    try {\n      const { stationId } = req.params;\n      const { type } = req.query;\n\n      if (!type || (type !== 'receivable' && type !== 'payable')) {\n        return res.status(400).json({ message: \"Type parameter must be 'receivable' or 'payable'\" });\n      }\n\n      const report = await storage.getAgingReport(stationId, type as 'receivable' | 'payable');\n      res.json(report);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate aging report\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":37015},"server/storage.ts":{"content":"import {\n  users, stations, products, tanks, customers, suppliers, salesTransactions, salesTransactionItems,\n  purchaseOrders, purchaseOrderItems, expenses, payments, stockMovements, priceHistory, settings,\n  pumps, pumpReadings,\n  type User, type InsertUser, type Station, type InsertStation,\n  type Product, type InsertProduct, type Tank, type InsertTank,\n  type Customer, type InsertCustomer, type Supplier, type InsertSupplier,\n  type SalesTransaction, type InsertSalesTransaction,\n  type SalesTransactionItem, type InsertSalesTransactionItem,\n  type PurchaseOrder, type InsertPurchaseOrder,\n  type PurchaseOrderItem, type InsertPurchaseOrderItem,\n  type Expense, type InsertExpense, type Payment, type InsertPayment,\n  type StockMovement, type InsertStockMovement,\n  type PriceHistory, type InsertPriceHistory,\n  type Settings, type InsertSettings,\n  type Pump, type PumpReading, type InsertPump, type InsertPumpReading\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, sql, and, gte, lte, sum } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getUsers(): Promise<User[]>; // Added getUsers method\n\n  // Stations\n  getStation(id: string): Promise<Station | undefined>;\n  getStations(): Promise<Station[]>;\n  createStation(station: InsertStation): Promise<Station>;\n  updateStation(id: string, station: Partial<InsertStation>): Promise<Station>;\n\n  // Products\n  getProducts(): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product>;\n\n  // Tanks\n  getTanksByStation(stationId: string): Promise<(Tank & { product: Product })[]>;\n  getTank(id: string): Promise<Tank | undefined>;\n  createTank(tank: InsertTank): Promise<Tank>;\n  updateTankStock(id: string, currentStock: number): Promise<Tank>;\n\n  // Customers\n  getCustomers(): Promise<Customer[]>;\n  getCustomer(id: string): Promise<Customer | undefined>;\n  createCustomer(customer: InsertCustomer): Promise<Customer>;\n  updateCustomer(id: string, customer: Partial<InsertCustomer>): Promise<Customer>;\n  deleteCustomer(id: string): Promise<void>;\n  updateCustomerOutstanding(customerId: string, additionalAmount: number): Promise<void>;\n\n  // Suppliers\n  getSuppliers(): Promise<Supplier[]>;\n  getSupplier(id: string): Promise<Supplier | undefined>;\n  createSupplier(supplier: InsertSupplier): Promise<Supplier>;\n  updateSupplier(id: string, supplier: Partial<InsertSupplier>): Promise<Supplier>;\n  deleteSupplier(id: string): Promise<void>;\n  updateSupplierOutstanding(supplierId: string, additionalAmount: number): Promise<void>;\n\n  // Sales Transactions\n  getSalesTransactions(stationId: string, limit?: number): Promise<SalesTransaction[]>;\n  getSalesTransaction(id: string): Promise<SalesTransaction | undefined>;\n  getSalesTransactionWithItems(id: string): Promise<(SalesTransaction & { items: (SalesTransactionItem & { product: Product })[], customer: Customer, station: Station, user: User }) | undefined>;\n  getSalesTransactionWithItemsSecure(id: string, userStationId: string, userRole: string): Promise<(SalesTransaction & { items: (SalesTransactionItem & { product: Product })[], customer: Customer, station: Station, user: User }) | undefined>;\n  createSalesTransaction(transaction: InsertSalesTransaction): Promise<SalesTransaction>;\n  updateSalesTransaction(id: string, transaction: Partial<InsertSalesTransaction>): Promise<SalesTransaction>;\n  deleteSalesTransaction(id: string): Promise<void>;\n  deleteSalesTransactionSecure(id: string, userStationId: string, userRole: string): Promise<void>;\n  deleteSalesTransactionItems(transactionId: string): Promise<void>;\n\n  // Sales Transaction Items\n  createSalesTransactionItem(item: InsertSalesTransactionItem): Promise<SalesTransactionItem>;\n  getSalesTransactionItems(transactionId: string): Promise<SalesTransactionItem[]>;\n\n  // Purchase Orders\n  getPurchaseOrders(stationId: string): Promise<PurchaseOrder[]>;\n  getPurchaseOrder(id: string): Promise<PurchaseOrder | undefined>;\n  getPurchaseOrderWithItems(id: string): Promise<(PurchaseOrder & { items: PurchaseOrderItem[], supplier: Supplier, station: Station }) | undefined>;\n  getPurchaseOrderWithItemsSecure(id: string, userStationId: string, userRole: string): Promise<(PurchaseOrder & { items: PurchaseOrderItem[], supplier: Supplier, station: Station }) | undefined>;\n  createPurchaseOrder(order: InsertPurchaseOrder): Promise<PurchaseOrder>;\n  deletePurchaseOrder(id: string): Promise<void>;\n  deletePurchaseOrderSecure(id: string, userStationId: string, userRole: string): Promise<void>;\n\n  // Purchase Order Items\n  createPurchaseOrderItem(item: InsertPurchaseOrderItem): Promise<PurchaseOrderItem>;\n\n  // Expenses\n  getExpenses(stationId: string): Promise<Expense[]>;\n  createExpense(expense: InsertExpense): Promise<Expense>;\n  deleteExpense(id: string, stationId: string): Promise<void>;\n\n  // Payments\n  getPayments(stationId: string): Promise<Payment[]>;\n  createPayment(payment: InsertPayment): Promise<Payment>;\n  deletePayment(id: string, stationId: string): Promise<void>;\n\n  // Stock Movements\n  getStockMovements(tankId: string): Promise<StockMovement[]>;\n  createStockMovement(movement: InsertStockMovement): Promise<StockMovement>;\n\n  // Reports and Analytics\n  getDashboardStats(stationId: string): Promise<any>;\n  getSalesReport(stationId: string, startDate: Date, endDate: Date): Promise<any>;\n  getFinancialReport(stationId: string, startDate: Date, endDate: Date): Promise<any>;\n  getDailyReport(stationId: string, date: Date): Promise<any>;\n  getAgingReport(stationId: string, type: 'receivable' | 'payable'): Promise<any>;\n\n  // Settings\n  getSettings(stationId: string): Promise<Settings | undefined>;\n  createSettings(settings: InsertSettings): Promise<Settings>;\n  updateSettings(stationId: string, settings: Partial<InsertSettings>): Promise<Settings>;\n\n  // Pump Management\n  getPumpsByStation(stationId: string): Promise<(Pump & { product?: Product })[]>;\n  createPump(data: any): Promise<Pump>;\n  updatePump(id: string, data: any): Promise<Pump>;\n  deletePump(id: string): Promise<void>;\n\n  // Pump Readings\n  getPumpReadingsByStation(stationId: string): Promise<(PumpReading & { pump?: Pump & { product?: Product }; product?: Product })[]>;\n  createPumpReading(data: any): Promise<PumpReading>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Assuming 'db' is available in the class context or passed to the constructor.\n  // For simplicity, directly using the imported 'db'. If 'db' needs to be\n  // managed by the class, it should be a class member initialized appropriately.\n  private db = db;\n\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await this.db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await this.db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await this.db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async getUsers(): Promise<User[]> {\n    return await this.db.select().from(users);\n  }\n\n  async updateUser(id: string, userData: Partial<InsertUser>): Promise<User> {\n    const [user] = await this.db.update(users)\n      .set(userData)\n      .where(eq(users.id, id))\n      .returning();\n    if (!user) throw new Error(\"User not found\");\n    return user;\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    await this.db.delete(users).where(eq(users.id, id));\n  }\n\n  async getStation(id: string): Promise<Station | undefined> {\n    const [station] = await this.db.select().from(stations).where(eq(stations.id, id));\n    return station || undefined;\n  }\n\n  async getStations(): Promise<Station[]> {\n    return await this.db.select().from(stations).where(eq(stations.isActive, true));\n  }\n\n  async createStation(insertStation: InsertStation): Promise<Station> {\n    const [station] = await this.db.insert(stations).values(insertStation).returning();\n    return station;\n  }\n\n  async updateStation(id: string, stationData: Partial<InsertStation>): Promise<Station> {\n    const [station] = await this.db.update(stations)\n      .set(stationData)\n      .where(eq(stations.id, id))\n      .returning();\n    if (!station) throw new Error(\"Station not found\");\n    return station;\n  }\n\n  async getProducts(): Promise<Product[]> {\n    return await this.db.select().from(products).where(eq(products.isActive, true));\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    const [product] = await this.db.select().from(products).where(eq(products.id, id));\n    return product || undefined;\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const [product] = await this.db.insert(products).values(insertProduct).returning();\n    return product;\n  }\n\n  async updateProduct(id: string, productData: Partial<InsertProduct>): Promise<Product> {\n    const [product] = await this.db.update(products)\n      .set({ ...productData })\n      .where(eq(products.id, id))\n      .returning();\n    return product;\n  }\n\n  async getTanksByStation(stationId: string): Promise<(Tank & { product: Product })[]> {\n    const result = await this.db\n      .select({\n        // Tank fields\n        id: tanks.id,\n        stationId: tanks.stationId,\n        name: tanks.name,\n        productId: tanks.productId,\n        capacity: tanks.capacity,\n        currentStock: tanks.currentStock,\n        minimumLevel: tanks.minimumLevel,\n        status: tanks.status,\n        lastRefillDate: tanks.lastRefillDate,\n        createdAt: tanks.createdAt,\n        // Product fields (nested)\n        product: {\n          id: products.id,\n          name: products.name,\n          category: products.category,\n          unit: products.unit,\n          currentPrice: products.currentPrice,\n          density: products.density,\n          hsnCode: products.hsnCode,\n          taxRate: products.taxRate,\n          isActive: products.isActive,\n          createdAt: products.createdAt\n        }\n      })\n      .from(tanks)\n      .innerJoin(products, eq(tanks.productId, products.id))\n      .where(eq(tanks.stationId, stationId));\n\n    return result as (Tank & { product: Product })[];\n  }\n\n  async getTank(id: string): Promise<Tank | undefined> {\n    const [tank] = await this.db.select().from(tanks).where(eq(tanks.id, id));\n    return tank || undefined;\n  }\n\n  async createTank(insertTank: InsertTank): Promise<Tank> {\n    const [tank] = await this.db.insert(tanks).values(insertTank).returning();\n    return tank;\n  }\n\n  async updateTankStock(id: string, currentStock: number): Promise<Tank> {\n    const [tank] = await this.db.update(tanks)\n      .set({ currentStock: currentStock.toString() })\n      .where(eq(tanks.id, id))\n      .returning();\n    return tank;\n  }\n\n  async getCustomers(): Promise<Customer[]> {\n    return await this.db.select().from(customers).where(eq(customers.isActive, true));\n  }\n\n  async getCustomer(id: string): Promise<Customer | undefined> {\n    const result = await this.db\n      .select()\n      .from(customers)\n      .where(eq(customers.id, id))\n      .limit(1);\n    return result[0];\n  }\n\n  async createCustomer(insertCustomer: InsertCustomer): Promise<Customer> {\n    const result = await this.db.insert(customers).values(insertCustomer).returning();\n    return result[0];\n  }\n\n  async updateCustomer(id: string, customerData: Partial<InsertCustomer>): Promise<Customer> {\n    const result = await this.db\n      .update(customers)\n      .set(customerData)\n      .where(eq(customers.id, id))\n      .returning();\n\n    if (result.length === 0) {\n      throw new Error(\"Customer not found\");\n    }\n\n    return result[0];\n  }\n\n  async deleteCustomer(id: string): Promise<void> {\n    await this.db.delete(customers).where(eq(customers.id, id));\n  }\n\n  async updateCustomerOutstanding(customerId: string, additionalAmount: number): Promise<void> {\n    try {\n      const result = await this.db.update(customers)\n        .set({\n          outstandingAmount: sql`${customers.outstandingAmount} + ${additionalAmount}`\n        })\n        .where(eq(customers.id, customerId))\n        .returning({ id: customers.id });\n\n      if (result.length === 0) {\n        throw new Error(`Customer ${customerId} not found`);\n      }\n    } catch (error) {\n      throw new Error(`Failed to update customer outstanding amount: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async updateSupplierOutstanding(supplierId: string, additionalAmount: number): Promise<void> {\n    try {\n      const result = await this.db.update(suppliers)\n        .set({\n          outstandingAmount: sql`${suppliers.outstandingAmount} + ${additionalAmount}`\n        })\n        .where(eq(suppliers.id, supplierId))\n        .returning({ id: suppliers.id });\n\n      if (result.length === 0) {\n        throw new Error(`Supplier ${supplierId} not found`);\n      }\n    } catch (error) {\n      throw new Error(`Failed to update supplier outstanding amount: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async getSuppliers(): Promise<Supplier[]> {\n    return await this.db.select().from(suppliers).where(eq(suppliers.isActive, true));\n  }\n\n  async getSupplier(id: string): Promise<Supplier | undefined> {\n    const result = await this.db\n      .select()\n      .from(suppliers)\n      .where(eq(suppliers.id, id))\n      .limit(1);\n    return result[0];\n  }\n\n  async createSupplier(insertSupplier: InsertSupplier): Promise<Supplier> {\n    const result = await this.db.insert(suppliers).values(insertSupplier).returning();\n    return result[0];\n  }\n\n  async updateSupplier(id: string, supplierData: Partial<InsertSupplier>): Promise<Supplier> {\n    const result = await this.db\n      .update(suppliers)\n      .set(supplierData)\n      .where(eq(suppliers.id, id))\n      .returning();\n    if (!result[0]) throw new Error(\"Supplier not found\");\n    return result[0];\n  }\n\n  async deleteSupplier(id: string): Promise<void> {\n    await this.db.delete(suppliers).where(eq(suppliers.id, id));\n  }\n\n  async getSalesTransactions(stationId: string, limit = 50): Promise<any[]> {\n    // First get the transactions\n    const transactions = await this.db.select()\n      .from(salesTransactions)\n      .where(eq(salesTransactions.stationId, stationId))\n      .orderBy(desc(salesTransactions.transactionDate))\n      .limit(limit);\n\n    // For each transaction, get its items with product details\n    const transactionsWithItems = await Promise.all(\n      transactions.map(async (transaction) => {\n        const items = await this.db\n          .select({\n            id: salesTransactionItems.id,\n            productId: salesTransactionItems.productId,\n            quantity: salesTransactionItems.quantity,\n            unitPrice: salesTransactionItems.unitPrice,\n            totalPrice: salesTransactionItems.totalPrice,\n            product: {\n              id: products.id,\n              name: products.name,\n              category: products.category,\n              unit: products.unit,\n              currentPrice: products.currentPrice\n            }\n          })\n          .from(salesTransactionItems)\n          .innerJoin(products, eq(salesTransactionItems.productId, products.id))\n          .where(eq(salesTransactionItems.transactionId, transaction.id));\n\n        return {\n          ...transaction,\n          items\n        };\n      })\n    );\n\n    return transactionsWithItems;\n  }\n\n  async getSalesTransaction(id: string): Promise<SalesTransaction | undefined> {\n    const [transaction] = await this.db.select().from(salesTransactions).where(eq(salesTransactions.id, id));\n    return transaction || undefined;\n  }\n\n  async createSalesTransaction(insertTransaction: InsertSalesTransaction): Promise<SalesTransaction> {\n    try {\n      const [transaction] = await this.db.insert(salesTransactions).values(insertTransaction).returning();\n      return transaction;\n    } catch (error) {\n      throw new Error(`Failed to create sales transaction: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async updateSalesTransaction(id: string, transaction: Partial<InsertSalesTransaction>): Promise<SalesTransaction> {\n    const result = await this.db\n      .update(salesTransactions)\n      .set(transaction)\n      .where(eq(salesTransactions.id, id))\n      .returning();\n\n    if (result.length === 0) {\n      throw new Error(\"Transaction not found\");\n    }\n\n    return result[0];\n  }\n\n  async deleteSalesTransaction(id: string): Promise<void> {\n    await this.db.transaction(async (tx) => {\n      // Delete related transaction items first\n      await tx.delete(salesTransactionItems).where(eq(salesTransactionItems.transactionId, id));\n\n      // Delete the transaction\n      await tx.delete(salesTransactions).where(eq(salesTransactions.id, id));\n    });\n  }\n\n  async deleteSalesTransactionSecure(id: string, userStationId: string, userRole: string): Promise<void> {\n    await this.db.transaction(async (tx) => {\n      // First verify the transaction belongs to the user's station (unless admin)\n      if (userRole !== 'admin') {\n        const [transaction] = await tx.select({ stationId: salesTransactions.stationId })\n          .from(salesTransactions)\n          .where(eq(salesTransactions.id, id));\n\n        if (!transaction) {\n          throw new Error('Sales transaction not found');\n        }\n\n        if (transaction.stationId !== userStationId) {\n          throw new Error('Access denied: Transaction does not belong to your station');\n        }\n      }\n\n      // Delete related transaction items first\n      await tx.delete(salesTransactionItems).where(eq(salesTransactionItems.transactionId, id));\n\n      // Delete the transaction\n      const result = await tx.delete(salesTransactions).where(eq(salesTransactions.id, id)).returning({ id: salesTransactions.id });\n\n      if (result.length === 0) {\n        throw new Error('Sales transaction not found');\n      }\n    });\n  }\n\n  async deleteSalesTransactionItems(transactionId: string): Promise<void> {\n    await this.db\n      .delete(salesTransactionItems)\n      .where(eq(salesTransactionItems.transactionId, transactionId));\n  }\n\n  async createSalesTransactionItem(insertItem: InsertSalesTransactionItem): Promise<SalesTransactionItem> {\n    const [item] = await this.db.insert(salesTransactionItems).values(insertItem).returning();\n    return item;\n  }\n\n  async getSalesTransactionItems(transactionId: string): Promise<SalesTransactionItem[]> {\n    const result = await this.db\n      .select()\n      .from(salesTransactionItems)\n      .where(eq(salesTransactionItems.transactionId, transactionId));\n    return result;\n  }\n\n  async getPurchaseOrders(stationId: string): Promise<PurchaseOrder[]> {\n    return await this.db.select()\n      .from(purchaseOrders)\n      .where(eq(purchaseOrders.stationId, stationId))\n      .orderBy(desc(purchaseOrders.orderDate));\n  }\n\n  async createPurchaseOrder(insertOrder: InsertPurchaseOrder): Promise<PurchaseOrder> {\n    try {\n      const [order] = await this.db.insert(purchaseOrders).values(insertOrder).returning();\n      return order;\n    } catch (error) {\n      throw new Error(`Failed to create purchase order: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async createPurchaseOrderItem(insertItem: InsertPurchaseOrderItem): Promise<PurchaseOrderItem> {\n    const [item] = await this.db.insert(purchaseOrderItems).values(insertItem).returning();\n    return item;\n  }\n\n  async getExpenses(stationId: string): Promise<Expense[]>{\n    return await this.db.select()\n      .from(expenses)\n      .where(eq(expenses.stationId, stationId))\n      .orderBy(desc(expenses.expenseDate));\n  }\n\n  async createExpense(insertExpense: InsertExpense): Promise<Expense> {\n    const [expense] = await this.db.insert(expenses).values(insertExpense).returning();\n    return expense;\n  }\n\n  async deleteExpense(id: string, stationId: string): Promise<void> {\n    try {\n      const result = await this.db.delete(expenses).where(\n        and(\n          eq(expenses.id, id),\n          eq(expenses.stationId, stationId)\n        )\n      ).returning({ id: expenses.id });\n\n      if (result.length === 0) {\n        throw new Error(`Expense ${id} not found or not authorized for station ${stationId}`);\n      }\n    } catch (error) {\n      throw new Error(`Failed to delete expense: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async getPayments(stationId: string): Promise<Payment[]>{\n    return await this.db.select()\n      .from(payments)\n      .where(eq(payments.stationId, stationId))\n      .orderBy(desc(payments.paymentDate));\n  }\n\n  async createPayment(insertPayment: InsertPayment): Promise<Payment> {\n    try {\n      // Start a transaction to ensure atomicity\n      const result = await this.db.transaction(async (tx) => {\n        // Create the payment record\n        const [payment] = await tx.insert(payments).values(insertPayment).returning();\n\n        // Update outstanding amounts based on payment type\n        const paymentAmount = parseFloat(payment.amount);\n\n        if (payment.type === 'receivable' && payment.customerId) {\n          // Customer payment - reduce customer's outstanding amount\n          await tx.update(customers)\n            .set({\n              outstandingAmount: sql`${customers.outstandingAmount} - ${paymentAmount}`\n            })\n            .where(eq(customers.id, payment.customerId));\n        } else if (payment.type === 'payable' && payment.supplierId) {\n          // Supplier payment - reduce supplier's outstanding amount\n          await tx.update(suppliers)\n            .set({\n              outstandingAmount: sql`${suppliers.outstandingAmount} - ${paymentAmount}`\n            })\n            .where(eq(suppliers.id, payment.supplierId));\n        }\n\n        return payment;\n      });\n\n      return result;\n    } catch (error) {\n      throw new Error(`Failed to create payment and update outstanding amounts: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async deletePayment(id: string, stationId: string): Promise<void> {\n    try {\n      const result = await this.db.delete(payments).where(\n        and(\n          eq(payments.id, id),\n          eq(payments.stationId, stationId)\n        )\n      ).returning({ id: payments.id });\n\n      if (result.length === 0) {\n        throw new Error(`Payment ${id} not found or not authorized for station ${stationId}`);\n      }\n    } catch (error) {\n      throw new Error(`Failed to delete payment: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async getStockMovements(tankId: string): Promise<StockMovement[]> {\n    return await this.db.select()\n      .from(stockMovements)\n      .where(eq(stockMovements.tankId, tankId))\n      .orderBy(desc(stockMovements.movementDate));\n  }\n\n  async createStockMovement(insertMovement: InsertStockMovement): Promise<StockMovement & { updatedTank?: Tank }> {\n    return await this.db.transaction(async (tx) => {\n      // Get current tank stock\n      const [currentTank] = await tx.select().from(tanks).where(eq(tanks.id, insertMovement.tankId));\n      if (!currentTank) {\n        throw new Error(`Tank ${insertMovement.tankId} not found`);\n      }\n\n      const currentStock = parseFloat(currentTank.currentStock || '0');\n      const movementQuantity = parseFloat(insertMovement.quantity);\n\n      // Calculate new stock based on movement type\n      let newStock: number;\n      switch (insertMovement.movementType) {\n        case 'in':\n          newStock = currentStock + Math.abs(movementQuantity);\n          break;\n        case 'out':\n          newStock = Math.max(0, currentStock - Math.abs(movementQuantity));\n          break;\n        case 'adjustment':\n          // For adjustments, quantity can be positive or negative\n          newStock = Math.max(0, currentStock + movementQuantity);\n          break;\n        case 'transfer':\n          // For transfers, this handles the source tank (out)\n          newStock = Math.max(0, currentStock - Math.abs(movementQuantity));\n          break;\n        case 'audit':\n          // For audits, the new quantity IS the new stock (not a delta)\n          newStock = Math.max(0, Math.abs(movementQuantity));\n          break;\n        default:\n          throw new Error(`Invalid movement type: ${insertMovement.movementType}`);\n      }\n\n      // Create stock movement record with correct values\n      const movementData = {\n        ...insertMovement,\n        previousStock: currentStock.toString(),\n        newStock: newStock.toString(),\n      };\n\n      const [movement] = await tx.insert(stockMovements).values(movementData).returning();\n\n      // Update tank stock and set last refill date if it's an 'in' movement\n      const updateData: any = { currentStock: newStock.toString() };\n      if (insertMovement.movementType === 'in') {\n        updateData.lastRefillDate = new Date();\n      }\n\n      const [updatedTank] = await tx.update(tanks)\n        .set(updateData)\n        .where(eq(tanks.id, insertMovement.tankId))\n        .returning();\n\n      return {\n        ...movement,\n        updatedTank\n      };\n    });\n  }\n\n  async getDashboardStats(stationId: string): Promise<any> {\n    const today = new Date();\n    const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n    const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);\n\n    // Today's sales\n    const todaysSales = await this.db\n      .select({\n        totalAmount: sum(salesTransactions.totalAmount),\n        count: sql<number>`count(*)`,\n      })\n      .from(salesTransactions)\n      .where(\n        and(\n          eq(salesTransactions.stationId, stationId),\n          gte(salesTransactions.transactionDate, startOfDay)\n        )\n      );\n\n    // Monthly sales\n    const monthlySales = await this.db\n      .select({\n        totalAmount: sum(salesTransactions.totalAmount),\n        count: sql<number>`count(*)`,\n      })\n      .from(salesTransactions)\n      .where(\n        and(\n          eq(salesTransactions.stationId, stationId),\n          gte(salesTransactions.transactionDate, startOfMonth)\n        )\n      );\n\n    // Outstanding amount from customers\n    const outstanding = await this.db\n      .select({\n        totalOutstanding: sum(customers.outstandingAmount),\n      })\n      .from(customers);\n\n    return {\n      todaysSales: todaysSales[0],\n      monthlySales: monthlySales[0],\n      outstanding: outstanding[0],\n    };\n  }\n\n  async getSalesReport(stationId: string, startDate: Date, endDate: Date): Promise<any> {\n    return await this.db\n      .select({\n        date: salesTransactions.transactionDate,\n        totalAmount: sum(salesTransactions.totalAmount),\n        transactionCount: sql<number>`count(*)`,\n      })\n      .from(salesTransactions)\n      .where(\n        and(\n          eq(salesTransactions.stationId, stationId),\n          gte(salesTransactions.transactionDate, startDate),\n          lte(salesTransactions.transactionDate, endDate)\n        )\n      )\n      .groupBy(salesTransactions.transactionDate)\n      .orderBy(salesTransactions.transactionDate);\n  }\n\n  async getFinancialReport(stationId: string, startDate: Date, endDate: Date): Promise<any> {\n    // Revenue\n    const revenue = await this.db\n      .select({\n        totalRevenue: sum(salesTransactions.totalAmount),\n      })\n      .from(salesTransactions)\n      .where(\n        and(\n          eq(salesTransactions.stationId, stationId),\n          gte(salesTransactions.transactionDate, startDate),\n          lte(salesTransactions.transactionDate, endDate)\n        )\n      );\n\n    // Expenses\n    const expenseData = await this.db\n      .select({\n        totalExpenses: sum(expenses.amount),\n      })\n      .from(expenses)\n      .where(\n        and(\n          eq(expenses.stationId, stationId),\n          gte(expenses.expenseDate, startDate),\n          lte(expenses.expenseDate, endDate)\n        )\n      );\n\n    return {\n      revenue: revenue[0],\n      expenses: expenseData[0],\n    };\n  }\n\n  async getSalesTransactionWithItems(id: string): Promise<(SalesTransaction & { items: (SalesTransactionItem & { product: Product })[], customer: Customer, station: Station, user: User }) | undefined> {\n    const transaction = await this.db\n      .select()\n      .from(salesTransactions)\n      .leftJoin(customers, eq(salesTransactions.customerId, customers.id))\n      .leftJoin(stations, eq(salesTransactions.stationId, stations.id))\n      .leftJoin(users, eq(salesTransactions.userId, users.id))\n      .where(eq(salesTransactions.id, id))\n      .then(results => results[0]);\n\n    if (!transaction) return undefined;\n\n    // Ensure customer, station, and user exist - if not, the data is inconsistent\n    if (!transaction.customers || !transaction.stations || !transaction.users) {\n      throw new Error(`Sales transaction ${id} has missing customer, station, or user data`);\n    }\n\n    const itemsWithProducts = await this.db\n      .select({\n        // SalesTransactionItem fields\n        id: salesTransactionItems.id,\n        transactionId: salesTransactionItems.transactionId,\n        productId: salesTransactionItems.productId,\n        tankId: salesTransactionItems.tankId,\n        quantity: salesTransactionItems.quantity,\n        unitPrice: salesTransactionItems.unitPrice,\n        totalPrice: salesTransactionItems.totalPrice,\n        createdAt: salesTransactionItems.createdAt,\n        // Product fields (nested)\n        product: {\n          id: products.id,\n          name: products.name,\n          category: products.category,\n          unit: products.unit,\n          currentPrice: products.currentPrice,\n          density: products.density,\n          hsnCode: products.hsnCode,\n          taxRate: products.taxRate,\n          isActive: products.isActive,\n          createdAt: products.createdAt\n        }\n      })\n      .from(salesTransactionItems)\n      .innerJoin(products, eq(salesTransactionItems.productId, products.id))\n      .where(eq(salesTransactionItems.transactionId, id));\n\n    return {\n      ...transaction.sales_transactions,\n      items: itemsWithProducts as (SalesTransactionItem & { product: Product })[],\n      customer: transaction.customers,\n      station: transaction.stations,\n      user: transaction.users\n    };\n  }\n\n  async getSalesTransactionWithItemsSecure(id: string, userStationId: string, userRole: string): Promise<(SalesTransaction & { items: (SalesTransactionItem & { product: Product })[], customer: Customer, station: Station, user: User }) | undefined> {\n    const transaction = await this.db\n      .select()\n      .from(salesTransactions)\n      .leftJoin(customers, eq(salesTransactions.customerId, customers.id))\n      .leftJoin(stations, eq(salesTransactions.stationId, stations.id))\n      .leftJoin(users, eq(salesTransactions.userId, users.id))\n      .where(eq(salesTransactions.id, id))\n      .then(results => results[0]);\n\n    if (!transaction) return undefined;\n\n    // Ensure customer, station, and user exist - if not, the data is inconsistent\n    if (!transaction.customers || !transaction.stations || !transaction.users) {\n      throw new Error(`Sales transaction ${id} has missing customer, station, or user data`);\n    }\n\n    // Security check: verify the transaction belongs to the user's station (admins can access all)\n    if (userRole !== 'admin' && transaction.sales_transactions.stationId !== userStationId) {\n      throw new Error('Access denied: Transaction does not belong to your station');\n    }\n\n    const itemsWithProducts = await this.db\n      .select({\n        // SalesTransactionItem fields\n        id: salesTransactionItems.id,\n        transactionId: salesTransactionItems.transactionId,\n        productId: salesTransactionItems.productId,\n        tankId: salesTransactionItems.tankId,\n        quantity: salesTransactionItems.quantity,\n        unitPrice: salesTransactionItems.unitPrice,\n        totalPrice: salesTransactionItems.totalPrice,\n        createdAt: salesTransactionItems.createdAt,\n        // Product fields (nested)\n        product: {\n          id: products.id,\n          name: products.name,\n          category: products.category,\n          unit: products.unit,\n          currentPrice: products.currentPrice,\n          density: products.density,\n          hsnCode: products.hsnCode,\n          taxRate: products.taxRate,\n          isActive: products.isActive,\n          createdAt: products.createdAt\n        }\n      })\n      .from(salesTransactionItems)\n      .innerJoin(products, eq(salesTransactionItems.productId, products.id))\n      .where(eq(salesTransactionItems.transactionId, id));\n\n    return {\n      ...transaction.sales_transactions,\n      items: itemsWithProducts as (SalesTransactionItem & { product: Product })[],\n      customer: transaction.customers,\n      station: transaction.stations,\n      user: transaction.users\n    };\n  }\n\n  async deleteSalesTransaction(id: string): Promise<void> {\n    await this.db.transaction(async (tx) => {\n      // Delete related transaction items first\n      await tx.delete(salesTransactionItems).where(eq(salesTransactionItems.transactionId, id));\n\n      // Delete the transaction\n      await tx.delete(salesTransactions).where(eq(salesTransactions.id, id));\n    });\n  }\n\n  async deleteSalesTransactionSecure(id: string, userStationId: string, userRole: string): Promise<void> {\n    await this.db.transaction(async (tx) => {\n      // First verify the transaction belongs to the user's station (unless admin)\n      if (userRole !== 'admin') {\n        const [transaction] = await tx.select({ stationId: salesTransactions.stationId })\n          .from(salesTransactions)\n          .where(eq(salesTransactions.id, id));\n\n        if (!transaction) {\n          throw new Error('Sales transaction not found');\n        }\n\n        if (transaction.stationId !== userStationId) {\n          throw new Error('Access denied: Transaction does not belong to your station');\n        }\n      }\n\n      // Delete related transaction items first\n      await tx.delete(salesTransactionItems).where(eq(salesTransactionItems.transactionId, id));\n\n      // Delete the transaction\n      const result = await tx.delete(salesTransactions).where(eq(salesTransactions.id, id)).returning({ id: salesTransactions.id });\n\n      if (result.length === 0) {\n        throw new Error('Sales transaction not found');\n      }\n    });\n  }\n\n  async getPurchaseOrder(id: string): Promise<PurchaseOrder | undefined> {\n    const [order] = await this.db.select().from(purchaseOrders).where(eq(purchaseOrders.id, id));\n    return order || undefined;\n  }\n\n  async deletePurchaseOrder(id: string): Promise<void> {\n    await this.db.transaction(async (tx) => {\n      // Delete related order items first\n      await tx.delete(purchaseOrderItems).where(eq(purchaseOrderItems.orderId, id));\n\n      // Delete the purchase order\n      await tx.delete(purchaseOrders).where(eq(purchaseOrders.id, id));\n    });\n  }\n\n  async getPurchaseOrderWithItems(id: string): Promise<(PurchaseOrder & { items: PurchaseOrderItem[], supplier: Supplier, station: Station }) | undefined> {\n    const order = await this.db\n      .select()\n      .from(purchaseOrders)\n      .leftJoin(suppliers, eq(purchaseOrders.supplierId, suppliers.id))\n      .leftJoin(stations, eq(purchaseOrders.stationId, stations.id))\n      .where(eq(purchaseOrders.id, id))\n      .then(results => results[0]);\n\n    if (!order) return undefined;\n\n    // Ensure supplier and station exist - if not, the data is inconsistent\n    if (!order.suppliers || !order.stations) {\n      throw new Error(`Purchase order ${id} has missing supplier or station data`);\n    }\n\n    const items = await this.db\n      .select()\n      .from(purchaseOrderItems)\n      .where(eq(purchaseOrderItems.orderId, id));\n\n    return {\n      ...order.purchase_orders,\n      items,\n      supplier: order.suppliers,\n      station: order.stations\n    };\n  }\n\n  async getPurchaseOrderWithItemsSecure(id: string, userStationId: string, userRole: string): Promise<(PurchaseOrder & { items: PurchaseOrderItem[], supplier: Supplier, station: Station }) | undefined> {\n    const order = await this.db\n      .select()\n      .from(purchaseOrders)\n      .leftJoin(suppliers, eq(purchaseOrders.supplierId, suppliers.id))\n      .leftJoin(stations, eq(purchaseOrders.stationId, stations.id))\n      .where(eq(purchaseOrders.id, id))\n      .then(results => results[0]);\n\n    if (!order) return undefined;\n\n    // Ensure supplier and station exist - if not, the data is inconsistent\n    if (!order.suppliers || !order.stations) {\n      throw new Error(`Purchase order ${id} has missing supplier or station data`);\n    }\n\n    // Security check: verify the order belongs to the user's station (admins can access all)\n    if (userRole !== 'admin' && order.purchase_orders.stationId !== userStationId) {\n      throw new Error('Access denied: Purchase order does not belong to your station');\n    }\n\n    const items = await this.db\n      .select()\n      .from(purchaseOrderItems)\n      .where(eq(purchaseOrderItems.orderId, id));\n\n    return {\n      ...order.purchase_orders,\n      items,\n      supplier: order.suppliers,\n      station: order.stations\n    };\n  }\n\n  async deletePurchaseOrderSecure(id: string, userStationId: string, userRole: string): Promise<void> {\n    await this.db.transaction(async (tx) => {\n      // First verify the order belongs to the user's station (unless admin)\n      if (userRole !== 'admin') {\n        const [order] = await tx.select({ stationId: purchaseOrders.stationId })\n          .from(purchaseOrders)\n          .where(eq(purchaseOrders.id, id));\n\n        if (!order) {\n          throw new Error('Purchase order not found');\n        }\n\n        if (order.stationId !== userStationId) {\n          throw new Error('Access denied: Purchase order does not belong to your station');\n        }\n      }\n\n      // Delete related order items first\n      await tx.delete(purchaseOrderItems).where(eq(purchaseOrderItems.orderId, id));\n\n      // Delete the purchase order\n      const result = await tx.delete(purchaseOrders).where(eq(purchaseOrders.id, id)).returning({ id: purchaseOrders.id });\n\n      if (result.length === 0) {\n        throw new Error('Purchase order not found');\n      }\n    });\n  }\n\n  async getDailyReport(stationId: string, date: Date): Promise<any> {\n    const startOfDay = new Date(date);\n    startOfDay.setHours(0, 0, 0, 0);\n    const endOfDay = new Date(date);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    // Sales by payment method\n    const salesByMethod = await this.db\n      .select({\n        paymentMethod: salesTransactions.paymentMethod,\n        totalAmount: sum(salesTransactions.totalAmount),\n        count: sql<number>`count(*)`,\n        currencyCode: salesTransactions.currencyCode\n      })\n      .from(salesTransactions)\n      .where(\n        and(\n          eq(salesTransactions.stationId, stationId),\n          gte(salesTransactions.transactionDate, startOfDay),\n          lte(salesTransactions.transactionDate, endOfDay)\n        )\n      )\n      .groupBy(salesTransactions.paymentMethod, salesTransactions.currencyCode);\n\n    // Expenses\n    const dailyExpenses = await this.db\n      .select({\n        category: expenses.category,\n        totalAmount: sum(expenses.amount),\n        currencyCode: expenses.currencyCode\n      })\n      .from(expenses)\n      .where(\n        and(\n          eq(expenses.stationId, stationId),\n          gte(expenses.expenseDate, startOfDay),\n          lte(expenses.expenseDate, endOfDay)\n        )\n      )\n      .groupBy(expenses.category, expenses.currencyCode);\n\n    return {\n      date,\n      salesByMethod,\n      expenses: dailyExpenses\n    };\n  }\n\n  async getAgingReport(stationId: string, type: 'receivable' | 'payable'): Promise<any> {\n    try {\n      if (type === 'receivable') {\n        // Get all outstanding receivables\n        const receivables = await this.db\n          .select({\n            id: salesTransactions.id,\n            invoiceNumber: salesTransactions.invoiceNumber,\n            customerName: customers.name,\n            transactionDate: salesTransactions.transactionDate,\n            dueDate: salesTransactions.dueDate,\n            totalAmount: salesTransactions.totalAmount,\n            paidAmount: salesTransactions.paidAmount,\n            outstandingAmount: salesTransactions.outstandingAmount,\n            currencyCode: salesTransactions.currencyCode,\n            daysOverdue: sql<number>`CASE\n              WHEN ${salesTransactions.dueDate} IS NULL THEN 0\n              WHEN ${salesTransactions.dueDate} < CURRENT_DATE THEN EXTRACT(day FROM CURRENT_DATE - ${salesTransactions.dueDate})::integer\n              ELSE 0\n            END`\n          })\n          .from(salesTransactions)\n          .leftJoin(customers, eq(salesTransactions.customerId, customers.id))\n          .where(\n            and(\n              eq(salesTransactions.stationId, stationId),\n              sql`${salesTransactions.outstandingAmount} > 0`\n            )\n          )\n          .orderBy(salesTransactions.dueDate);\n\n        // Group into age buckets\n        const buckets = {\n          current: receivables.filter(r => r.daysOverdue <= 0),\n          days30: receivables.filter(r => r.daysOverdue > 0 && r.daysOverdue <= 30),\n          days60: receivables.filter(r => r.daysOverdue > 30 && r.daysOverdue <= 60),\n          days90: receivables.filter(r => r.daysOverdue > 60 && r.daysOverdue <= 90),\n          over90: receivables.filter(r => r.daysOverdue > 90)\n        };\n\n        // Calculate totals for each bucket\n        const totals = {\n          current: buckets.current.reduce((sum, r) => sum + Number(r.outstandingAmount), 0),\n          days30: buckets.days30.reduce((sum, r) => sum + Number(r.outstandingAmount), 0),\n          days60: buckets.days60.reduce((sum, r) => sum + Number(r.outstandingAmount), 0),\n          days90: buckets.days90.reduce((sum, r) => sum + Number(r.outstandingAmount), 0),\n          over90: buckets.over90.reduce((sum, r) => sum + Number(r.outstandingAmount), 0)\n        };\n\n        return {\n          type: 'receivable',\n          buckets,\n          totals,\n          grandTotal: Object.values(totals).reduce((sum, total) => sum + total, 0),\n          details: receivables\n        };\n\n      } else {\n        // Get all outstanding payables\n        const payables = await this.db\n          .select({\n            id: purchaseOrders.id,\n            orderNumber: purchaseOrders.orderNumber,\n            supplierName: suppliers.name,\n            orderDate: purchaseOrders.orderDate,\n            dueDate: purchaseOrders.dueDate,\n            totalAmount: purchaseOrders.totalAmount,\n            paidAmount: purchaseOrders.paidAmount,\n            outstandingAmount: sql<string>`${purchaseOrders.totalAmount} - ${purchaseOrders.paidAmount}`,\n            currencyCode: purchaseOrders.currencyCode,\n            daysOverdue: sql<number>`CASE\n              WHEN ${purchaseOrders.dueDate} IS NULL THEN 0\n              WHEN ${purchaseOrders.dueDate} < CURRENT_DATE THEN EXTRACT(day FROM CURRENT_DATE - ${purchaseOrders.dueDate})::integer\n              ELSE 0\n            END`\n          })\n          .from(purchaseOrders)\n          .leftJoin(suppliers, eq(purchaseOrders.supplierId, suppliers.id))\n          .where(\n            and(\n              eq(purchaseOrders.stationId, stationId),\n              sql`${purchaseOrders.totalAmount} - ${purchaseOrders.paidAmount} > 0`\n            )\n          )\n          .orderBy(purchaseOrders.dueDate);\n\n        // Group into age buckets\n        const buckets = {\n          current: payables.filter(p => p.daysOverdue <= 0),\n          days30: payables.filter(p => p.daysOverdue > 0 && p.daysOverdue <= 30),\n          days60: payables.filter(p => p.daysOverdue > 30 && p.daysOverdue <= 60),\n          days90: payables.filter(p => p.daysOverdue > 60 && p.daysOverdue <= 90),\n          over90: payables.filter(p => p.daysOverdue > 90)\n        };\n\n        // Calculate totals for each bucket\n        const totals = {\n          current: buckets.current.reduce((sum, p) => sum + Number(p.outstandingAmount), 0),\n          days30: buckets.days30.reduce((sum, p) => sum + Number(p.outstandingAmount), 0),\n          days60: buckets.days60.reduce((sum, p) => sum + Number(p.outstandingAmount), 0),\n          days90: buckets.days90.reduce((sum, p) => sum + Number(p.outstandingAmount), 0),\n          over90: buckets.over90.reduce((sum, p) => sum + Number(p.outstandingAmount), 0)\n        };\n\n        return {\n          type: 'payable',\n          buckets,\n          totals,\n          grandTotal: Object.values(totals).reduce((sum, total) => sum + total, 0),\n          details: payables\n        };\n      }\n    } catch (error) {\n      throw new Error(`Failed to generate aging report: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async getSettings(stationId: string): Promise<Settings | undefined> {\n    const [setting] = await this.db.select().from(settings).where(eq(settings.stationId, stationId));\n    return setting || undefined;\n  }\n\n  async createSettings(insertSettings: InsertSettings): Promise<Settings> {\n    const [setting] = await this.db.insert(settings).values(insertSettings).returning();\n    return setting;\n  }\n\n  async updateSettings(stationId: string, settingsData: Partial<InsertSettings>): Promise<Settings> {\n    const [setting] = await this.db.update(settings)\n      .set({ ...settingsData, updatedAt: new Date() })\n      .where(eq(settings.stationId, stationId))\n      .returning();\n    if (!setting) throw new Error(\"Settings not found\");\n    return setting;\n  }\n\n  async getPumpsByStation(stationId: string): Promise<(Pump & { product?: Product })[]> {\n    const result = await this.db\n      .select({\n        id: pumps.id,\n        stationId: pumps.stationId,\n        name: pumps.name,\n        pumpNumber: pumps.pumpNumber,\n        productId: pumps.productId,\n        isActive: pumps.isActive,\n        createdAt: pumps.createdAt,\n        product: {\n          id: products.id,\n          name: products.name,\n          category: products.category,\n          unit: products.unit,\n          currentPrice: products.currentPrice,\n          density: products.density,\n          hsnCode: products.hsnCode,\n          taxRate: products.taxRate,\n          isActive: products.isActive,\n          createdAt: products.createdAt\n        }\n      })\n      .from(pumps)\n      .leftJoin(products, eq(pumps.productId, products.id))\n      .where(eq(pumps.stationId, stationId));\n\n    return result as (Pump & { product?: Product })[];\n  }\n\n  async createPump(data: any): Promise<Pump> {\n    const [pump] = await this.db.insert(pumps).values(data).returning();\n    return pump;\n  }\n\n  async updatePump(id: string, data: any): Promise<Pump> {\n    const [pump] = await this.db.update(pumps)\n      .set(data)\n      .where(eq(pumps.id, id))\n      .returning();\n    return pump;\n  }\n\n  async deletePump(id: string): Promise<void> {\n    await this.db.delete(pumps).where(eq(pumps.id, id));\n  }\n\n  async getPumpReadingsByStation(stationId: string): Promise<(PumpReading & { pump?: Pump & { product?: Product }; product?: Product })[]> {\n    const result = await this.db\n      .select({\n        id: pumpReadings.id,\n        pumpId: pumpReadings.pumpId,\n        stationId: pumpReadings.stationId,\n        userId: pumpReadings.userId,\n        productId: pumpReadings.productId,\n        readingDate: pumpReadings.readingDate,\n        openingReading: pumpReadings.openingReading,\n        closingReading: pumpReadings.closingReading,\n        totalSale: pumpReadings.totalSale,\n        shiftNumber: pumpReadings.shiftNumber,\n        operatorName: pumpReadings.operatorName,\n        createdAt: pumpReadings.createdAt,\n        pump: {\n          id: pumps.id,\n          name: pumps.name,\n          pumpNumber: pumps.pumpNumber,\n          productId: pumps.productId,\n          isActive: pumps.isActive,\n          stationId: pumps.stationId,\n          createdAt: pumps.createdAt\n        },\n        product: {\n          id: products.id,\n          name: products.name,\n          category: products.category,\n          unit: products.unit,\n          currentPrice: products.currentPrice,\n          density: products.density,\n          hsnCode: products.hsnCode,\n          taxRate: products.taxRate,\n          isActive: products.isActive,\n          createdAt: products.createdAt\n        }\n      })\n      .from(pumpReadings)\n      .leftJoin(pumps, eq(pumpReadings.pumpId, pumps.id))\n      .leftJoin(products, eq(pumpReadings.productId, products.id))\n      .where(eq(pumpReadings.stationId, stationId))\n      .orderBy(desc(pumpReadings.readingDate));\n\n    return result as (PumpReading & { pump?: Pump & { product?: Product }; product?: Product })[];\n  }\n\n  async createPumpReading(data: any): Promise<PumpReading> {\n    const [reading] = await this.db.insert(pumpReadings).values(data).returning();\n    return reading;\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":49274},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, integer, timestamp, boolean, jsonb, pgEnum } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const userRoleEnum = pgEnum('user_role', ['admin', 'manager', 'cashier']);\nexport const paymentMethodEnum = pgEnum('payment_method', ['cash', 'card', 'credit', 'fleet']);\nexport const transactionTypeEnum = pgEnum('transaction_type', ['sale', 'purchase', 'expense', 'payment']);\nexport const tankStatusEnum = pgEnum('tank_status', ['normal', 'low', 'critical', 'maintenance']);\nexport const customerTypeEnum = pgEnum('customer_type', ['walk-in', 'credit', 'fleet']);\nexport const currencyCodeEnum = pgEnum('currency_code', ['PKR', 'INR', 'USD', 'EUR', 'GBP', 'AED', 'SAR', 'CNY']);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  fullName: text(\"full_name\").notNull(),\n  role: userRoleEnum(\"role\").notNull().default('cashier'),\n  stationId: varchar(\"station_id\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Stations table\nexport const stations = pgTable(\"stations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  address: text(\"address\"),\n  gstNumber: text(\"gst_number\"),\n  licenseNumber: text(\"license_number\"),\n  contactPhone: text(\"contact_phone\"),\n  contactEmail: text(\"contact_email\"),\n  defaultCurrency: currencyCodeEnum(\"default_currency\").notNull().default('PKR'),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Products table\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  category: text(\"category\").notNull(), // fuel, lubricant, additive\n  unit: text(\"unit\").notNull().default('litre'),\n  currentPrice: decimal(\"current_price\", { precision: 10, scale: 2 }).notNull(),\n  density: decimal(\"density\", { precision: 5, scale: 3 }),\n  hsnCode: text(\"hsn_code\"),\n  taxRate: decimal(\"tax_rate\", { precision: 5, scale: 2 }).default('0'),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Tanks table\nexport const tanks = pgTable(\"tanks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  stationId: varchar(\"station_id\").notNull(),\n  name: text(\"name\").notNull(),\n  productId: varchar(\"product_id\").notNull(),\n  capacity: decimal(\"capacity\", { precision: 10, scale: 2 }).notNull(),\n  currentStock: decimal(\"current_stock\", { precision: 10, scale: 2 }).default('0'),\n  minimumLevel: decimal(\"minimum_level\", { precision: 10, scale: 2 }).default('500'),\n  status: tankStatusEnum(\"status\").default('normal'),\n  lastRefillDate: timestamp(\"last_refill_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Customers table\nexport const customers = pgTable(\"customers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  type: customerTypeEnum(\"type\").notNull().default('walk-in'),\n  contactPhone: text(\"contact_phone\"),\n  contactEmail: text(\"contact_email\"),\n  address: text(\"address\"),\n  gstNumber: text(\"gst_number\"),\n  creditLimit: decimal(\"credit_limit\", { precision: 10, scale: 2 }).default('0'),\n  outstandingAmount: decimal(\"outstanding_amount\", { precision: 10, scale: 2 }).default('0'),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Suppliers table\nexport const suppliers = pgTable(\"suppliers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  contactPerson: text(\"contact_person\"),\n  contactPhone: text(\"contact_phone\"),\n  contactEmail: text(\"contact_email\"),\n  address: text(\"address\"),\n  gstNumber: text(\"gst_number\"),\n  paymentTerms: text(\"payment_terms\"),\n  outstandingAmount: decimal(\"outstanding_amount\", { precision: 10, scale: 2 }).default('0'),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Sales transactions table\nexport const salesTransactions = pgTable(\"sales_transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  invoiceNumber: text(\"invoice_number\").notNull().unique(),\n  stationId: varchar(\"station_id\").notNull(),\n  customerId: varchar(\"customer_id\").notNull(),\n  userId: varchar(\"user_id\").notNull(),\n  transactionDate: timestamp(\"transaction_date\").defaultNow(),\n  dueDate: timestamp(\"due_date\"),\n  paymentMethod: paymentMethodEnum(\"payment_method\").notNull(),\n  currencyCode: currencyCodeEnum(\"currency_code\").notNull().default('PKR'),\n  subtotal: decimal(\"subtotal\", { precision: 10, scale: 2 }).notNull(),\n  taxAmount: decimal(\"tax_amount\", { precision: 10, scale: 2 }).default('0'),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  paidAmount: decimal(\"paid_amount\", { precision: 10, scale: 2 }).default('0'),\n  outstandingAmount: decimal(\"outstanding_amount\", { precision: 10, scale: 2 }).default('0'),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Sales transaction items table\nexport const salesTransactionItems = pgTable(\"sales_transaction_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  transactionId: varchar(\"transaction_id\").notNull(),\n  productId: varchar(\"product_id\").notNull(),\n  tankId: varchar(\"tank_id\"),\n  quantity: decimal(\"quantity\", { precision: 10, scale: 3 }).notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }).notNull(),\n  totalPrice: decimal(\"total_price\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Purchase orders table\nexport const purchaseOrders = pgTable(\"purchase_orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderNumber: text(\"order_number\").notNull().unique(),\n  stationId: varchar(\"station_id\").notNull(),\n  supplierId: varchar(\"supplier_id\").notNull(),\n  userId: varchar(\"user_id\").notNull(),\n  orderDate: timestamp(\"order_date\").defaultNow(),\n  dueDate: timestamp(\"due_date\"),\n  expectedDeliveryDate: timestamp(\"expected_delivery_date\"),\n  actualDeliveryDate: timestamp(\"actual_delivery_date\"),\n  status: text(\"status\").default('pending'), // pending, delivered, cancelled\n  currencyCode: currencyCodeEnum(\"currency_code\").notNull().default('PKR'),\n  subtotal: decimal(\"subtotal\", { precision: 10, scale: 2 }).notNull(),\n  taxAmount: decimal(\"tax_amount\", { precision: 10, scale: 2 }).default('0'),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  paidAmount: decimal(\"paid_amount\", { precision: 10, scale: 2 }).default('0'),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Purchase order items table\nexport const purchaseOrderItems = pgTable(\"purchase_order_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").notNull(),\n  productId: varchar(\"product_id\").notNull(),\n  tankId: varchar(\"tank_id\"),\n  quantity: decimal(\"quantity\", { precision: 10, scale: 3 }).notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }).notNull(),\n  totalPrice: decimal(\"total_price\", { precision: 10, scale: 2 }).notNull(),\n  receivedQuantity: decimal(\"received_quantity\", { precision: 10, scale: 3 }).default('0'),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Expenses table\nexport const expenses = pgTable(\"expenses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  stationId: varchar(\"station_id\").notNull(),\n  userId: varchar(\"user_id\").notNull(),\n  category: text(\"category\").notNull(), // salary, utilities, maintenance, insurance, etc.\n  description: text(\"description\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  currencyCode: currencyCodeEnum(\"currency_code\").notNull().default('PKR'),\n  expenseDate: timestamp(\"expense_date\").defaultNow(),\n  receiptNumber: text(\"receipt_number\"),\n  paymentMethod: paymentMethodEnum(\"payment_method\").notNull(),\n  vendorName: text(\"vendor_name\"),\n  isRecurring: boolean(\"is_recurring\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Payments table\nexport const payments = pgTable(\"payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  stationId: varchar(\"station_id\").notNull(),\n  userId: varchar(\"user_id\").notNull(),\n  customerId: varchar(\"customer_id\"),\n  supplierId: varchar(\"supplier_id\"),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  currencyCode: currencyCodeEnum(\"currency_code\").notNull().default('PKR'),\n  paymentDate: timestamp(\"payment_date\").defaultNow(),\n  paymentMethod: paymentMethodEnum(\"payment_method\").notNull(),\n  referenceNumber: text(\"reference_number\"),\n  notes: text(\"notes\"),\n  type: text(\"type\").notNull(), // receivable, payable\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Stock movements table\nexport const stockMovements = pgTable(\"stock_movements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tankId: varchar(\"tank_id\").notNull(),\n  stationId: varchar(\"station_id\").notNull(),\n  userId: varchar(\"user_id\").notNull(),\n  movementType: text(\"movement_type\").notNull(), // in, out, adjustment\n  quantity: decimal(\"quantity\", { precision: 10, scale: 3 }).notNull(),\n  previousStock: decimal(\"previous_stock\", { precision: 10, scale: 3 }).notNull(),\n  newStock: decimal(\"new_stock\", { precision: 10, scale: 3 }).notNull(),\n  referenceId: varchar(\"reference_id\"), // Links to sales_transactions, purchase_orders, etc.\n  referenceType: text(\"reference_type\"), // sale, purchase, adjustment\n  notes: text(\"notes\"),\n  movementDate: timestamp(\"movement_date\").defaultNow(),\n});\n\n// Price history table\nexport const priceHistory = pgTable(\"price_history\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\").notNull(),\n  stationId: varchar(\"station_id\").notNull(),\n  oldPrice: decimal(\"old_price\", { precision: 10, scale: 2 }).notNull(),\n  newPrice: decimal(\"new_price\", { precision: 10, scale: 2 }).notNull(),\n  effectiveDate: timestamp(\"effective_date\").defaultNow(),\n  userId: varchar(\"user_id\").notNull(),\n  reason: text(\"reason\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Settings table\nexport const settings = pgTable(\"settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  stationId: varchar(\"station_id\").notNull().unique(),\n  taxEnabled: boolean(\"tax_enabled\").default(false),\n  taxRate: decimal(\"tax_rate\", { precision: 5, scale: 2 }).default('0'),\n  currencyCode: currencyCodeEnum(\"currency_code\").notNull().default('PKR'),\n  companyName: text(\"company_name\"),\n  companyAddress: text(\"company_address\"),\n  companyPhone: text(\"company_phone\"),\n  companyEmail: text(\"company_email\"),\n  receiptFooter: text(\"receipt_footer\"),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Pump management tables\nexport const pumps = pgTable(\"pumps\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  stationId: varchar(\"station_id\").notNull(),\n  name: text(\"name\").notNull(),\n  pumpNumber: text(\"pump_number\").notNull(),\n  productId: varchar(\"product_id\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const pumpReadings = pgTable(\"pump_readings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  pumpId: varchar(\"pump_id\").notNull(),\n  stationId: varchar(\"station_id\").notNull(),\n  userId: varchar(\"user_id\").notNull(),\n  productId: varchar(\"product_id\").notNull(),\n  readingDate: timestamp(\"reading_date\").defaultNow(),\n  openingReading: decimal(\"opening_reading\", { precision: 10, scale: 3 }).notNull(),\n  closingReading: decimal(\"closing_reading\", { precision: 10, scale: 3 }).notNull(),\n  totalSale: decimal(\"total_sale\", { precision: 10, scale: 3 }).notNull(),\n  shiftNumber: text(\"shift_number\").notNull(),\n  operatorName: text(\"operator_name\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  station: one(stations, { fields: [users.stationId], references: [stations.id] }),\n  salesTransactions: many(salesTransactions),\n  purchaseOrders: many(purchaseOrders),\n  expenses: many(expenses),\n  payments: many(payments),\n  stockMovements: many(stockMovements),\n  priceHistory: many(priceHistory),\n}));\n\nexport const stationsRelations = relations(stations, ({ one, many }) => ({\n  users: many(users),\n  tanks: many(tanks),\n  salesTransactions: many(salesTransactions),\n  purchaseOrders: many(purchaseOrders),\n  expenses: many(expenses),\n  payments: many(payments),\n  stockMovements: many(stockMovements),\n  priceHistory: many(priceHistory),\n  settings: one(settings, { fields: [stations.id], references: [settings.stationId] }),\n  pumps: many(pumps),\n  pumpReadings: many(pumpReadings),\n}));\n\nexport const productsRelations = relations(products, ({ many }) => ({\n  tanks: many(tanks),\n  salesTransactionItems: many(salesTransactionItems),\n  purchaseOrderItems: many(purchaseOrderItems),\n  priceHistory: many(priceHistory),\n}));\n\nexport const tanksRelations = relations(tanks, ({ one, many }) => ({\n  station: one(stations, { fields: [tanks.stationId], references: [stations.id] }),\n  product: one(products, { fields: [tanks.productId], references: [products.id] }),\n  salesTransactionItems: many(salesTransactionItems),\n  purchaseOrderItems: many(purchaseOrderItems),\n  stockMovements: many(stockMovements),\n}));\n\nexport const customersRelations = relations(customers, ({ many }) => ({\n  salesTransactions: many(salesTransactions),\n  payments: many(payments),\n}));\n\nexport const suppliersRelations = relations(suppliers, ({ many }) => ({\n  purchaseOrders: many(purchaseOrders),\n  payments: many(payments),\n}));\n\nexport const salesTransactionsRelations = relations(salesTransactions, ({ one, many }) => ({\n  station: one(stations, { fields: [salesTransactions.stationId], references: [stations.id] }),\n  customer: one(customers, { fields: [salesTransactions.customerId], references: [customers.id] }),\n  user: one(users, { fields: [salesTransactions.userId], references: [users.id] }),\n  items: many(salesTransactionItems),\n}));\n\nexport const salesTransactionItemsRelations = relations(salesTransactionItems, ({ one }) => ({\n  transaction: one(salesTransactions, { fields: [salesTransactionItems.transactionId], references: [salesTransactions.id] }),\n  product: one(products, { fields: [salesTransactionItems.productId], references: [products.id] }),\n  tank: one(tanks, { fields: [salesTransactionItems.tankId], references: [tanks.id] }),\n}));\n\nexport const purchaseOrdersRelations = relations(purchaseOrders, ({ one, many }) => ({\n  station: one(stations, { fields: [purchaseOrders.stationId], references: [stations.id] }),\n  supplier: one(suppliers, { fields: [purchaseOrders.supplierId], references: [suppliers.id] }),\n  user: one(users, { fields: [purchaseOrders.userId], references: [users.id] }),\n  items: many(purchaseOrderItems),\n}));\n\nexport const purchaseOrderItemsRelations = relations(purchaseOrderItems, ({ one }) => ({\n  order: one(purchaseOrders, { fields: [purchaseOrderItems.orderId], references: [purchaseOrders.id] }),\n  product: one(products, { fields: [purchaseOrderItems.productId], references: [products.id] }),\n  tank: one(tanks, { fields: [purchaseOrderItems.tankId], references: [tanks.id] }),\n}));\n\nexport const expensesRelations = relations(expenses, ({ one }) => ({\n  station: one(stations, { fields: [expenses.stationId], references: [stations.id] }),\n  user: one(users, { fields: [expenses.userId], references: [users.id] }),\n}));\n\nexport const paymentsRelations = relations(payments, ({ one }) => ({\n  station: one(stations, { fields: [payments.stationId], references: [stations.id] }),\n  user: one(users, { fields: [payments.userId], references: [users.id] }),\n  customer: one(customers, { fields: [payments.customerId], references: [customers.id] }),\n  supplier: one(suppliers, { fields: [payments.supplierId], references: [suppliers.id] }),\n}));\n\nexport const stockMovementsRelations = relations(stockMovements, ({ one }) => ({\n  tank: one(tanks, { fields: [stockMovements.tankId], references: [tanks.id] }),\n  station: one(stations, { fields: [stockMovements.stationId], references: [stations.id] }),\n  user: one(users, { fields: [stockMovements.userId], references: [users.id] }),\n}));\n\nexport const priceHistoryRelations = relations(priceHistory, ({ one }) => ({\n  product: one(products, { fields: [priceHistory.productId], references: [products.id] }),\n  station: one(stations, { fields: [priceHistory.stationId], references: [stations.id] }),\n  user: one(users, { fields: [priceHistory.userId], references: [users.id] }),\n}));\n\nexport const settingsRelations = relations(settings, ({ one }) => ({\n  station: one(stations, { fields: [settings.stationId], references: [stations.id] }),\n}));\n\nexport const pumpsRelations = relations(pumps, ({ one, many }) => ({\n  station: one(stations, { fields: [pumps.stationId], references: [stations.id] }),\n  product: one(products, { fields: [pumps.productId], references: [products.id] }),\n  pumpReadings: many(pumpReadings),\n}));\n\nexport const pumpReadingsRelations = relations(pumpReadings, ({ one }) => ({\n  pump: one(pumps, { fields: [pumpReadings.pumpId], references: [pumps.id] }),\n  station: one(stations, { fields: [pumpReadings.stationId], references: [stations.id] }),\n  user: one(users, { fields: [pumpReadings.userId], references: [users.id] }),\n  product: one(products, { fields: [pumpReadings.productId], references: [products.id] }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertStationSchema = createInsertSchema(stations).omit({ id: true, createdAt: true });\nexport const insertProductSchema = createInsertSchema(products).omit({ id: true, createdAt: true, taxRate: true });\nexport const insertTankSchema = createInsertSchema(tanks).omit({ id: true, createdAt: true });\nexport const insertCustomerSchema = createInsertSchema(customers).omit({ id: true, createdAt: true });\nexport const insertSupplierSchema = createInsertSchema(suppliers).omit({ id: true, createdAt: true });\nexport const insertSalesTransactionSchema = createInsertSchema(salesTransactions).omit({ id: true, createdAt: true });\nexport const insertSalesTransactionItemSchema = createInsertSchema(salesTransactionItems).omit({ id: true, createdAt: true });\nexport const insertPurchaseOrderSchema = createInsertSchema(purchaseOrders).omit({ id: true, createdAt: true });\nexport const insertPurchaseOrderItemSchema = createInsertSchema(purchaseOrderItems).omit({ id: true, createdAt: true });\nexport const insertExpenseSchema = createInsertSchema(expenses).omit({ id: true, createdAt: true });\nexport const insertPaymentSchema = createInsertSchema(payments).omit({ id: true, createdAt: true });\nexport const insertStockMovementSchema = createInsertSchema(stockMovements);\nexport const insertPriceHistorySchema = createInsertSchema(priceHistory).omit({ id: true, createdAt: true });\nexport const insertSettingsSchema = createInsertSchema(settings).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertPumpSchema = createInsertSchema(pumps).omit({ id: true, createdAt: true });\nexport const insertPumpReadingSchema = createInsertSchema(pumpReadings).omit({ id: true, createdAt: true });\n\n// Type exports\nexport type User = typeof users.$inferSelect;\nexport type Station = typeof stations.$inferSelect;\nexport type Product = typeof products.$inferSelect;\nexport type Tank = typeof tanks.$inferSelect;\nexport type Customer = typeof customers.$inferSelect;\nexport type Supplier = typeof suppliers.$inferSelect;\nexport type SalesTransaction = typeof salesTransactions.$inferSelect;\nexport type SalesTransactionItem = typeof salesTransactionItems.$inferSelect;\nexport type PurchaseOrder = typeof purchaseOrders.$inferSelect;\nexport type PurchaseOrderItem = typeof purchaseOrderItems.$inferSelect;\nexport type Expense = typeof expenses.$inferSelect;\nexport type Payment = typeof payments.$inferSelect;\nexport type StockMovement = typeof stockMovements.$inferSelect;\nexport type PriceHistory = typeof priceHistory.$inferSelect;\nexport type Pump = typeof pumps.$inferSelect;\nexport type PumpReading = typeof pumpReadings.$inferSelect;\nexport type Settings = typeof settings.$inferSelect;","size_bytes":21011},"client/src/App.tsx":{"content":"\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { useEffect } from \"react\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/useAuth\";\nimport { CurrencyProvider } from \"@/contexts/CurrencyContext\";\nimport { StationProvider } from \"./contexts/StationContext\";\nimport AuthGuard from \"@/components/layout/AuthGuard\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport PointOfSale from \"@/pages/PointOfSale\";\nimport CustomerManagement from \"@/pages/CustomerManagement\";\nimport StockManagement from \"@/pages/StockManagement\";\nimport FinancialReports from \"@/pages/FinancialReports\";\nimport SalesHistory from \"@/pages/SalesHistory\";\nimport PurchaseOrders from \"@/pages/PurchaseOrders\";\nimport AccountsReceivable from \"@/pages/AccountsReceivable\";\nimport AccountsPayable from \"@/pages/AccountsPayable\";\nimport CashReconciliation from \"@/pages/CashReconciliation\";\nimport ExpenseManagement from \"@/pages/ExpenseManagement\";\nimport SupplierManagement from \"@/pages/SupplierManagement\";\nimport PriceManagement from \"@/pages/PriceManagement\";\nimport InvoiceReceipt from \"@/pages/InvoiceReceipt\";\nimport TankMonitoring from \"@/pages/TankMonitoring\";\nimport DailyReports from \"@/pages/DailyReports\";\nimport AgingReports from \"@/pages/AgingReports\";\nimport Settings from \"@/pages/Settings\";\nimport AdminPanel from \"@/pages/AdminPanel\";\nimport NotFound from \"@/pages/not-found\";\nimport PumpManagement from \"@/pages/PumpManagement\";\nimport PurchaseInvoice from \"@/pages/PurchaseInvoice\";\nimport PaymentHistory from \"@/pages/PaymentHistory\";\nimport ApprovalPending from \"@/pages/ApprovalPending\";\nimport LoginPage from \"@/pages/LoginPage\";\nimport SignupPage from \"@/pages/SignupPage\";\nimport PrintView from \"@/pages/PrintView\";\n\n// Global theme initialization\nfunction ThemeBootstrap() {\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme');\n    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n\n    if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, []);\n\n  return null;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/pos\" component={PointOfSale} />\n      <Route path=\"/sales-history\" component={SalesHistory} />\n      <Route path=\"/customers\" component={CustomerManagement} />\n      <Route path=\"/stock\" component={StockManagement} />\n      <Route path=\"/purchase-orders\" component={PurchaseOrders} />\n      <Route path=\"/accounts-receivable\" component={AccountsReceivable} />\n      <Route path=\"/accounts-payable\" component={AccountsPayable} />\n      <Route path=\"/cash-reconciliation\" component={CashReconciliation} />\n      <Route path=\"/expenses\" component={ExpenseManagement} />\n      <Route path=\"/suppliers\" component={SupplierManagement} />\n      <Route path=\"/pricing\" component={PriceManagement} />\n      <Route path=\"/financial-reports\" component={FinancialReports} />\n      <Route path=\"/invoice/:id\" component={InvoiceReceipt} />\n      <Route path=\"/purchase-invoice/:id\" component={PurchaseInvoice} />\n      <Route path=\"/payment-history/:id/:type\" component={PaymentHistory} />\n      <Route path=\"/tanks\" component={TankMonitoring} />\n      <Route path=\"/pumps\" component={PumpManagement} />\n      <Route path=\"/daily-reports\" component={DailyReports} />\n      <Route path=\"/aging-reports\" component={AgingReports} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route path=\"/admin\" component={AdminPanel} />\n      <Route path=\"/approval-pending\" component={ApprovalPending} />\n      <Route path=\"/print\" component={PrintView} />\n      <Route path=\"/login\" component={LoginPage} />\n      <Route path=\"/signup\" component={SignupPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <StationProvider>\n          <CurrencyProvider>\n            <TooltipProvider>\n              <ThemeBootstrap />\n              <Toaster />\n              <AuthGuard>\n                <Router />\n              </AuthGuard>\n            </TooltipProvider>\n          </CurrencyProvider>\n        </StationProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4566},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 96%);\n  --foreground: hsl(215, 27%, 17%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(215, 27%, 17%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(215, 27%, 17%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(210, 40%, 94%);\n  --secondary-foreground: hsl(215, 27%, 17%);\n  --muted: hsl(210, 40%, 94%);\n  --muted-foreground: hsl(215, 25%, 45%);\n  --accent: hsl(210, 40%, 94%);\n  --accent-foreground: hsl(215, 27%, 17%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(221, 83%, 53%);\n  --chart-1: hsl(221, 83%, 53%);\n  --chart-2: hsl(142, 69%, 58%);\n  --chart-3: hsl(45, 93%, 58%);\n  --chart-4: hsl(0, 84%, 60%);\n  --chart-5: hsl(270, 95%, 75%);\n  --radius: 0.75rem;\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: 'Inter', system-ui, sans-serif;\n  --font-mono: 'Inter', system-ui, sans-serif;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(203.7736, 87.6033%, 52.5490%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: 'Inter', system-ui, sans-serif;\n  --font-mono: 'Inter', system-ui, sans-serif;\n  --radius: 0.75rem;\n}\n\n/* Print styles for invoices */\n@media print {\n  body {\n    background: #fff !important;\n    color: #000 !important;\n    color-scheme: light !important;\n  }\n\n  html.dark body {\n    background: #fff !important;\n    color: #000 !important;\n  }\n\n  /* Hide everything by default when printing */\n  body * {\n    visibility: hidden;\n  }\n\n  /* Only show the invoice print area */\n  #invoice-print,\n  #invoice-print * {\n    visibility: visible;\n  }\n\n  /* Position the invoice print area to fill the page */\n  #invoice-print {\n    position: absolute;\n    left: 0;\n    top: 0;\n    margin: 0;\n    padding: 20px;\n    width: 100%;\n    background: #fff !important;\n  }\n\n  /* Ensure all text is black in print */\n  #invoice-print * {\n    color: #000 !important;\n    background: transparent !important;\n  }\n\n  /* Special handling for borders and separators */\n  #invoice-print .border {\n    border-color: #000 !important;\n  }\n\n  #invoice-print .bg-muted\\/50 {\n    background-color: #f5f5f5 !important;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.fade-in {\n  animation: fadeIn 0.3s ease-in;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* Responsive utilities */\n.text-wrap {\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n}\n\n.scrollable-container {\n  overflow-x: auto;\n  -webkit-overflow-scrolling: touch;\n}\n\n/* Mobile responsive tables */\n@media (max-width: 768px) {\n  .responsive-table {\n    display: block;\n    overflow-x: auto;\n    white-space: nowrap;\n  }\n\n  .responsive-card {\n    padding: 0.75rem;\n  }\n\n  .responsive-grid {\n    grid-template-columns: 1fr;\n    gap: 1rem;\n  }\n\n  .mobile-stack {\n    flex-direction: column;\n    gap: 0.5rem;\n  }\n\n  .mobile-text-sm {\n    font-size: 0.875rem;\n  }\n\n  .mobile-hidden {\n    display: none;\n  }\n}\n\n.sidebar-transition {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n/* Custom scrollbar */\n.overflow-y-auto::-webkit-scrollbar {\n  width: 1px;\n}\n\n.overflow-y-auto::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n.overflow-y-auto::-webkit-scrollbar-thumb {\n  background: #888;\n  border-radius: 4px;\n}\n\n.overflow-y-auto::-webkit-scrollbar-thumb:hover {\n  background: #555;\n}\n\n/* Responsive utilities */\n@media (max-width: 768px) {\n  .container {\n    padding-left: 1rem;\n    padding-right: 1rem;\n  }\n}\n\n/* Mobile layout fixes */\n@media (max-width: 1024px) {\n  body, html {\n    overflow-x: hidden;\n    width: 100%;\n  }\n\n  /* Ensure main content area is properly positioned */\n  .main-content {\n    margin-left: 0 !important;\n    width: 100%;\n  }\n\n  /* Mobile sidebar should be off-screen by default */\n  .mobile-sidebar {\n    transform: translateX(-100%);\n    transition: transform 0.3s ease-in-out;\n  }\n\n  .mobile-sidebar.open {\n    transform: translateX(0);\n  }\n}\n\n/* Small laptop screens (1280px and below) */\n@media (max-width: 1280px) {\n  .container {\n    max-width: 100%;\n    padding-left: 1rem;\n    padding-right: 1rem;\n  }\n\n  /* Make grid layouts more responsive */\n  .grid-responsive {\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  }\n\n  /* Adjust font sizes for smaller screens */\n  .responsive-heading {\n    font-size: clamp(1.5rem, 3vw, 2rem);\n  }\n\n  /* Table responsiveness */\n  .table-responsive {\n    font-size: 0.875rem;\n  }\n\n  .table-responsive th,\n  .table-responsive td {\n    padding: 0.5rem;\n  }\n\n  /* Card adjustments */\n  .card-responsive {\n    padding: 1rem;\n  }\n\n  /* Button group stacking */\n  .button-group-responsive {\n    flex-direction: column;\n    gap: 0.5rem;\n  }\n\n  .button-group-responsive > * {\n    width: 100%;\n  }\n\n  /* Form layouts */\n  .form-grid-responsive {\n    grid-template-columns: 1fr;\n  }\n\n  /* Stats cards adjustment */\n  .stats-grid {\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  }\n}\n\n/* Extra small laptops and tablets */\n@media (max-width: 1024px) {\n  .grid-cols-4 {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  .grid-cols-3 {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  .lg\\\\:grid-cols-4 {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  .lg\\\\:grid-cols-3 {\n    grid-template-columns: repeat(2, 1fr);\n  }\n}\n\n/* Responsive text utilities */\n.responsive-text {\n  font-size: clamp(0.875rem, 2.5vw, 1.125rem);\n}\n\n.responsive-title {\n  font-size: clamp(1.5rem, 4vw, 2.25rem);\n}\n\n.responsive-value {\n  font-size: clamp(1.25rem, 3vw, 1.875rem);\n}\n\n/* Prevent text overflow in cards */\n.card-content {\n  overflow: hidden;\n}\n\n.card-content * {\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n}\n\n/* Desktop layout improvements */\n@media (min-width: 1024px) {\n  .sidebar-transition {\n    transform: translateX(0);\n    position: fixed;\n    left: 0;\n    top: 0;\n    height: 100vh;\n    z-index: 30;\n  }\n\n  /* Ensure main content has proper spacing */\n  .main-content {\n    transition: margin-left 0.3s ease-in-out;\n  }\n}\n\n/* Custom Scrollbars - Ultra thin and subtle */\n::-webkit-scrollbar {\n  width: 1px;\n  height: 1px;\n}\n\n::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n::-webkit-scrollbar-thumb {\n  background: rgba(0, 0, 0, 0.1);\n  border-radius: 1px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: rgba(0, 0, 0, 0.3);\n}\n\n.dark ::-webkit-scrollbar-thumb {\n  background: rgba(255, 255, 255, 0.1);\n}\n\n.dark ::-webkit-scrollbar-thumb:hover {\n  background: rgba(255, 255, 255, 0.3);\n}\n\n/* Firefox scrollbar */\n* {\n  scrollbar-width: thin;\n  scrollbar-color: rgba(0, 0, 0, 0.1) transparent;\n}\n\n.dark * {\n  scrollbar-color: rgba(255, 255, 255, 0.1) transparent;\n}\n\n/* Show scrollbar on hover for better UX */\n.scrollable-container {\n  overflow: auto;\n}\n\n.scrollable-container::-webkit-scrollbar-thumb {\n  background: transparent;\n}\n\n.scrollable-container:hover::-webkit-scrollbar-thumb {\n  background: rgba(0, 0, 0, 0.2);\n}\n\n.dark .scrollable-container:hover::-webkit-scrollbar-thumb {\n  background: rgba(255, 255, 255, 0.2);\n}\n\n@media print {\n  * {\n    -webkit-print-color-adjust: exact !important;\n    color-adjust: exact !important;\n    print-color-adjust: exact !important;\n  }\n\n  body {\n    background: white !important;\n    color: black !important;\n    font-size: 12pt !important;\n    line-height: 1.3 !important;\n  }\n\n  /* Make sure content fits on page */\n  .container {\n    max-width: none !important;\n    padding: 0.5in !important;\n    margin: 0 !important;\n  }\n\n  /* Invoice specific styles */\n  .invoice-content {\n    background: white !important;\n    color: black !important;\n  }\n\n  /* Ensure tables print correctly */\n  table {\n    page-break-inside: avoid;\n    border-collapse: collapse !important;\n  }\n\n  tr {\n    page-break-inside: avoid;\n  }\n\n  /* Headers */\n  h1, h2, h3 {\n    color: black !important;\n    page-break-after: avoid;\n  }\n\n  /* Hide all buttons */\n  button {\n    display: none !important;\n  }\n\n  /* Links should appear as normal text */\n  a {\n    text-decoration: none !important;\n    color: inherit !important;\n  }\n\n  /* Background colors for tables */\n  .bg-muted {\n    background-color: #f9f9f9 !important;\n    -webkit-print-color-adjust: exact !important;\n  }\n\n  /* Borders */\n  .border {\n    border: 1px solid #ddd !important;\n  }\n\n  .border-b {\n    border-bottom: 1px solid #ddd !important;\n  }\n}","size_bytes":10128},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/contexts/CurrencyContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { CURRENCY_CONFIG, type CurrencyCode, type CurrencyConfig } from '@/lib/currency';\nimport { useAuth } from '@/hooks/useAuth';\n\ninterface CurrencyContextType {\n  currency: CurrencyCode;\n  currencyConfig: CurrencyConfig;\n  formatCurrency: (amount: number | string, options?: Intl.NumberFormatOptions) => string;\n  formatCurrencyCompact: (amount: number | string) => string;\n  setCurrency: (currency: CurrencyCode) => void;\n  isLoading: boolean;\n}\n\nconst CurrencyContext = createContext<CurrencyContextType | undefined>(undefined);\n\nexport function CurrencyProvider({ children }: { children: ReactNode }) {\n  const [currency, setCurrencyState] = useState<CurrencyCode>(() => {\n    // Initialize from localStorage if available\n    const savedCurrency = typeof window !== 'undefined' ? localStorage.getItem('selectedCurrency') : null;\n    if (savedCurrency && savedCurrency in CURRENCY_CONFIG) {\n      return savedCurrency as CurrencyCode;\n    }\n    return 'PKR'; // Default to Pakistani Rupee\n  });\n  const [isLoading, setIsLoading] = useState(false);\n\n  const currencyConfig = CURRENCY_CONFIG[currency];\n\n  const formatCurrency = (\n    amount: number | string, \n    options: Intl.NumberFormatOptions = {}\n  ): string => {\n    const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n    \n    if (isNaN(numAmount)) return `${currencyConfig.symbol}0`;\n    \n    const formatter = new Intl.NumberFormat(currencyConfig.locale, {\n      style: 'currency',\n      currency: currencyConfig.code,\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n      ...options\n    });\n\n    return formatter.format(numAmount);\n  };\n\n  const formatCurrencyCompact = (amount: number | string): string => {\n    const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n    \n    if (isNaN(numAmount)) return `${currencyConfig.symbol}0`;\n\n    // For Pakistani Rupee, show in Lakhs (1L = 100,000)\n    if (currency === 'PKR' && numAmount >= 100000) {\n      return `${currencyConfig.symbol}${(numAmount / 100000).toFixed(1)}L`;\n    }\n    \n    // For other currencies, use compact notation\n    const formatter = new Intl.NumberFormat(currencyConfig.locale, {\n      style: 'currency',\n      currency: currencyConfig.code,\n      notation: 'compact',\n      compactDisplay: 'short'\n    });\n\n    return formatter.format(numAmount);\n  };\n\n  const setCurrency = (newCurrency: CurrencyCode) => {\n    setCurrencyState(newCurrency);\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('selectedCurrency', newCurrency);\n    }\n    // Note: In a real app, you'd want to update the station's default currency via API\n  };\n\n  return (\n    <CurrencyContext.Provider\n      value={{\n        currency,\n        currencyConfig,\n        formatCurrency,\n        formatCurrencyCompact,\n        setCurrency,\n        isLoading\n      }}\n    >\n      {children}\n    </CurrencyContext.Provider>\n  );\n}\n\nexport function useCurrency(): CurrencyContextType {\n  const context = useContext(CurrencyContext);\n  if (context === undefined) {\n    throw new Error('useCurrency must be used within a CurrencyProvider');\n  }\n  return context;\n}","size_bytes":3272},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport { apiRequest } from \"@/lib/api\";\nimport { signInWithGoogle, handleGoogleRedirect, auth, isFirebaseConfigured } from \"@/lib/firebase\";\nimport { onAuthStateChanged, getIdToken } from \"firebase/auth\";\n\ninterface User {\n  id: string;\n  username: string;\n  fullName: string;\n  role: string;\n  stationId?: string;\n  email?: string;\n  photoURL?: string | null;\n  isGoogleAuth?: boolean;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  userStatus: 'pending' | 'verified' | null;\n  isAuthenticated: boolean;\n  login: (username: string, password: string) => Promise<boolean>;\n  loginWithGoogle: () => Promise<void>;\n  logout: () => void;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [userStatus, setUserStatus] = useState<'pending' | 'verified' | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for stored token and validate with server\n    const token = localStorage.getItem(\"fuelflow_token\");\n    \n    if (token) {\n      // Validate token with server\n      apiRequest(\"GET\", \"/api/auth/me\")\n        .then(response => response.json())\n        .then(data => {\n          const userData = data.user || data;\n          setUser(userData);\n          setUserStatus(userData.role === 'admin' || userData.isActive ? 'verified' : 'pending');\n          setIsLoading(false);\n        })\n        .catch(() => {\n          // Token is invalid, clear it\n          localStorage.removeItem(\"fuelflow_token\");\n          localStorage.removeItem(\"fuelflow_user\");\n          setIsLoading(false);\n        });\n    } else {\n      setIsLoading(false);\n    }\n\n    // Set up periodic status check for non-admin users\n    let statusInterval: NodeJS.Timeout;\n    if (token) {\n      statusInterval = setInterval(async () => {\n        try {\n          const response = await apiRequest(\"GET\", \"/api/auth/me\");\n          const data = await response.json();\n          const userData = data.user || data;\n          \n          // If user was deactivated, force logout\n          if (userData.role !== 'admin' && !userData.isActive && user?.isActive) {\n            logout();\n            setUserStatus('pending');\n          } else {\n            setUser(userData);\n            setUserStatus(userData.role === 'admin' || userData.isActive ? 'verified' : 'pending');\n          }\n        } catch (error) {\n          // If auth fails, logout\n          logout();\n        }\n      }, 30000); // Check every 30 seconds\n    }\n\n    // Listen for user deactivation broadcasts\n    const broadcastChannel = new BroadcastChannel('user-status');\n    broadcastChannel.onmessage = (event) => {\n      if (event.data.type === 'USER_DEACTIVATED' && event.data.userId === user?.id) {\n        logout();\n        setUserStatus('pending');\n      }\n    };\n\n    return () => {\n      if (statusInterval) {\n        clearInterval(statusInterval);\n      }\n      broadcastChannel.close();\n    };\n    \n    // Only handle Firebase auth if configured\n    if (!isFirebaseConfigured) {\n      return; // Skip Firebase auth handling\n    }\n    \n    // Handle Google Auth redirect result\n    handleGoogleRedirect().then(async (result) => {\n      if (result) {\n        try {\n          // Get Firebase ID token\n          const idToken = await getIdToken(result.user);\n          \n          // Send to backend for verification\n          const response = await apiRequest(\"POST\", \"/api/auth/google\", { idToken });\n          const data = await response.json();\n          \n          setUser(data.user);\n          localStorage.setItem(\"fuelflow_token\", data.token);\n          localStorage.setItem(\"fuelflow_user\", JSON.stringify(data.user));\n        } catch (error) {\n          console.error('Google auth error:', error);\n        }\n      }\n    }).catch(console.error);\n    \n    // Listen to Firebase auth state changes for Google users\n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\n      if (firebaseUser && !user) {\n        try {\n          // Get Firebase ID token and verify with backend\n          const idToken = await getIdToken(firebaseUser);\n          const response = await apiRequest(\"POST\", \"/api/auth/google\", { idToken });\n          const data = await response.json();\n          \n          setUser(data.user);\n          localStorage.setItem(\"fuelflow_token\", data.token);\n          localStorage.setItem(\"fuelflow_user\", JSON.stringify(data.user));\n        } catch (error) {\n          console.error('Firebase auth verification error:', error);\n        }\n      }\n      setIsLoading(false);\n    });\n    \n    return () => unsubscribe();\n  }, []);\n\n  const login = async (username: string, password: string): Promise<boolean> => {\n    try {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", { username, password });\n      const data = await response.json();\n      \n      if (!response.ok) {\n        if (data.message?.includes(\"pending\") || data.message?.includes(\"approval\")) {\n          setUserStatus('pending');\n          throw new Error(data.message);\n        }\n        throw new Error(data.message || \"Login failed\");\n      }\n      \n      setUser(data.user);\n      // Admin users are always verified, others depend on isActive status\n      setUserStatus(data.user.role === 'admin' || data.user.isActive ? 'verified' : 'pending');\n      localStorage.setItem(\"fuelflow_token\", data.token);\n      localStorage.setItem(\"fuelflow_user\", JSON.stringify(data.user));\n      return true;\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      throw error;\n    }\n  };\n\n  const loginWithGoogle = async () => {\n    try {\n      await signInWithGoogle();\n      // User will be set via the redirect handler\n    } catch (error) {\n      console.error('Google sign-in error:', error);\n      throw new Error(\"Google sign-in failed\");\n    }\n  };\n\n  const logout = async () => {\n    try {\n      // Sign out from Firebase if it's a Google auth user\n      if (user?.isGoogleAuth) {\n        await auth.signOut();\n      }\n      setUser(null);\n      localStorage.removeItem(\"fuelflow_token\");\n      localStorage.removeItem(\"fuelflow_user\");\n    } catch (error) {\n      console.error('Logout error:', error);\n    }\n  };\n\n  const isAuthenticated = !!user;\n\n  return (\n    <AuthContext.Provider value={{ user, userStatus, isAuthenticated, login, loginWithGoogle, logout, isLoading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":6812},"client/src/lib/api.ts":{"content":"function getAuthHeaders() {\n  const token = localStorage.getItem(\"fuelflow_token\");\n  const headers: Record<string, string> = {};\n  \n  if (token) {\n    headers.Authorization = `Bearer ${token}`;\n  }\n  \n  return headers;\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown\n): Promise<Response> {\n  const authHeaders = getAuthHeaders();\n  const headers = {\n    ...authHeaders,\n    ...(data ? { \"Content-Type\": \"application/json\" } : {}),\n  };\n  \n  const response = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    throw new Error(`${response.status}: ${errorText}`);\n  }\n\n  return response;\n}\n","size_bytes":778},"client/src/lib/currency.ts":{"content":"// Currency configuration with proper formatting info\nexport const CURRENCY_CONFIG = {\n  PKR: { \n    symbol: '‚Ç®', \n    name: 'Pakistani Rupee', \n    locale: 'en-PK',\n    code: 'PKR'\n  },\n  INR: { \n    symbol: '‚Çπ', \n    name: 'Indian Rupee', \n    locale: 'en-IN',\n    code: 'INR'\n  },\n  USD: { \n    symbol: '$', \n    name: 'US Dollar', \n    locale: 'en-US',\n    code: 'USD'\n  },\n  EUR: { \n    symbol: '‚Ç¨', \n    name: 'Euro', \n    locale: 'de-DE',\n    code: 'EUR'\n  },\n  GBP: { \n    symbol: '¬£', \n    name: 'British Pound', \n    locale: 'en-GB',\n    code: 'GBP'\n  },\n  AED: { \n    symbol: 'ÿØ.ÿ•', \n    name: 'UAE Dirham', \n    locale: 'ar-AE',\n    code: 'AED'\n  },\n  SAR: { \n    symbol: 'Ô∑º', \n    name: 'Saudi Riyal', \n    locale: 'ar-SA',\n    code: 'SAR'\n  },\n  CNY: { \n    symbol: '¬•', \n    name: 'Chinese Yuan', \n    locale: 'zh-CN',\n    code: 'CNY'\n  }\n} as const;\n\nexport type CurrencyCode = keyof typeof CURRENCY_CONFIG;\nexport type CurrencyConfig = (typeof CURRENCY_CONFIG)[CurrencyCode];\n\n// Helper function to get currency symbol without context\nexport function getCurrencySymbol(currencyCode: CurrencyCode): string {\n  return CURRENCY_CONFIG[currencyCode].symbol;\n}\n\n// Helper function to format currency amount without context\nexport function formatAmount(\n  amount: number | string, \n  currencyCode: CurrencyCode = 'PKR',\n  options: Intl.NumberFormatOptions = {}\n): string {\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  \n  if (isNaN(numAmount)) return `${CURRENCY_CONFIG[currencyCode].symbol}0`;\n  \n  const config = CURRENCY_CONFIG[currencyCode];\n  const formatter = new Intl.NumberFormat(config.locale, {\n    style: 'currency',\n    currency: config.code,\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n    ...options\n  });\n\n  return formatter.format(numAmount);\n}\n\n// Helper function for compact formatting\nexport function formatAmountCompact(\n  amount: number | string, \n  currencyCode: CurrencyCode = 'PKR'\n): string {\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  \n  if (isNaN(numAmount)) return `${CURRENCY_CONFIG[currencyCode].symbol}0`;\n\n  const config = CURRENCY_CONFIG[currencyCode];\n\n  // For Pakistani Rupee, show in Lakhs (1L = 100,000)\n  if (currencyCode === 'PKR' && numAmount >= 100000) {\n    return `${config.symbol}${(numAmount / 100000).toFixed(1)}L`;\n  }\n  \n  // For other currencies, use compact notation\n  const formatter = new Intl.NumberFormat(config.locale, {\n    style: 'currency',\n    currency: config.code,\n    notation: 'compact',\n    compactDisplay: 'short'\n  });\n\n  return formatter.format(numAmount);\n}\n\n// Parse currency string back to number (removing symbols and formatting)\nexport function parseCurrencyString(currencyString: string): number {\n  // Remove all non-numeric characters except decimal point and minus sign\n  const cleaned = currencyString.replace(/[^\\d.-]/g, '');\n  return parseFloat(cleaned) || 0;\n}\n\n// Validate currency code\nexport function isValidCurrency(code: string): code is CurrencyCode {\n  return code in CURRENCY_CONFIG;\n}","size_bytes":3084},"client/src/lib/firebase.ts":{"content":"// Firebase integration - from firebase_barebones_javascript blueprint\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithRedirect, GoogleAuthProvider, getRedirectResult, User as FirebaseUser } from \"firebase/auth\";\n\n// Check if Firebase environment variables are configured\nconst isFirebaseConfigured = !!\n  (import.meta.env.VITE_FIREBASE_API_KEY &&\n   import.meta.env.VITE_FIREBASE_PROJECT_ID &&\n   import.meta.env.VITE_FIREBASE_APP_ID);\n\nlet auth: any = null;\nlet googleProvider: any = null;\n\n// Only initialize Firebase if configured\nif (isFirebaseConfigured) {\n  const firebaseConfig = {\n    apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n    authDomain: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n    projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n    storageBucket: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n    appId: import.meta.env.VITE_FIREBASE_APP_ID,\n  };\n\n  const app = initializeApp(firebaseConfig);\n  auth = getAuth(app);\n  googleProvider = new GoogleAuthProvider();\n}\n\nexport { auth, googleProvider };\nexport { isFirebaseConfigured };\n\n// Google Sign In function\nexport function signInWithGoogle() {\n  if (!isFirebaseConfigured || !auth || !googleProvider) {\n    throw new Error('Firebase is not configured. Please set up Firebase environment variables.');\n  }\n  signInWithRedirect(auth, googleProvider);\n}\n\n// Handle redirect result after Google sign-in\nexport async function handleGoogleRedirect() {\n  if (!isFirebaseConfigured || !auth) {\n    return null; // Firebase not configured, skip Google auth handling\n  }\n  \n  try {\n    const result = await getRedirectResult(auth);\n    if (result) {\n      // This gives you a Google Access Token. You can use it to access Google APIs.\n      const credential = GoogleAuthProvider.credentialFromResult(result);\n      const token = credential?.accessToken;\n\n      // The signed-in user info.\n      const user = result.user;\n      return { user, token };\n    }\n    return null;\n  } catch (error: any) {\n    console.error('Google Sign-In error:', error);\n    return null; // Return null instead of throwing to prevent blocking local auth\n  }\n}\n\n// Convert Firebase user to application user format\nexport function convertFirebaseUser(firebaseUser: FirebaseUser) {\n  return {\n    id: firebaseUser.uid,\n    username: firebaseUser.email || '',\n    fullName: firebaseUser.displayName || firebaseUser.email || '',\n    email: firebaseUser.email || '',\n    photoURL: firebaseUser.photoURL || null,\n    role: 'cashier' as const, // Default role for Google sign-in users\n    isGoogleAuth: true,\n  };\n}","size_bytes":2623},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nfunction getAuthHeaders() {\n  const token = localStorage.getItem(\"fuelflow_token\");\n  const headers: Record<string, string> = {};\n  \n  if (token) {\n    headers.Authorization = `Bearer ${token}`;\n  }\n  \n  return headers;\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const authHeaders = getAuthHeaders();\n  const headers = {\n    ...authHeaders,\n    ...(data ? { \"Content-Type\": \"application/json\" } : {}),\n  };\n  \n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const authHeaders = getAuthHeaders();\n    \n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers: authHeaders,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1778},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function formatCompactNumber(value: number | string | null | undefined, options?: { \n  currency?: string, \n  includeSymbol?: boolean \n}): string {\n  const numValue = parseFloat(String(value || 0));\n  \n  if (isNaN(numValue)) return '0';\n  \n  const { currency = 'PKR', includeSymbol = true } = options || {};\n  \n  let formatted: string;\n  const absValue = Math.abs(numValue);\n  \n  if (absValue >= 1_000_000) {\n    formatted = (numValue / 1_000_000).toFixed(1) + 'M';\n  } else if (absValue >= 1_000) {\n    formatted = (numValue / 1_000).toFixed(1) + 'K';\n  } else {\n    formatted = numValue.toLocaleString('en-US', { \n      minimumFractionDigits: 0,\n      maximumFractionDigits: 2 \n    });\n  }\n  \n  // Remove trailing .0\n  formatted = formatted.replace(/\\.0([KM])$/, '$1');\n  \n  if (includeSymbol) {\n    const symbol = currency === 'PKR' ? '‚Ç®' : currency === 'USD' ? '$' : currency;\n    return `${symbol}${formatted}`;\n  }\n  \n  return formatted;\n}\n\nexport function escapeHtml(unsafe: string): string {\n  return unsafe\n    .replace(/&/g, \"&amp;\")\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\")\n    .replace(/\"/g, \"&quot;\")\n    .replace(/'/g, \"&#039;\");\n}\n","size_bytes":1334},"client/src/pages/AccountsPayable.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport type { Supplier, Payment } from \"@shared/schema\";\nimport { insertPaymentSchema } from \"@shared/schema\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCurrency } from \"@/contexts/CurrencyContext\";\nimport { apiRequest } from \"@/lib/api\";\nimport { Combobox } from \"@/components/ui/combobox\";\nimport { Calendar, Eye, CreditCard, FileText, History } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function AccountsPayable() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { formatCurrency, currencyConfig } = useCurrency();\n  const [, navigate] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [open, setOpen] = useState(false);\n  const [quickPaymentOpen, setQuickPaymentOpen] = useState(false);\n  const [selectedSupplierForPayment, setSelectedSupplierForPayment] = useState<Supplier | null>(null);\n\n  const form = useForm({\n    resolver: zodResolver(insertPaymentSchema.extend({\n      paymentDate: insertPaymentSchema.shape.paymentDate.optional(),\n    })),\n    defaultValues: {\n      supplierId: \"\",\n      amount: \"\",\n      paymentMethod: \"cash\",\n      referenceNumber: \"\",\n      notes: \"\",\n      type: \"payable\",\n      stationId: user?.stationId || \"\",\n      userId: user?.id || \"\",\n    },\n  });\n\n  const quickPaymentForm = useForm({\n    resolver: zodResolver(insertPaymentSchema.extend({\n      paymentDate: insertPaymentSchema.shape.paymentDate.optional(),\n    })),\n    defaultValues: {\n      supplierId: \"\",\n      amount: \"0\",\n      paymentMethod: \"cash\",\n      referenceNumber: \"\",\n      notes: \"\",\n      type: \"payable\",\n      stationId: user?.stationId || \"\",\n      userId: user?.id || \"\",\n    },\n  });\n\n  const createPaymentMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const paymentData = {\n        ...data,\n        stationId: user?.stationId || data.stationId,\n        userId: user?.id || data.userId,\n        currencyCode: currencyConfig.code,\n      };\n      const response = await apiRequest(\"POST\", \"/api/payments\", paymentData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Payment recorded\",\n        description: \"Payment to supplier has been recorded successfully\",\n      });\n      setOpen(false);\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/payments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/suppliers\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to record payment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    createPaymentMutation.mutate(data);\n  };\n\n  const onQuickPaymentSubmit = (data: any) => {\n    const paymentData = {\n      ...data,\n      supplierId: selectedSupplierForPayment?.id,\n      stationId: user?.stationId,\n      userId: user?.id,\n    };\n    createQuickPaymentMutation.mutate(paymentData);\n  };\n\n  const createQuickPaymentMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const paymentData = {\n        ...data,\n        stationId: user?.stationId || data.stationId,\n        userId: user?.id || data.userId,\n        currencyCode: currencyConfig.code,\n      };\n      const response = await apiRequest(\"POST\", \"/api/payments\", paymentData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Payment recorded\",\n        description: \"Payment to supplier has been recorded successfully\",\n      });\n      setQuickPaymentOpen(false);\n      quickPaymentForm.reset();\n      setSelectedSupplierForPayment(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/payments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/suppliers\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to record payment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const [viewDialogOpen, setViewDialogOpen] = useState(false);\n  const [selectedSupplierForView, setSelectedSupplierForView] = useState<Supplier | null>(null);\n\n  const handleViewSupplier = (supplier: Supplier) => {\n    setSelectedSupplierForView(supplier);\n    setViewDialogOpen(true);\n  };\n\n  const handleQuickPayment = (supplier: Supplier) => {\n    setSelectedSupplierForPayment(supplier);\n    quickPaymentForm.setValue('supplierId', supplier.id);\n    quickPaymentForm.setValue('amount', supplier.outstandingAmount || '0');\n    setQuickPaymentOpen(true);\n  };\n\n  const handleViewHistory = (supplier: Supplier) => {\n    navigate(`/payment-history/${supplier.id}/supplier`);\n  };\n\n  const { data: suppliers = [], isLoading } = useQuery<Supplier[]>({\n    queryKey: [\"/api/suppliers\"],\n  });\n\n  const { data: customers = [] } = useQuery<any[]>({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const allPayees = suppliers.map(s => ({ \n    id: s.id, \n    name: s.name, \n    type: 'supplier' as const,\n    outstandingAmount: s.outstandingAmount || '0'\n  }));\n\n  const filteredSuppliers = suppliers.filter((supplier: Supplier) => {\n    const matchesSearch = supplier.name.toLowerCase().includes(searchTerm.toLowerCase());\n\n    const outstanding = parseFloat(supplier.outstandingAmount || '0');\n    let matchesStatus = true;\n    if (statusFilter === \"current\") {\n      matchesStatus = outstanding <= 100000;\n    } else if (statusFilter === \"overdue\") {\n      matchesStatus = outstanding > 100000;\n    } else if (statusFilter === \"paid\") {\n      matchesStatus = outstanding === 0;\n    }\n\n    return matchesSearch && matchesStatus;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/3 mb-4\"></div>\n          <div className=\"h-4 bg-muted rounded w-1/2 mb-8\"></div>\n          <div className=\"h-96 bg-muted rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const totalPayable = filteredSuppliers.reduce((sum: number, s: Supplier) => sum + parseFloat(s.outstandingAmount || '0'), 0);\n  const overduePayments = filteredSuppliers.filter((s: Supplier) => parseFloat(s.outstandingAmount || '0') > 100000).length;\n  const currentPayments = filteredSuppliers.filter((s: Supplier) => {\n    const outstanding = parseFloat(s.outstandingAmount || '0');\n    return outstanding > 0 && outstanding <= 100000;\n  }).length;\n\n  return (\n    <div className=\"space-y-6 fade-in\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <div>\n          <h3 className=\"text-2xl font-semibold text-card-foreground\">Accounts Payable</h3>\n          <p className=\"text-muted-foreground\">Manage supplier payments and outstanding balances</p>\n        </div>\n        <div className=\"flex flex-col sm:flex-row items-stretch sm:items-center space-y-2 sm:space-y-0 sm:space-x-2 w-full sm:w-auto\">\n          <Dialog open={open} onOpenChange={setOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"w-full sm:w-auto\">\n                + Make Payment\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[500px] max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Record Payment to Supplier</DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"supplierId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Supplier *</FormLabel>\n                        <FormControl>\n                          <Combobox\n                            options={allPayees.map(p => ({ value: p.id, label: `${p.name} (${p.type})` }))}\n                            value={field.value}\n                            onValueChange={field.onChange}\n                            placeholder=\"Select supplier\"\n                            emptyMessage=\"No suppliers found\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"amount\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Amount ({currencyConfig.symbol}) *</FormLabel>\n                          <FormControl>\n                            <Input type=\"number\" step=\"0.01\" placeholder=\"0.00\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"paymentMethod\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Payment Method *</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select method\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"cash\">Cash</SelectItem>\n                              <SelectItem value=\"card\">Card</SelectItem>\n                              <SelectItem value=\"credit\">Credit</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <FormField\n                    control={form.control}\n                    name=\"referenceNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Reference Number</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Transaction/Check number\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"notes\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Notes</FormLabel>\n                        <FormControl>\n                          <Textarea placeholder=\"Payment details\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <div className=\"flex flex-col sm:flex-row justify-end space-y-2 sm:space-y-0 sm:space-x-2 pt-4\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setOpen(false)} className=\"w-full sm:w-auto\">\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\" disabled={createPaymentMutation.isPending} className=\"w-full sm:w-auto\">\n                      {createPaymentMutation.isPending ? \"Recording...\" : \"Record Payment\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n\n          <Dialog open={quickPaymentOpen} onOpenChange={setQuickPaymentOpen}>\n            <DialogContent className=\"sm:max-w-[500px] max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Quick Payment - {selectedSupplierForPayment?.name}</DialogTitle>\n              </DialogHeader>\n              <Form {...quickPaymentForm}>\n                <form onSubmit={quickPaymentForm.handleSubmit(onQuickPaymentSubmit)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                    <FormField\n                      control={quickPaymentForm.control}\n                      name=\"amount\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Amount ({currencyConfig.symbol}) *</FormLabel>\n                          <FormControl>\n                            <Input type=\"number\" step=\"0.01\" placeholder=\"0.00\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={quickPaymentForm.control}\n                      name=\"paymentMethod\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Payment Method *</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select method\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"cash\">Cash</SelectItem>\n                              <SelectItem value=\"card\">Card</SelectItem>\n                              <SelectItem value=\"credit\">Credit</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <FormField\n                    control={quickPaymentForm.control}\n                    name=\"referenceNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Reference Number</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Transaction/Check number\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={quickPaymentForm.control}\n                    name=\"notes\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Notes</FormLabel>\n                        <FormControl>\n                          <Textarea placeholder=\"Payment details\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <div className=\"flex flex-col sm:flex-row justify-end space-y-2 sm:space-y-0 sm:space-x-2 pt-4\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setQuickPaymentOpen(false)} className=\"w-full sm:w-auto\">\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\" disabled={createQuickPaymentMutation.isPending} className=\"w-full sm:w-auto\">\n                      {createQuickPaymentMutation.isPending ? \"Recording...\" : \"Record Payment\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n\n          <Dialog open={viewDialogOpen} onOpenChange={setViewDialogOpen}>\n            <DialogContent className=\"sm:max-w-[500px]\">\n              <DialogHeader>\n                <DialogTitle>Supplier Details</DialogTitle>\n              </DialogHeader>\n              {selectedSupplierForView && (\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"text-sm font-medium\">Name</label>\n                      <p className=\"text-sm text-muted-foreground\">{selectedSupplierForView.name}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium\">Contact Person</label>\n                      <p className=\"text-sm text-muted-foreground\">{selectedSupplierForView.contactPerson || 'N/A'}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium\">Phone</label>\n                      <p className=\"text-sm text-muted-foreground\">{selectedSupplierForView.contactPhone || 'N/A'}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium\">Email</label>\n                      <p className=\"text-sm text-muted-foreground\">{selectedSupplierForView.contactEmail || 'N/A'}</p>\n                    </div>\n                    <div className=\"col-span-2\">\n                      <label className=\"text-sm font-medium\">Address</label>\n                      <p className=\"text-sm text-muted-foreground\">{selectedSupplierForView.address || 'N/A'}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium\">Payment Terms</label>\n                      <p className=\"text-sm text-muted-foreground\">{selectedSupplierForView.paymentTerms || 'N/A'}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium\">Outstanding</label>\n                      <p className=\"text-sm text-muted-foreground\">{formatCurrency(parseFloat(selectedSupplierForView.outstandingAmount || '0'))}</p>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </DialogContent>\n          </Dialog>\n\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            className=\"w-full sm:w-auto\" \n            title=\"View Payment Schedule\"\n          >\n            <Calendar className=\"w-4 h-4 mr-2\" />\n            Payment Schedule\n          </Button>\n        </div>\n      </div>\n\n      {/* Payables Summary */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-xl md:text-2xl font-bold text-primary\">\n              {filteredSuppliers.length}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Active Suppliers</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-xl md:text-2xl font-bold text-red-600\">\n              {formatCurrency(totalPayable)}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Total Payable</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-xl md:text-2xl font-bold text-orange-600\">\n              {currentPayments}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Current Payments</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-xl md:text-2xl font-bold text-red-600\">\n              {overduePayments}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Overdue Payments</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Supplier Payables Table */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n            <CardTitle>Supplier Payment Status</CardTitle>\n            <div className=\"flex flex-col sm:flex-row items-stretch sm:items-center space-y-2 sm:space-y-0 sm:space-x-2 w-full sm:w-auto\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search suppliers...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full sm:w-48\"\n              />\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-full sm:w-32\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"current\">Current</SelectItem>\n                  <SelectItem value=\"overdue\">Overdue</SelectItem>\n                  <SelectItem value=\"paid\">Paid</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-muted\">\n                <tr>\n                  <th className=\"text-left p-3 font-medium\">Supplier</th>\n                  <th className=\"text-left p-3 font-medium\">Payment Terms</th>\n                  <th className=\"text-right p-3 font-medium\">Outstanding</th>\n                  <th className=\"text-center p-3 font-medium\">Status</th>\n                  <th className=\"text-center p-3 font-medium\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {filteredSuppliers.length > 0 ? filteredSuppliers.map((supplier: Supplier, index: number) => {\n                  const outstanding = parseFloat(supplier.outstandingAmount || '0');\n                  const isOverdue = outstanding > 100000;\n\n                  return (\n                    <tr key={supplier.id} className=\"border-b border-border hover:bg-muted/50\">\n                      <td className=\"p-3\">\n                        <div className=\"font-medium text-card-foreground\">\n                          {supplier.name}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Contact: {supplier.contactPerson || 'N/A'}\n                        </div>\n                      </td>\n                      <td className=\"p-3\">{supplier.paymentTerms || 'Net 30'}</td>\n                      <td className=\"p-3 text-right\">\n                        <span className=\"font-semibold text-red-600\">\n                          {formatCurrency(outstanding)}\n                        </span>\n                      </td>\n                      <td className=\"p-3 text-center\">\n                        <Badge\n                          variant={isOverdue ? 'destructive' : 'default'}\n                          className={isOverdue ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'}\n                        >\n                          {isOverdue ? 'Overdue' : 'Current'}\n                        </Badge>\n                      </td>\n                      <td className=\"p-3 text-center\">\n                        <div className=\"flex items-center justify-center space-x-1\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleViewSupplier(supplier)}\n                            className=\"p-2 text-blue-600 hover:text-blue-800\"\n                            title=\"View Details\"\n                          >\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleQuickPayment(supplier)}\n                            className=\"p-2 text-green-600 hover:text-green-800\"\n                            title=\"Record Payment\"\n                          >\n                            <CreditCard className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleViewHistory(supplier)}\n                            className=\"p-2 text-orange-600 hover:text-orange-800\"\n                            title=\"Payment History\"\n                          >\n                            <History className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  );\n                }) : (\n                  <tr>\n                    <td colSpan={5} className=\"p-8 text-center text-muted-foreground\">\n                      No supplier payment data found for the selected criteria\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":25996},"client/src/pages/AccountsReceivable.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport type { Customer, Payment } from \"@shared/schema\";\nimport { insertPaymentSchema } from \"@shared/schema\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCurrency } from \"@/contexts/CurrencyContext\";\nimport { apiRequest } from \"@/lib/api\";\nimport { Combobox } from \"@/components/ui/combobox\";\nimport { Trash2, Smartphone, Receipt, BarChart3, Eye, CreditCard, FileText, TrendingUp, History } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function AccountsReceivable() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { formatCurrency, currencyConfig } = useCurrency();\n  const [, navigate] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [agingFilter, setAgingFilter] = useState(\"all\");\n  const [open, setOpen] = useState(false);\n  const [quickPaymentOpen, setQuickPaymentOpen] = useState(false);\n  const [selectedCustomerForPayment, setSelectedCustomerForPayment] = useState<Customer | null>(null);\n\n  const form = useForm({\n    resolver: zodResolver(insertPaymentSchema.extend({\n      paymentDate: insertPaymentSchema.shape.paymentDate.optional(),\n    })),\n    defaultValues: {\n      customerId: \"\",\n      amount: \"\", // Empty instead of \"0\"\n      paymentMethod: \"cash\",\n      referenceNumber: \"\",\n      notes: \"\",\n      type: \"receivable\",\n      stationId: user?.stationId || \"\",\n      userId: user?.id || \"\",\n    },\n  });\n\n  const quickPaymentForm = useForm({\n    resolver: zodResolver(insertPaymentSchema.extend({\n      paymentDate: insertPaymentSchema.shape.paymentDate.optional(),\n    })),\n    defaultValues: {\n      customerId: \"\",\n      amount: \"0\",\n      paymentMethod: \"cash\",\n      referenceNumber: \"\",\n      notes: \"\",\n      type: \"receivable\",\n      stationId: user?.stationId || \"\",\n      userId: user?.id || \"\",\n    },\n  });\n\n  const createPaymentMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const paymentData = {\n        ...data,\n        stationId: user?.stationId || data.stationId,\n        userId: user?.id || data.userId,\n        currencyCode: currencyConfig.code, // Add required field\n      };\n      const response = await apiRequest(\"POST\", \"/api/payments\", paymentData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Payment recorded\",\n        description: \"Customer payment has been recorded successfully\",\n      });\n      setOpen(false);\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/payments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to record payment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    createPaymentMutation.mutate(data);\n  };\n\n  const onQuickPaymentSubmit = (data: any) => {\n    const paymentData = {\n      ...data,\n      customerId: selectedCustomerForPayment?.id,\n      stationId: user?.stationId,\n      userId: user?.id,\n    };\n    createQuickPaymentMutation.mutate(paymentData);\n  };\n\n  const createQuickPaymentMutation = useMutation({\n    mutationFn: async (data: any) => {\n      // Process form data to ensure all required fields are present\n      const paymentData = {\n        ...data,\n        stationId: user?.stationId || data.stationId,\n        userId: user?.id || data.userId,\n        currencyCode: currencyConfig.code, // Add required currency field\n      };\n      const response = await apiRequest(\"POST\", \"/api/payments\", paymentData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Payment recorded\",\n        description: \"Customer payment has been recorded successfully\",\n      });\n      setQuickPaymentOpen(false);\n      quickPaymentForm.reset();\n      setSelectedCustomerForPayment(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/payments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to record payment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const [viewDialogOpen, setViewDialogOpen] = useState(false);\n  const [selectedCustomerForView, setSelectedCustomerForView] = useState<Customer | null>(null);\n\n  const handleViewCustomer = (customer: Customer) => {\n    setSelectedCustomerForView(customer);\n    setViewDialogOpen(true);\n  };\n\n  const handleQuickPayment = (customer: Customer) => {\n    setSelectedCustomerForPayment(customer);\n    quickPaymentForm.setValue('customerId', customer.id);\n    quickPaymentForm.setValue('amount', customer.outstandingAmount || '0');\n    setQuickPaymentOpen(true);\n  };\n\n  const handleGenerateStatement = (customer: Customer) => {\n    // Navigate to payment history page\n    navigate(`/payment-history/${customer.id}/customer`);\n  };\n\n  const { data: customers = [], isLoading } = useQuery<Customer[]>({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const creditCustomers = customers.filter((c: Customer) => parseFloat(c.outstandingAmount || '0') > 0);\n\n  const filteredCustomers = creditCustomers.filter((customer: Customer) => {\n    const matchesSearch = customer.name.toLowerCase().includes(searchTerm.toLowerCase());\n\n    // Aging filter logic\n    const outstanding = parseFloat(customer.outstandingAmount || '0');\n    let matchesAging = true;\n    if (agingFilter === \"current\") {\n      matchesAging = outstanding <= 50000;\n    } else if (agingFilter === \"30-60\") {\n      matchesAging = outstanding > 50000 && outstanding <= 100000;\n    } else if (agingFilter === \"60-90\") {\n      matchesAging = outstanding > 100000 && outstanding <= 150000;\n    } else if (agingFilter === \"90+\") {\n      matchesAging = outstanding > 150000;\n    }\n\n    return matchesSearch && matchesAging;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/3 mb-4\"></div>\n          <div className=\"h-4 bg-muted rounded w-1/2 mb-8\"></div>\n          <div className=\"h-96 bg-muted rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const totalOutstanding = filteredCustomers.reduce((sum: number, c: Customer) => sum + parseFloat(c.outstandingAmount || '0'), 0);\n  const overdueAccounts = filteredCustomers.filter((c: Customer) => parseFloat(c.outstandingAmount || '0') > 50000).length;\n  const currentAccounts = filteredCustomers.filter((c: Customer) => {\n    const outstanding = parseFloat(c.outstandingAmount || '0');\n    return outstanding > 0 && outstanding <= 50000;\n  }).length;\n\n  return (\n    <div className=\"space-y-6 fade-in\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-2xl font-semibold text-card-foreground\">Accounts Receivable</h3>\n          <p className=\"text-muted-foreground\">Track customer payments and outstanding balances</p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Dialog open={open} onOpenChange={setOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-record-payment\">\n                + Record Payment\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[500px] max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Record Customer Payment</DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"customerId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Customer *</FormLabel>\n                        <FormControl>\n                          <Combobox\n                            options={customers.filter(c => parseFloat(c.outstandingAmount || '0') > 0).map(c => ({ \n                              value: c.id, \n                              label: `${c.name} (${formatCurrency(parseFloat(c.outstandingAmount || '0'))} outstanding)` \n                            }))}\n                            value={field.value}\n                            onValueChange={field.onChange}\n                            placeholder=\"Select customer\"\n                            emptyMessage=\"No customers with outstanding balance found\"\n                            data-testid=\"select-customer\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"amount\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Amount ({currencyConfig.symbol}) *</FormLabel>\n                          <FormControl>\n                            <Input type=\"number\" step=\"0.01\" placeholder=\"0.00\" {...field} data-testid=\"input-payment-amount\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"paymentMethod\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Payment Method *</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-payment-method\">\n                                <SelectValue placeholder=\"Select method\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"cash\">Cash</SelectItem>\n                              <SelectItem value=\"card\">Card</SelectItem>\n                              <SelectItem value=\"credit\">Credit</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <FormField\n                    control={form.control}\n                    name=\"referenceNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Reference Number</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Transaction/Check number\" {...field} data-testid=\"input-reference-number\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"notes\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Notes</FormLabel>\n                        <FormControl>\n                          <Textarea placeholder=\"Payment details\" {...field} data-testid=\"input-payment-notes\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <div className=\"flex justify-end space-x-2 pt-4\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setOpen(false)} data-testid=\"button-cancel\">\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\" disabled={createPaymentMutation.isPending} data-testid=\"button-submit-payment\">\n                      {createPaymentMutation.isPending ? \"Recording...\" : \"Record Payment\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n\n          {/* Quick Payment Dialog */}\n          <Dialog open={quickPaymentOpen} onOpenChange={setQuickPaymentOpen}>\n            <DialogContent className=\"sm:max-w-[500px] max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Quick Payment - {selectedCustomerForPayment?.name}</DialogTitle>\n              </DialogHeader>\n              <Form {...quickPaymentForm}>\n                <form onSubmit={quickPaymentForm.handleSubmit(onQuickPaymentSubmit)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={quickPaymentForm.control}\n                      name=\"amount\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Amount ({currencyConfig.symbol}) *</FormLabel>\n                          <FormControl>\n                            <Input type=\"number\" step=\"0.01\" placeholder=\"0.00\" {...field} data-testid=\"input-quick-payment-amount\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={quickPaymentForm.control}\n                      name=\"paymentMethod\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Payment Method *</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-quick-payment-method\">\n                                <SelectValue placeholder=\"Select method\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"cash\">Cash</SelectItem>\n                              <SelectItem value=\"card\">Card</SelectItem>\n                              <SelectItem value=\"credit\">Credit</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <FormField\n                    control={quickPaymentForm.control}\n                    name=\"referenceNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Reference Number</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Transaction/Check number\" {...field} data-testid=\"input-quick-reference-number\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={quickPaymentForm.control}\n                    name=\"notes\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Notes</FormLabel>\n                        <FormControl>\n                          <Textarea placeholder=\"Payment details\" {...field} data-testid=\"input-quick-payment-notes\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <div className=\"flex justify-end space-x-2 pt-4\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setQuickPaymentOpen(false)} data-testid=\"button-quick-cancel\">\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\" disabled={createQuickPaymentMutation.isPending} data-testid=\"button-quick-submit-payment\">\n                      {createQuickPaymentMutation.isPending ? \"Recording...\" : \"Record Payment\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n\n          {/* View Customer Dialog */}\n          <Dialog open={viewDialogOpen} onOpenChange={setViewDialogOpen}>\n            <DialogContent className=\"sm:max-w-[500px]\">\n              <DialogHeader>\n                <DialogTitle>Customer Details</DialogTitle>\n              </DialogHeader>\n              {selectedCustomerForView && (\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"text-sm font-medium\">Name</label>\n                      <p className=\"text-sm text-muted-foreground\">{selectedCustomerForView.name}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium\">Type</label>\n                      <p className=\"text-sm text-muted-foreground\">{selectedCustomerForView.type}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium\">Phone</label>\n                      <p className=\"text-sm text-muted-foreground\">{selectedCustomerForView.contactPhone || 'N/A'}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium\">Email</label>\n                      <p className=\"text-sm text-muted-foreground\">{selectedCustomerForView.contactEmail || 'N/A'}</p>\n                    </div>\n                    <div className=\"col-span-2\">\n                      <label className=\"text-sm font-medium\">Address</label>\n                      <p className=\"text-sm text-muted-foreground\">{selectedCustomerForView.address || 'N/A'}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium\">Credit Limit</label>\n                      <p className=\"text-sm text-muted-foreground\">{formatCurrency(parseFloat(selectedCustomerForView.creditLimit || '0'))}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium\">Outstanding</label>\n                      <p className=\"text-sm text-muted-foreground\">{formatCurrency(parseFloat(selectedCustomerForView.outstandingAmount || '0'))}</p>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </DialogContent>\n          </Dialog>\n\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            className=\"p-2\" \n            data-testid=\"button-aging-report\" \n            title=\"View Aging Report\"\n          >\n            <BarChart3 className=\"w-4 h-4 mr-2\" />\n            Aging Report\n          </Button>\n        </div>\n      </div>\n\n      {/* Receivables Summary */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold text-primary\" data-testid=\"total-customers-ar\">\n              {filteredCustomers.length}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Outstanding Customers</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold text-orange-600\" data-testid=\"total-outstanding\">\n              {formatCurrency(totalOutstanding)}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Total Outstanding</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold text-green-600\" data-testid=\"current-accounts\">\n              {currentAccounts}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Current (0-30 days)</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold text-red-600\" data-testid=\"overdue-accounts-ar\">\n              {overdueAccounts}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Overdue ({'>'}30 days)</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Outstanding Balances Table */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Outstanding Customer Balances</CardTitle>\n            <div className=\"flex items-center space-x-2\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search customers...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-48\"\n                data-testid=\"input-search-customers-ar\"\n              />\n              <Select value={agingFilter} onValueChange={setAgingFilter}>\n                <SelectTrigger className=\"w-40\" data-testid=\"select-aging-filter\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Accounts</SelectItem>\n                  <SelectItem value=\"current\">Current (0-30)</SelectItem>\n                  <SelectItem value=\"30-60\">30-60 Days</SelectItem>\n                  <SelectItem value=\"60-90\">60-90 Days</SelectItem>\n                  <SelectItem value=\"90+\">90+ Days</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-muted\">\n                <tr>\n                  <th className=\"text-left p-3 font-medium\">Customer</th>\n                  <th className=\"text-right p-3 font-medium\">Credit Limit</th>\n                  <th className=\"text-right p-3 font-medium\">Outstanding</th>\n                  <th className=\"text-right p-3 font-medium\">Available Credit</th>\n                  <th className=\"text-center p-3 font-medium\">Days Outstanding</th>\n                  <th className=\"text-center p-3 font-medium\">Last Payment</th>\n                  <th className=\"text-center p-3 font-medium\">Status</th>\n                  <th className=\"text-center p-3 font-medium\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {filteredCustomers.length > 0 ? filteredCustomers.map((customer: Customer, index: number) => {\n                  const creditLimit = parseFloat(customer.creditLimit || '0');\n                  const outstanding = parseFloat(customer.outstandingAmount || '0');\n                  const availableCredit = creditLimit - outstanding;\n                  const isOverdue = outstanding > 50000;\n\n                  return (\n                    <tr key={customer.id} className=\"border-b border-border hover:bg-muted/50\">\n                      <td className=\"p-3\">\n                        <div className=\"font-medium text-card-foreground\" data-testid={`customer-name-ar-${index}`}>\n                          {customer.name}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          GST: {customer.gstNumber || 'N/A'}\n                        </div>\n                      </td>\n                      <td className=\"p-3 text-right\">\n                        {formatCurrency(creditLimit)}\n                      </td>\n                      <td className=\"p-3 text-right\">\n                        <span className=\"font-semibold text-red-600\" data-testid={`outstanding-ar-${index}`}>\n                          {formatCurrency(outstanding)}\n                        </span>\n                      </td>\n                      <td className=\"p-3 text-right text-green-600\">\n                        {formatCurrency(Math.max(0, availableCredit))}\n                      </td>\n                      <td className=\"p-3 text-center\">\n                        <span className={isOverdue ? 'text-red-600 font-semibold' : ''}>\n                          {isOverdue ? '30+' : '<30'} days\n                        </span>\n                      </td>\n                      <td className=\"p-3 text-center text-sm\">\n                        {customer.createdAt ? new Date(customer.createdAt).toLocaleDateString('en-GB') : 'N/A'}\n                      </td>\n                      <td className=\"p-3 text-center\">\n                        <Badge\n                          variant={isOverdue ? 'destructive' : 'default'}\n                          className={isOverdue ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'}\n                          data-testid={`status-ar-${index}`}\n                        >\n                          {isOverdue ? 'Overdue' : 'Current'}\n                        </Badge>\n                      </td>\n                      <td className=\"p-3 text-center\">\n                        <div className=\"flex items-center justify-center space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleViewCustomer(customer)}\n                            className=\"p-2 text-blue-600 hover:text-blue-800 hover:bg-blue-50\"\n                            data-testid=\"button-view-customer-receivable\"\n                            title=\"View Details\"\n                          >\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleQuickPayment(customer)}\n                            className=\"p-2 text-green-600 hover:text-green-800 hover:bg-green-50\"\n                            data-testid=\"button-quick-payment-receivable\"\n                            title=\"Collect Payment\"\n                          >\n                            <CreditCard className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleGenerateStatement(customer)}\n                            className=\"p-2 text-orange-600 hover:text-orange-800 hover:bg-orange-50\"\n                            data-testid=\"button-statement-receivable\"\n                            title=\"Payment History\"\n                          >\n                            <History className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  );\n                }) : (\n                  <tr>\n                    <td colSpan={8} className=\"p-8 text-center text-muted-foreground\">\n                      No outstanding accounts found for the selected criteria\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":28345},"client/src/pages/AgingReports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Download, Clock, AlertTriangle, CheckCircle, AlertCircle } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useCurrency } from \"@/contexts/CurrencyContext\";\n\ninterface AgingBucketData {\n  id: string;\n  invoiceNumber?: string;\n  orderNumber?: string;\n  customerName?: string;\n  supplierName?: string;\n  transactionDate?: string;\n  orderDate?: string;\n  dueDate?: string;\n  totalAmount?: number;\n  outstandingAmount: number;\n  paidAmount?: number;\n  currencyCode: string;\n  daysOverdue: number;\n}\n\ninterface AgingReportData {\n  type: 'receivable' | 'payable';\n  buckets: {\n    current: AgingBucketData[];\n    days30: AgingBucketData[];\n    days60: AgingBucketData[];\n    days90: AgingBucketData[];\n    over90: AgingBucketData[];\n  };\n  totals: {\n    current: number;\n    days30: number;\n    days60: number;\n    days90: number;\n    over90: number;\n  };\n  grandTotal: number;\n}\n\nexport default function AgingReports() {\n  const { user } = useAuth();\n  const { formatCurrency } = useCurrency();\n  const [reportType, setReportType] = useState<'receivable' | 'payable'>('receivable');\n\n  const { data: agingReport, isLoading } = useQuery<AgingReportData>({\n    queryKey: [`/api/reports/aging/${user?.stationId}?type=${reportType}`],\n    enabled: !!user?.stationId,\n  });\n\n  const exportToCSV = () => {\n    if (!agingReport) return;\n\n    const isReceivable = reportType === 'receivable';\n    const headers = isReceivable \n      ? ['Invoice Number', 'Customer Name', 'Transaction Date', 'Due Date', 'Outstanding Amount', 'Currency', 'Days Overdue', 'Status']\n      : ['Order Number', 'Supplier Name', 'Order Date', 'Due Date', 'Outstanding Amount', 'Currency', 'Days Overdue', 'Status'];\n\n    const rows: string[][] = [];\n    \n    // Add data from all buckets\n    Object.entries(agingReport.buckets).forEach(([bucketName, items]) => {\n      items.forEach(item => {\n        const daysOverdue = item.daysOverdue || 0;\n        const status = daysOverdue <= 0 ? 'Current' : \n                     daysOverdue <= 30 ? '1-30 Days' :\n                     daysOverdue <= 60 ? '31-60 Days' :\n                     daysOverdue <= 90 ? '61-90 Days' : '90+ Days';\n\n        if (isReceivable) {\n          rows.push([\n            item.invoiceNumber || 'N/A',\n            item.customerName || 'Unknown Customer',\n            item.transactionDate ? format(new Date(item.transactionDate), 'yyyy-MM-dd') : 'N/A',\n            item.dueDate ? format(new Date(item.dueDate), 'yyyy-MM-dd') : 'N/A',\n            (item.outstandingAmount || 0).toString(),\n            item.currencyCode || '',\n            (item.daysOverdue || 0).toString(),\n            status\n          ]);\n        } else {\n          rows.push([\n            item.orderNumber || 'N/A',\n            item.supplierName || 'Unknown Supplier',\n            item.orderDate ? format(new Date(item.orderDate), 'yyyy-MM-dd') : 'N/A',\n            item.dueDate ? format(new Date(item.dueDate), 'yyyy-MM-dd') : 'N/A',\n            (item.outstandingAmount || 0).toString(),\n            item.currencyCode || '',\n            (item.daysOverdue || 0).toString(),\n            status\n          ]);\n        }\n      });\n    });\n\n    const csvContent = [headers, ...rows]\n      .map(row => row.map(cell => `\"${cell}\"`).join(','))\n      .join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `aging-report-${reportType}-${format(new Date(), 'yyyy-MM-dd')}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const getBadgeVariant = (daysOverdue: number) => {\n    const days = daysOverdue || 0;\n    if (days <= 0) return \"default\";\n    if (days <= 30) return \"secondary\";\n    if (days <= 60) return \"outline\";\n    if (days <= 90) return \"destructive\";\n    return \"destructive\";\n  };\n\n  const getBadgeIcon = (daysOverdue: number) => {\n    const days = daysOverdue || 0;\n    if (days <= 0) return <CheckCircle className=\"w-3 h-3\" />;\n    if (days <= 30) return <Clock className=\"w-3 h-3\" />;\n    if (days <= 90) return <AlertTriangle className=\"w-3 h-3\" />;\n    return <AlertCircle className=\"w-3 h-3\" />;\n  };\n\n  const formatAmount = (amount: number, currencyCode?: string) => {\n    return formatCurrency(amount);\n  };\n\n  const renderBucketCard = (bucketName: string, bucketData: AgingBucketData[], total: number, label: string) => {\n    const grandTotal = agingReport?.grandTotal || 0;\n    const percentage = grandTotal > 0 ? Math.round((total / grandTotal) * 100) : 0;\n\n    return (\n      <Card key={bucketName} className=\"bg-white dark:bg-gray-800\" data-testid={`card-bucket-${bucketName}`}>\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"text-sm font-medium flex items-center justify-between\">\n            <span data-testid={`text-bucket-${bucketName}`}>{label}</span>\n            <Badge variant={bucketName === 'current' ? 'default' : bucketName === 'over90' ? 'destructive' : 'secondary'} data-testid={`badge-count-${bucketName}`}>\n              {bucketData.length}\n            </Badge>\n          </CardTitle>\n          <CardDescription className=\"text-2xl font-bold\" data-testid={`text-amount-${bucketName}`}>\n            {formatAmount(total)}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Progress value={percentage} className=\"mb-2\" data-testid={`progress-${bucketName}`} />\n          <p className=\"text-xs text-muted-foreground\" data-testid={`text-percentage-${bucketName}`}>{percentage}% of total outstanding</p>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-48 animate-pulse\"></div>\n            <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-64 mt-2 animate-pulse\"></div>\n          </div>\n          <div className=\"h-10 bg-gray-200 dark:bg-gray-700 rounded w-32 animate-pulse\"></div>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n          {Array.from({ length: 5 }).map((_, i) => (\n            <div key={i} className=\"h-32 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\"></div>\n          ))}\n        </div>\n        <div className=\"h-64 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\"></div>\n      </div>\n    );\n  }\n\n  if (!agingReport) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-12\">\n          <AlertTriangle className=\"mx-auto h-12 w-12 text-gray-400\" />\n          <h3 className=\"mt-4 text-lg font-semibold text-gray-900 dark:text-gray-100\">No Aging Data Available</h3>\n          <p className=\"mt-2 text-gray-600 dark:text-gray-400\">Unable to load aging report data. Please try again later.</p>\n        </div>\n      </div>\n    );\n  }\n\n  const buckets = [\n    { name: 'current', data: agingReport.buckets.current, total: agingReport.totals.current, label: 'Current (0 days)' },\n    { name: 'days30', data: agingReport.buckets.days30, total: agingReport.totals.days30, label: '1-30 Days' },\n    { name: 'days60', data: agingReport.buckets.days60, total: agingReport.totals.days60, label: '31-60 Days' },\n    { name: 'days90', data: agingReport.buckets.days90, total: agingReport.totals.days90, label: '61-90 Days' },\n    { name: 'over90', data: agingReport.buckets.over90, total: agingReport.totals.over90, label: '90+ Days' }\n  ];\n\n  const isReceivable = reportType === 'receivable';\n\n  return (\n    <div className=\"p-6 space-y-6 bg-gray-50 dark:bg-gray-900 min-h-screen\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-gray-100\" data-testid=\"text-title\">\n            Aging Reports\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-1\" data-testid=\"text-subtitle\">\n            Track outstanding {reportType === 'receivable' ? 'receivables' : 'payables'} by aging periods\n          </p>\n        </div>\n        <Button onClick={exportToCSV} className=\"bg-blue-600 hover:bg-blue-700\" data-testid=\"button-export\">\n          <Download className=\"w-4 h-4 mr-2\" />\n          Export CSV\n        </Button>\n      </div>\n\n      <Tabs value={reportType} onValueChange={(value) => setReportType(value as 'receivable' | 'payable')} data-testid=\"tabs-report-type\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"receivable\" data-testid=\"tab-receivable\">\n            Accounts Receivable\n          </TabsTrigger>\n          <TabsTrigger value=\"payable\" data-testid=\"tab-payable\">\n            Accounts Payable\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value={reportType} className=\"space-y-6\">\n          {/* Summary Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n            {buckets.map(bucket => renderBucketCard(bucket.name, bucket.data, bucket.total, bucket.label))}\n          </div>\n\n          {/* Grand Total */}\n          <Card className=\"bg-white dark:bg-gray-800\">\n            <CardHeader>\n              <CardTitle className=\"text-lg\" data-testid=\"text-grand-total-title\">\n                Total Outstanding {isReceivable ? 'Receivables' : 'Payables'}\n              </CardTitle>\n              <CardDescription className=\"text-3xl font-bold text-blue-600\" data-testid=\"text-grand-total\">\n                {formatAmount(agingReport?.grandTotal || 0)}\n              </CardDescription>\n            </CardHeader>\n          </Card>\n\n          {/* Detailed Table */}\n          <Card className=\"bg-white dark:bg-gray-800\">\n            <CardHeader>\n              <CardTitle data-testid=\"text-details-title\">Transaction Details</CardTitle>\n              <CardDescription>\n                Detailed breakdown of all outstanding {isReceivable ? 'receivables' : 'payables'}\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <Table data-testid=\"table-details\">\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>{isReceivable ? 'Invoice #' : 'Order #'}</TableHead>\n                      <TableHead>{isReceivable ? 'Customer' : 'Supplier'}</TableHead>\n                      <TableHead>{isReceivable ? 'Transaction Date' : 'Order Date'}</TableHead>\n                      <TableHead>Due Date</TableHead>\n                      <TableHead>Outstanding</TableHead>\n                      <TableHead>Days Overdue</TableHead>\n                      <TableHead>Status</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {buckets.map(bucket => \n                      bucket.data.map(item => (\n                        <TableRow key={item.id} data-testid={`row-transaction-${item.id}`}>\n                          <TableCell className=\"font-medium\" data-testid={`text-number-${item.id}`}>\n                            {isReceivable ? (item.invoiceNumber || 'N/A') : (item.orderNumber || 'N/A')}\n                          </TableCell>\n                          <TableCell data-testid={`text-entity-${item.id}`}>\n                            {isReceivable ? (item.customerName || 'Unknown Customer') : (item.supplierName || 'Unknown Supplier')}\n                          </TableCell>\n                          <TableCell data-testid={`text-date-${item.id}`}>\n                            {(() => {\n                              const dateValue = isReceivable ? item.transactionDate : item.orderDate;\n                              return dateValue ? format(new Date(dateValue), 'MMM dd, yyyy') : 'N/A';\n                            })()}\n                          </TableCell>\n                          <TableCell data-testid={`text-due-${item.id}`}>\n                            {item.dueDate ? format(new Date(item.dueDate), 'MMM dd, yyyy') : 'N/A'}\n                          </TableCell>\n                          <TableCell className=\"font-semibold\" data-testid={`text-amount-${item.id}`}>\n                            {formatAmount(item.outstandingAmount || 0, item.currencyCode)}\n                          </TableCell>\n                          <TableCell data-testid={`text-days-${item.id}`}>\n                            {(item.daysOverdue || 0) > 0 ? `${item.daysOverdue || 0} days` : '-'}\n                          </TableCell>\n                          <TableCell data-testid={`badge-status-${item.id}`}>\n                            {(() => {\n                              const daysOverdue = item.daysOverdue || 0;\n                              return (\n                                <Badge variant={getBadgeVariant(daysOverdue)} className=\"flex items-center gap-1 w-fit\">\n                                  {getBadgeIcon(daysOverdue)}\n                                  {daysOverdue <= 0 ? 'Current' : \n                                   daysOverdue <= 30 ? '1-30 Days' :\n                                   daysOverdue <= 60 ? '31-60 Days' :\n                                   daysOverdue <= 90 ? '61-90 Days' : '90+ Days'}\n                                </Badge>\n                              );\n                            })()}\n                          </TableCell>\n                        </TableRow>\n                      ))\n                    )}\n                    {buckets.every(bucket => bucket.data.length === 0) && (\n                      <TableRow>\n                        <TableCell colSpan={7} className=\"text-center py-8 text-gray-500\" data-testid=\"text-no-data\">\n                          No outstanding {isReceivable ? 'receivables' : 'payables'} found\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":14621},"client/src/pages/CashReconciliation.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { SalesTransaction, Expense } from \"@shared/schema\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCurrency } from \"@/contexts/CurrencyContext\";\nimport { formatCompactNumber } from \"@/lib/utils\";\nimport { RefreshCw, CreditCard, TrendingUp, TrendingDown, Printer } from \"lucide-react\";\n\nexport default function CashReconciliation() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const { formatCurrency, currencyConfig } = useCurrency();\n  const [shift, setShift] = useState(\"day\");\n  const [reconciliationDate, setReconciliationDate] = useState(new Date().toISOString().split('T')[0]);\n  const [denominations, setDenominations] = useState([\n    { value: 2000, count: 0, total: 0 },\n    { value: 500, count: 0, total: 0 },\n    { value: 200, count: 0, total: 0 },\n    { value: 100, count: 0, total: 0 },\n    { value: 50, count: 0, total: 0 },\n    { value: 20, count: 0, total: 0 },\n    { value: 10, count: 0, total: 0 },\n    { value: 5, count: 0, total: 0 },\n    { value: 2, count: 0, total: 0 },\n    { value: 1, count: 0, total: 0 }\n  ]);\n\n  // Calculate shift time range\n  const getShiftDateRange = () => {\n    const baseDate = new Date(reconciliationDate);\n    let startTime, endTime;\n\n    if (shift === 'day') {\n      startTime = new Date(baseDate);\n      startTime.setHours(6, 0, 0, 0);\n      endTime = new Date(baseDate);\n      endTime.setHours(18, 0, 0, 0);\n    } else if (shift === 'night') {\n      startTime = new Date(baseDate);\n      startTime.setHours(18, 0, 0, 0);\n      endTime = new Date(baseDate);\n      endTime.setDate(endTime.getDate() + 1);\n      endTime.setHours(6, 0, 0, 0);\n    } else {\n      startTime = new Date(baseDate);\n      startTime.setHours(0, 0, 0, 0);\n      endTime = new Date(baseDate);\n      endTime.setHours(23, 59, 59, 999);\n    }\n\n    return { startTime: startTime.toISOString(), endTime: endTime.toISOString() };\n  };\n\n  const { startTime, endTime } = getShiftDateRange();\n\n  // Fetch sales data for the selected shift\n  const { data: salesTransactions = [], isLoading: salesLoading } = useQuery<SalesTransaction[]>({\n    queryKey: [\"/api/sales\", user?.stationId, startTime, endTime],\n    enabled: !!user?.stationId,\n  });\n\n  // Fetch expenses data for the selected shift  \n  const { data: expenses = [], isLoading: expensesLoading } = useQuery<Expense[]>({\n    queryKey: [\"/api/expenses\", user?.stationId, startTime, endTime],\n    enabled: !!user?.stationId,\n  });\n\n  const isLoading = salesLoading || expensesLoading;\n\n  // Calculate real cash data based on transactions\n  const cashSales = salesTransactions\n    .filter((t: SalesTransaction) => t.paymentMethod === 'cash')\n    .reduce((sum: number, t: SalesTransaction) => sum + parseFloat(t.totalAmount || '0'), 0);\n\n  const cardSales = salesTransactions\n    .filter((t: SalesTransaction) => ['card', 'credit_card', 'debit_card'].includes(t.paymentMethod || ''))\n    .reduce((sum: number, t: SalesTransaction) => sum + parseFloat(t.totalAmount || '0'), 0);\n\n  const creditSales = salesTransactions\n    .filter((t: SalesTransaction) => t.paymentMethod === 'credit')\n    .reduce((sum: number, t: SalesTransaction) => sum + parseFloat(t.totalAmount || '0'), 0);\n\n  const totalExpenses = expenses\n    .reduce((sum: number, e: Expense) => sum + parseFloat(e.amount || '0'), 0);\n\n  const openingBalance = 5000; // This could be from previous day's closing or a settings table\n  const expectedCash = openingBalance + cashSales - totalExpenses;\n  const actualCash = denominations.reduce((sum, d) => sum + d.total, 0);\n  const difference = actualCash - expectedCash;\n\n  const cashData = {\n    openingBalance,\n    expectedCash,\n    actualCash,\n    difference,\n    cashSales,\n    cardSales,\n    creditSales,\n    expenses: totalExpenses\n  };\n\n  // Handle denomination count changes\n  const updateDenomination = (index: number, count: number) => {\n    const newDenominations = [...denominations];\n    newDenominations[index].count = Math.max(0, count);\n    newDenominations[index].total = newDenominations[index].value * newDenominations[index].count;\n    setDenominations(newDenominations);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/3 mb-4\"></div>\n          <div className=\"h-4 bg-muted rounded w-1/2 mb-8\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"h-24 bg-muted rounded\"></div>\n            ))}\n          </div>\n          <div className=\"h-96 bg-muted rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6 fade-in\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-2xl font-semibold text-card-foreground\">Cash Reconciliation</h3>\n          <p className=\"text-muted-foreground\">Daily cash balancing and shift-wise reporting</p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button onClick={() => {\n            toast({\n              title: \"Reconciliation Started\",\n              description: \"Cash reconciliation process has been initiated\",\n            });\n          }} data-testid=\"button-start-reconciliation\">\n            <RefreshCw className=\"mr-2 h-4 w-4\" /> Start Reconciliation\n          </Button>\n          <Button variant=\"outline\" onClick={() => {\n            const printWindow = window.open('', '_blank');\n            if (!printWindow) return;\n\n            const htmlContent = `\n              <!DOCTYPE html>\n              <html>\n                <head>\n                  <title>Cash Reconciliation Report</title>\n                  <style>\n                    @page { margin: 0.5in; size: A4; }\n                    body { font-family: Arial, sans-serif; line-height: 1.4; color: #000; margin: 0; padding: 20px; }\n                    .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 20px; }\n                    .summary { display: grid; grid-template-columns: repeat(2, 1fr); gap: 20px; margin-bottom: 30px; }\n                    .summary-item { padding: 15px; background: #f3f4f6; border-radius: 8px; }\n                    .amount { font-size: 18px; font-weight: bold; }\n                  </style>\n                </head>\n                <body>\n                  <div class=\"header\">\n                    <h1>Cash Reconciliation Report</h1>\n                    <p>${shift.charAt(0).toUpperCase() + shift.slice(1)} Shift - ${new Date(reconciliationDate).toLocaleDateString()}</p>\n                  </div>\n                  <div class=\"summary\">\n                    <div class=\"summary-item\">\n                      <div>Opening Balance</div>\n                      <div class=\"amount\">${formatCurrency(cashData.openingBalance)}</div>\n                    </div>\n                    <div class=\"summary-item\">\n                      <div>Expected Cash</div>\n                      <div class=\"amount\">${formatCurrency(cashData.expectedCash)}</div>\n                    </div>\n                    <div class=\"summary-item\">\n                      <div>Actual Cash</div>\n                      <div class=\"amount\">${formatCurrency(cashData.actualCash)}</div>\n                    </div>\n                    <div class=\"summary-item\">\n                      <div>Difference</div>\n                      <div class=\"amount\">${formatCurrency(Math.abs(cashData.difference))}</div>\n                    </div>\n                  </div>\n                </body>\n              </html>\n            `;\n\n            printWindow.document.write(htmlContent);\n            printWindow.document.close();\n            printWindow.onload = () => {\n              setTimeout(() => {\n                printWindow.print();\n                printWindow.close();\n              }, 500);\n            };\n          }} data-testid=\"button-print-report\">\n            <Printer className=\"mr-2 h-4 w-4\" /> Print Report\n          </Button>\n        </div>\n      </div>\n\n      {/* Reconciliation Controls */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-card-foreground mb-2\">Shift</label>\n              <Select value={shift} onValueChange={setShift}>\n                <SelectTrigger data-testid=\"select-shift\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"day\">Day Shift (6 AM - 6 PM)</SelectItem>\n                  <SelectItem value=\"night\">Night Shift (6 PM - 6 AM)</SelectItem>\n                  <SelectItem value=\"full\">Full Day (24 Hours)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-card-foreground mb-2\">Date</label>\n              <Input\n                type=\"date\"\n                value={reconciliationDate}\n                onChange={(e) => setReconciliationDate(e.target.value)}\n                data-testid=\"input-reconciliation-date\"\n              />\n            </div>\n            <div className=\"flex items-end\">\n              <Button className=\"w-full\" data-testid=\"button-load-data\">\n                Load Shift Data\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Cash Summary */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card className=\"bg-gradient-to-br from-green-500 to-green-600 text-white border-0\">\n          <CardContent className=\"p-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold\" data-testid=\"opening-balance\">{formatCurrency(cashData.openingBalance)}</div>\n              <div className=\"text-sm text-green-100\">Opening Balance</div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card className=\"bg-gradient-to-br from-blue-500 to-blue-600 text-white border-0\">\n          <CardContent className=\"p-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold\" data-testid=\"expected-cash\">{formatCurrency(cashData.expectedCash)}</div>\n              <div className=\"text-sm text-blue-100\">Expected Cash</div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card className=\"bg-gradient-to-br from-purple-500 to-purple-600 text-white border-0\">\n          <CardContent className=\"p-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold\" data-testid=\"actual-cash\">{formatCurrency(cashData.actualCash)}</div>\n              <div className=\"text-sm text-purple-100\">Actual Cash</div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card className=\"bg-gradient-to-br from-red-500 to-red-600 text-white border-0\">\n          <CardContent className=\"p-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold\" data-testid=\"cash-difference\">{formatCurrency(Math.abs(cashData.difference))}</div>\n              <div className=\"text-sm text-red-100\">\n                {cashData.difference >= 0 ? 'Excess' : 'Shortage'}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Cash Counting */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Cash Denomination Count</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {denominations.map((denom, index) => (\n                <div key={denom.value} className=\"grid grid-cols-4 gap-4 items-center\">\n                  <div className=\"font-medium\">{currencyConfig.symbol}{denom.value}</div>\n                  <div className=\"text-center\">√ó</div>\n                  <Input\n                    type=\"number\"\n                    value={denom.count}\n                    onChange={(e) => updateDenomination(index, parseInt(e.target.value) || 0)}\n                    className=\"text-center\"\n                    data-testid={`denom-count-${denom.value}`}\n                  />\n                  <div className=\"text-right font-semibold\" data-testid={`denom-total-${denom.value}`}>\n                    {formatCurrency(denom.total)}\n                  </div>\n                </div>\n              ))}\n              <div className=\"border-t pt-3 mt-4\">\n                <div className=\"grid grid-cols-4 gap-4 font-bold\">\n                  <div>Total Cash:</div>\n                  <div></div>\n                  <div></div>\n                  <div className=\"text-right text-lg\" data-testid=\"total-counted-cash\">\n                    {formatCurrency(cashData.actualCash)}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Sales Summary */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Shift Sales Summary</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center p-3 bg-green-50 rounded-md\">\n                <span className=\"font-medium\">Cash Sales</span>\n                <span className=\"text-lg font-bold text-green-600\" data-testid=\"cash-sales\">\n                  {formatCurrency(cashData.cashSales)}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center p-3 bg-blue-50 rounded-md\">\n                <span className=\"font-medium\">Card Sales</span>\n                <span className=\"text-lg font-bold text-blue-600\" data-testid=\"card-sales\">\n                  {formatCurrency(cashData.cardSales)}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center p-3 bg-orange-50 rounded-md\">\n                <span className=\"font-medium\">Credit Sales</span>\n                <span className=\"text-lg font-bold text-orange-600\" data-testid=\"credit-sales\">\n                  {formatCurrency(cashData.creditSales)}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center p-3 bg-red-50 rounded-md\">\n                <span className=\"font-medium\">Expenses Paid</span>\n                <span className=\"text-lg font-bold text-red-600\" data-testid=\"expenses-paid\">\n                  {formatCurrency(cashData.expenses)}\n                </span>\n              </div>\n\n              <div className=\"border-t pt-4 mt-6\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-lg font-semibold\">Net Cash Movement:</span>\n                  <span className=\"text-xl font-bold text-primary\" data-testid=\"net-cash-movement\">\n                    {formatCurrency(cashData.cashSales - cashData.expenses)}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Reconciliation Status */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Reconciliation Status</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-between p-4 bg-muted rounded-lg\">\n            <div>\n              <div className=\"font-semibold text-lg\">\n                Cash Reconciliation - {shift.charAt(0).toUpperCase() + shift.slice(1)} Shift\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                Date: {new Date(reconciliationDate).toLocaleDateString('en-IN')}\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <Badge\n                variant={Math.abs(cashData.difference) <= 100 ? 'default' : 'destructive'}\n                className={Math.abs(cashData.difference) <= 100 ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}\n                data-testid=\"reconciliation-status\"\n              >\n                {Math.abs(cashData.difference) <= 100 ? 'Balanced' : 'Variance Detected'}\n              </Badge>\n              {cashData.difference !== 0 && (\n                <div className={`mt-2 font-semibold ${cashData.difference > 0 ? 'text-green-600' : 'text-red-600'}`}>\n                  {cashData.difference > 0 ? 'Excess: ' : 'Shortage: '}\n                  {formatCurrency(Math.abs(cashData.difference))}\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div className=\"mt-4 flex justify-end space-x-2\">\n            <Button variant=\"outline\" onClick={() => {\n              localStorage.setItem('cashReconciliationDraft', JSON.stringify({\n                shift,\n                reconciliationDate,\n                denominations,\n                cashData\n              }));\n              toast({\n                title: \"Draft Saved\",\n                description: \"Cash reconciliation draft has been saved locally\",\n              });\n            }} data-testid=\"button-save-draft\">\n              Save Draft\n            </Button>\n            <Button onClick={() => {\n              toast({\n                title: \"Reconciliation Completed\",\n                description: `Cash reconciliation for ${shift} shift completed successfully`,\n              });\n            }} data-testid=\"button-complete-reconciliation\">\n              Complete Reconciliation\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":18090},"client/src/pages/CustomerManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport type { Customer } from \"@shared/schema\";\nimport { insertCustomerSchema } from \"@shared/schema\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCurrency } from \"@/contexts/CurrencyContext\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/api\";\nimport { Eye, Edit, CreditCard, Trash2 } from \"lucide-react\";\n\nimport { DeleteConfirmation } from \"@/components/ui/delete-confirmation\";\n\n\nexport default function CustomerManagement() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { user } = useAuth();\n  const { currencyConfig } = useCurrency() || { currencyConfig: { symbol: '‚Çπ' } };\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterType, setFilterType] = useState(\"all\");\n  const [open, setOpen] = useState(false);\n  const [viewDialogOpen, setViewDialogOpen] = useState(false);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [paymentDialogOpen, setPaymentDialogOpen] = useState(false);\n  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null);\n  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);\n  const [customerToDelete, setCustomerToDelete] = useState<Customer | null>(null);\n\n\n  // Edit form\n  const editForm = useForm({\n    resolver: zodResolver(insertCustomerSchema),\n    defaultValues: {\n      name: \"\",\n      type: \"walk-in\",\n      contactPhone: \"\",\n      contactEmail: \"\",\n      address: \"\",\n      gstNumber: \"\",\n      creditLimit: \"0\",\n      outstandingAmount: \"0\",\n    },\n  });\n\n  // Payment form\n  const paymentForm = useForm({\n    resolver: zodResolver(z.object({\n      amount: z.string().min(1, \"Amount is required\"),\n      paymentMethod: z.enum(['cash', 'card']),\n      referenceNumber: z.string().optional(),\n      notes: z.string().optional(),\n    })),\n    defaultValues: {\n      amount: \"\",\n      paymentMethod: \"cash\" as const,\n      referenceNumber: \"\",\n      notes: \"\",\n    },\n  });\n\n  const form = useForm({\n    resolver: zodResolver(insertCustomerSchema),\n    defaultValues: {\n      name: \"\",\n      type: \"walk-in\" as const,\n      contactPhone: \"\",\n      contactEmail: \"\",\n      address: \"\",\n      gstNumber: \"\",\n      creditLimit: \"0\",\n      outstandingAmount: \"0\",\n    },\n  });\n\n  const updateCustomerMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await apiRequest(\"PUT\", `/api/customers/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Customer updated\",\n        description: \"Customer information has been updated successfully\",\n      });\n      setEditDialogOpen(false);\n      editForm.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update customer\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const recordPaymentMutation = useMutation({\n    mutationFn: async (paymentData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/payments\", paymentData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Payment recorded\",\n        description: \"Payment has been recorded successfully\",\n      });\n      setPaymentDialogOpen(false);\n      paymentForm.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/payments\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to record payment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createCustomerMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/customers\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Customer created\",\n        description: \"New customer has been added successfully\",\n      });\n      setOpen(false);\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create customer\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteCustomerMutation = useMutation({\n    mutationFn: async (customerId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/customers/${customerId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Customer deleted\",\n        description: \"Customer has been deleted successfully\",\n      });\n      setDeleteConfirmOpen(false);\n      setCustomerToDelete(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete customer\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    createCustomerMutation.mutate(data);\n  };\n\n  const handleViewCustomer = (customer: Customer) => {\n    setSelectedCustomer(customer);\n    setViewDialogOpen(true);\n  };\n\n  const handleEditCustomer = (customer: Customer) => {\n    setSelectedCustomer(customer);\n    editForm.reset({\n      name: customer.name,\n      type: customer.type,\n      contactPhone: customer.contactPhone || \"\",\n      contactEmail: customer.contactEmail || \"\",\n      address: customer.address || \"\",\n      gstNumber: customer.gstNumber || \"\",\n      creditLimit: customer.creditLimit || \"0\",\n      outstandingAmount: customer.outstandingAmount || \"0\",\n    });\n    setEditDialogOpen(true);\n  };\n\n  const handlePaymentCustomer = (customer: Customer) => {\n    setSelectedCustomer(customer);\n    paymentForm.reset({\n      amount: \"\",\n      paymentMethod: \"cash\" as const,\n      referenceNumber: \"\",\n      notes: \"\",\n    });\n    setPaymentDialogOpen(true);\n  };\n\n  const onEditSubmit = (data: any) => {\n    if (!selectedCustomer) return;\n    updateCustomerMutation.mutate({ id: selectedCustomer.id, data });\n  };\n\n  const onPaymentSubmit = (data: any) => {\n    if (!selectedCustomer || !user) return;\n\n    if (!user.id) {\n      toast({\n        title: \"Error\",\n        description: \"User authentication required to record payment\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const paymentData = {\n      customerId: selectedCustomer.id,\n      amount: data.amount,\n      paymentMethod: data.paymentMethod,\n      referenceNumber: data.referenceNumber,\n      notes: data.notes,\n      type: \"receivable\",\n      stationId: user.stationId || \"default-station\",\n      userId: user.id,\n      currencyCode: \"PKR\",\n    };\n    recordPaymentMutation.mutate(paymentData);\n  };\n\n  const handleDeleteCustomer = (customer: Customer) => {\n    setCustomerToDelete(customer);\n    setDeleteConfirmOpen(true);\n  };\n\n  const confirmDeleteCustomer = () => {\n    if (customerToDelete) {\n      deleteCustomerMutation.mutate(customerToDelete.id);\n    }\n  };\n\n  const { data: customers = [], isLoading } = useQuery<Customer[]>({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const filteredCustomers = customers.filter((customer: Customer) => {\n    const matchesSearch = customer.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         customer.gstNumber?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesType = filterType === \"all\" || customer.type === filterType;\n    return matchesSearch && matchesType;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/3 mb-4\"></div>\n          <div className=\"h-4 bg-muted rounded w-1/2 mb-8\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"h-20 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const creditCustomers = customers.filter((c: Customer) => c.type === 'credit').length;\n  const totalOutstanding = customers.reduce((sum: number, c: Customer) => sum + parseFloat(c.outstandingAmount || '0'), 0);\n  const overdueAccounts = customers.filter((c: Customer) => parseFloat(c.outstandingAmount || '0') > 0).length;\n\n  return (\n    <div className=\"space-y-6 fade-in\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-2xl font-semibold text-card-foreground\">Customer Account Management</h3>\n          <p className=\"text-muted-foreground\">Manage customer profiles, credit accounts, and payment history</p>\n        </div>\n        <Dialog open={open} onOpenChange={setOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-customer\">\n              + Add New Customer\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[500px] max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Add New Customer</DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Customer Name *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter customer name\" {...field} data-testid=\"input-customer-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"type\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Customer Type *</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-customer-type\">\n                            <SelectValue placeholder=\"Select customer type\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"walk-in\">Walk-in</SelectItem>\n                          <SelectItem value=\"credit\">Credit Customer</SelectItem>\n                          <SelectItem value=\"fleet\">Fleet Customer</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"contactPhone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone Number</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter phone number\" {...field} data-testid=\"input-customer-phone\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"contactEmail\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email Address</FormLabel>\n                        <FormControl>\n                          <Input type=\"email\" placeholder=\"Enter email address\" {...field} data-testid=\"input-customer-email\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <FormField\n                  control={form.control}\n                  name=\"address\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Address</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter address\" {...field} data-testid=\"input-customer-address\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"gstNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>GST Number</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter GST number\" {...field} data-testid=\"input-customer-gst\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"creditLimit\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Credit Limit ({currencyConfig.symbol})</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" placeholder=\"0\" {...field} data-testid=\"input-customer-credit-limit\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <div className=\"flex justify-end space-x-2 pt-4\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setOpen(false)} data-testid=\"button-cancel\">\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createCustomerMutation.isPending} data-testid=\"button-submit-customer\">\n                    {createCustomerMutation.isPending ? \"Creating...\" : \"Create Customer\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Customer Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold text-primary\" data-testid=\"total-customers\">{customers.length}</div>\n            <div className=\"text-sm text-muted-foreground\">Total Customers</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold text-green-600\" data-testid=\"credit-customers\">{creditCustomers}</div>\n            <div className=\"text-sm text-muted-foreground\">Credit Customers</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold text-orange-600\" data-testid=\"outstanding-total\">\n              ‚Çπ{totalOutstanding.toLocaleString()}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Outstanding Amount</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold text-red-600\" data-testid=\"overdue-accounts\">{overdueAccounts}</div>\n            <div className=\"text-sm text-muted-foreground\">Overdue Accounts</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Delete Confirmation Dialog */}\n      <DeleteConfirmation\n        isOpen={deleteConfirmOpen}\n        onClose={() => setDeleteConfirmOpen(false)}\n        onConfirm={confirmDeleteCustomer}\n        title=\"Delete Customer\"\n        description=\"Are you sure you want to delete this customer? This action cannot be undone and will remove all customer data and transaction history.\"\n        itemName={customerToDelete?.name || \"customer\"}\n        isLoading={deleteCustomerMutation.isPending}\n      />\n\n      {/* Customer Data Table */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Customer Accounts</CardTitle>\n            <div className=\"flex items-center space-x-2\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search customers...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-64\"\n                data-testid=\"input-search-customers\"\n              />\n              <Select value={filterType} onValueChange={setFilterType}>\n                <SelectTrigger className=\"w-40\" data-testid=\"select-filter-type\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Customers</SelectItem>\n                  <SelectItem value=\"credit\">Credit Customers</SelectItem>\n                  <SelectItem value=\"walk-in\">Cash Customers</SelectItem>\n                  <SelectItem value=\"fleet\">Fleet Customers</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-muted\">\n                <tr>\n                  <th className=\"text-left p-3 font-medium\">Customer</th>\n                  <th className=\"text-left p-3 font-medium\">Type</th>\n                  <th className=\"text-right p-3 font-medium\">Credit Limit</th>\n                  <th className=\"text-right p-3 font-medium\">Outstanding</th>\n                  <th className=\"text-center p-3 font-medium\">Last Transaction</th>\n                  <th className=\"text-center p-3 font-medium\">Status</th>\n                  <th className=\"text-center p-3 font-medium\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {filteredCustomers.map((customer: Customer, index: number) => (\n                  <tr key={customer.id} className=\"border-b border-border hover:bg-muted/50\">\n                    <td className=\"p-3\">\n                      <div className=\"font-medium text-card-foreground\" data-testid={`customer-name-${index}`}>\n                        {customer.name}\n                      </div>\n                      {customer.gstNumber && (\n                        <div className=\"text-sm text-muted-foreground\">GST: {customer.gstNumber}</div>\n                      )}\n                    </td>\n                    <td className=\"p-3\">\n                      <Badge\n                        variant={customer.type === 'credit' ? 'default' : 'secondary'}\n                        data-testid={`customer-type-${index}`}\n                      >\n                        {customer.type}\n                      </Badge>\n                    </td>\n                    <td className=\"p-3 text-right\" data-testid={`credit-limit-${index}`}>\n                      {customer.type === 'credit' ? `‚Çπ${parseFloat(customer.creditLimit || '0').toLocaleString()}` : '-'}\n                    </td>\n                    <td className=\"p-3 text-right\">\n                      <span\n                        className={`font-semibold ${parseFloat(customer.outstandingAmount || '0') > 0 ? 'text-red-600' : 'text-green-600'}`}\n                        data-testid={`outstanding-${index}`}\n                      >\n                        {parseFloat(customer.outstandingAmount || '0') > 0\n                          ? `‚Çπ${parseFloat(customer.outstandingAmount || '0').toLocaleString()}`\n                          : '-'}\n                      </span>\n                    </td>\n                    <td className=\"p-3 text-center text-sm\">2 hours ago</td>\n                    <td className=\"p-3 text-center\">\n                      <Badge\n                        variant={customer.isActive ? 'default' : 'destructive'}\n                        className={customer.isActive ? 'bg-green-100 text-green-800' : ''}\n                      >\n                        {customer.isActive ? 'Active' : 'Inactive'}\n                      </Badge>\n                    </td>\n                    <td className=\"p-3 text-center\">\n                      <div className=\"flex items-center justify-center space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleViewCustomer(customer)}\n                            className=\"p-2 text-blue-600 hover:text-blue-800 hover:bg-blue-50\"\n                            data-testid={`button-view-customer-${index}`}\n                            title=\"View Details\"\n                          >\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleEditCustomer(customer)}\n                            className=\"p-2 text-green-600 hover:text-green-800 hover:bg-green-50\"\n                            data-testid={`button-edit-customer-${index}`}\n                            title=\"Edit Customer\"\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          {customer.type === 'credit' && parseFloat(customer.outstandingAmount || '0') > 0 && (\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handlePaymentCustomer(customer)}\n                              className=\"p-2 text-orange-600 hover:text-orange-800 hover:bg-orange-50\"\n                              data-testid={`button-payment-customer-${index}`}\n                              title=\"Record Payment\"\n                            >\n                              <CreditCard className=\"w-4 h-4\" />\n                            </Button>\n                          )}\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleDeleteCustomer(customer)}\n                            className=\"p-2 text-red-600 hover:text-red-800 hover:bg-red-50\"\n                            data-testid={`button-delete-customer-${index}`}\n                            title=\"Delete Customer\"\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                    </td>\n                  </tr>\n                ))}\n                {filteredCustomers.length === 0 && (\n                  <tr>\n                    <td colSpan={7} className=\"p-8 text-center text-muted-foreground\">\n                      No customers found matching your criteria.\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* View Customer Dialog */}\n      <Dialog open={viewDialogOpen} onOpenChange={setViewDialogOpen}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>Customer Details</DialogTitle>\n          </DialogHeader>\n          {selectedCustomer && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium\">Name</label>\n                  <p className=\"text-sm text-muted-foreground\">{selectedCustomer.name}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Type</label>\n                  <p className=\"text-sm text-muted-foreground\">{selectedCustomer.type}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Phone</label>\n                  <p className=\"text-sm text-muted-foreground\">{selectedCustomer.contactPhone || 'N/A'}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Email</label>\n                  <p className=\"text-sm text-muted-foreground\">{selectedCustomer.contactEmail || 'N/A'}</p>\n                </div>\n                <div className=\"col-span-2\">\n                  <label className=\"text-sm font-medium\">Address</label>\n                  <p className=\"text-sm text-muted-foreground\">{selectedCustomer.address || 'N/A'}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Credit Limit</label>\n                  <p className=\"text-sm text-muted-foreground\">‚Çπ{parseFloat(selectedCustomer.creditLimit || '0').toLocaleString()}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Outstanding</label>\n                  <p className=\"text-sm text-muted-foreground\">‚Çπ{parseFloat(selectedCustomer.outstandingAmount || '0').toLocaleString()}</p>\n                </div>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Customer Dialog */}\n      <Dialog open={editDialogOpen} onOpenChange={setEditDialogOpen}>\n        <DialogContent className=\"sm:max-w-[500px] max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Edit Customer</DialogTitle>\n          </DialogHeader>\n          <Form {...editForm}>\n            <form onSubmit={editForm.handleSubmit(onEditSubmit)} className=\"space-y-4\">\n              <FormField\n                control={editForm.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Customer Name *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter customer name\" {...field} data-testid=\"input-edit-customer-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={editForm.control}\n                name=\"type\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Customer Type *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-edit-customer-type\">\n                          <SelectValue placeholder=\"Select customer type\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"walk-in\">Walk-in</SelectItem>\n                        <SelectItem value=\"credit\">Credit Customer</SelectItem>\n                        <SelectItem value=\"fleet\">Fleet Customer</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={editForm.control}\n                  name=\"contactPhone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Phone Number</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter phone number\" {...field} data-testid=\"input-edit-customer-phone\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"contactEmail\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email Address</FormLabel>\n                      <FormControl>\n                        <Input type=\"email\" placeholder=\"Enter email address\" {...field} data-testid=\"input-edit-customer-email\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              <FormField\n                control={editForm.control}\n                name=\"address\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Address</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter address\" {...field} data-testid=\"input-edit-customer-address\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={editForm.control}\n                  name=\"gstNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>GST Number</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter GST number\" {...field} data-testid=\"input-edit-customer-gst\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"creditLimit\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Credit Limit ({currencyConfig.symbol})</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" placeholder=\"0\" {...field} data-testid=\"input-edit-customer-credit-limit\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setEditDialogOpen(false)} data-testid=\"button-cancel-edit\">\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={updateCustomerMutation.isPending} data-testid=\"button-update-customer\">\n                  {updateCustomerMutation.isPending ? \"Updating...\" : \"Update Customer\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Payment Dialog */}\n      <Dialog open={paymentDialogOpen} onOpenChange={setPaymentDialogOpen}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>Record Payment</DialogTitle>\n            {selectedCustomer && (\n              <p className=\"text-sm text-muted-foreground\">\n                Recording payment for {selectedCustomer.name} (Outstanding: ‚Çπ{parseFloat(selectedCustomer.outstandingAmount || '0').toLocaleString()})\n              </p>\n            )}\n          </DialogHeader>\n          <Form {...paymentForm}>\n            <form onSubmit={paymentForm.handleSubmit(onPaymentSubmit)} className=\"space-y-4\">\n              <FormField\n                control={paymentForm.control}\n                name=\"amount\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Payment Amount *</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" step=\"0.01\" placeholder=\"Enter payment amount\" {...field} data-testid=\"input-payment-amount\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={paymentForm.control}\n                name=\"paymentMethod\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Payment Method *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-payment-method\">\n                          <SelectValue placeholder=\"Select payment method\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"cash\">Cash</SelectItem>\n                        <SelectItem value=\"card\">Card</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={paymentForm.control}\n                name=\"referenceNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Reference Number</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter reference number (optional)\" {...field} data-testid=\"input-reference-number\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={paymentForm.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notes</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Add any notes (optional)\" {...field} data-testid=\"input-payment-notes\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setPaymentDialogOpen(false)} data-testid=\"button-cancel-payment\">\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={recordPaymentMutation.isPending} data-testid=\"button-record-payment\">\n                  {recordPaymentMutation.isPending ? \"Recording...\" : \"Record Payment\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":35466},"client/src/pages/DailyReports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useCurrency } from \"@/contexts/CurrencyContext\";\nimport { formatAmount } from \"@/lib/currency\";\nimport { formatCompactNumber } from \"@/lib/utils\";\nimport { \n  Calendar as CalendarIcon,\n  TrendingUp,\n  TrendingDown,\n  DollarSign,\n  CreditCard,\n  Banknote,\n  Receipt,\n  Download,\n  RefreshCw,\n  PieChart,\n  BarChart3\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { cn } from \"@/lib/utils\";\n\ninterface SalesByMethod {\n  paymentMethod: string;\n  totalAmount: string;\n  count: number;\n  currencyCode: string;\n}\n\ninterface ExpensesByCategory {\n  category: string;\n  totalAmount: string;\n  currencyCode: string;\n}\n\ninterface DailyReportData {\n  date: string;\n  salesByMethod: SalesByMethod[];\n  expenses: ExpensesByCategory[];\n}\n\nexport default function DailyReports() {\n  const { user } = useAuth();\n  const { formatCurrency } = useCurrency();\n  const [selectedDate, setSelectedDate] = useState<Date>(new Date());\n\n  const { data: dailyReport, isLoading, refetch } = useQuery<DailyReportData>({\n    queryKey: [`/api/reports/daily/${user?.stationId}?date=${format(selectedDate, 'yyyy-MM-dd')}`],\n    enabled: !!user?.stationId,\n    refetchInterval: 30000, // Refresh every 30 seconds for near real-time data\n  });\n\n  const handleDateSelect = (date: Date | undefined) => {\n    if (date) {\n      setSelectedDate(date);\n    }\n  };\n\n  const handleRefresh = () => {\n    refetch();\n  };\n\n  const handleExport = () => {\n    // Create CSV export\n    if (!dailyReport) return;\n    \n    const csvContent = [\n      ['Daily Report - ' + format(selectedDate, 'PPP')],\n      [''],\n      ['Sales by Payment Method'],\n      ['Method', 'Amount', 'Count', 'Currency'],\n      ...dailyReport.salesByMethod.map(item => [\n        item.paymentMethod,\n        item.totalAmount,\n        item.count.toString(),\n        item.currencyCode\n      ]),\n      [''],\n      ['Expenses by Category'],\n      ['Category', 'Amount', 'Currency'],\n      ...dailyReport.expenses.map(item => [\n        item.category,\n        item.totalAmount,\n        item.currencyCode\n      ])\n    ].map(row => row.join(',')).join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `daily-report-${format(selectedDate, 'yyyy-MM-dd')}.csv`;\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  const getPaymentMethodIcon = (method: string) => {\n    switch (method.toLowerCase()) {\n      case 'cash':\n        return <Banknote className=\"w-5 h-5 text-green-500\" />;\n      case 'card':\n        return <CreditCard className=\"w-5 h-5 text-blue-500\" />;\n      case 'credit':\n        return <Receipt className=\"w-5 h-5 text-orange-500\" />;\n      case 'fleet':\n        return <DollarSign className=\"w-5 h-5 text-purple-500\" />;\n      default:\n        return <DollarSign className=\"w-5 h-5 text-gray-500\" />;\n    }\n  };\n\n  const totalSales = dailyReport?.salesByMethod.reduce(\n    (sum, item) => sum + parseFloat(item.totalAmount || '0'), 0\n  ) || 0;\n\n  const totalTransactions = dailyReport?.salesByMethod.reduce(\n    (sum, item) => sum + (item.count || 0), 0\n  ) || 0;\n\n  const totalExpenses = dailyReport?.expenses.reduce(\n    (sum, item) => sum + parseFloat(item.totalAmount || '0'), 0\n  ) || 0;\n\n  const netProfit = totalSales - totalExpenses;\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/3 mb-4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8\">\n            {[1, 2, 3, 4].map((i) => (\n              <div key={i} className=\"h-32 bg-muted rounded\"></div>\n            ))}\n          </div>\n          <div className=\"h-96 bg-muted rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"page-title\">Daily Reports</h1>\n          <p className=\"text-muted-foreground\">\n            Daily sales and expense breakdown for {format(selectedDate, 'PPP')}\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button\n            variant=\"outline\"\n            onClick={handleRefresh}\n            size=\"sm\"\n            data-testid=\"button-refresh\"\n          >\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            Refresh\n          </Button>\n          <Button\n            variant=\"outline\"\n            onClick={handleExport}\n            size=\"sm\"\n            disabled={!dailyReport}\n            data-testid=\"button-export\"\n          >\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export CSV\n          </Button>\n        </div>\n      </div>\n\n      {/* Date Selector */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <CalendarIcon className=\"w-5 h-5\" />\n            Report Date\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Popover>\n            <PopoverTrigger asChild>\n              <Button\n                variant=\"outline\"\n                className={cn(\n                  \"w-[240px] justify-start text-left font-normal\",\n                  !selectedDate && \"text-muted-foreground\"\n                )}\n                data-testid=\"button-date-picker\"\n              >\n                <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                {selectedDate ? format(selectedDate, \"PPP\") : <span>Pick a date</span>}\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"w-auto p-0\" align=\"start\">\n              <Calendar\n                mode=\"single\"\n                selected={selectedDate}\n                onSelect={handleDateSelect}\n                disabled={(date) =>\n                  date > new Date() || date < new Date(\"2023-01-01\")\n                }\n                initialFocus\n                data-testid=\"calendar-picker\"\n              />\n            </PopoverContent>\n          </Popover>\n        </CardContent>\n      </Card>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Sales</p>\n                <p className=\"text-3xl font-bold text-green-600\" data-testid=\"total-sales\">\n                  {formatCurrency(totalSales)}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">{totalTransactions} transactions</p>\n              </div>\n              <TrendingUp className=\"w-8 h-8 text-green-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Expenses</p>\n                <p className=\"text-3xl font-bold text-red-600\" data-testid=\"total-expenses\">\n                  {formatCurrency(totalExpenses)}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Daily operational costs</p>\n              </div>\n              <TrendingDown className=\"w-8 h-8 text-red-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Net Profit</p>\n                <p className={`text-3xl font-bold ${netProfit >= 0 ? 'text-green-600' : 'text-red-600'}`} data-testid=\"net-profit\">\n                  {formatCurrency(netProfit)}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Sales - Expenses</p>\n              </div>\n              <DollarSign className={`w-8 h-8 ${netProfit >= 0 ? 'text-green-500' : 'text-red-500'}`} />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Avg Transaction</p>\n                <p className=\"text-3xl font-bold text-blue-600\" data-testid=\"avg-transaction\">\n                  {formatCurrency(totalTransactions > 0 ? totalSales / totalTransactions : 0)}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Per transaction</p>\n              </div>\n              <BarChart3 className=\"w-8 h-8 text-blue-500\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Sales by Payment Method */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <PieChart className=\"w-5 h-5\" />\n              Sales by Payment Method\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {dailyReport?.salesByMethod && dailyReport.salesByMethod.length > 0 ? (\n              dailyReport.salesByMethod.map((sale, index) => {\n                const percentage = totalSales > 0 ? (parseFloat(sale.totalAmount || '0') / totalSales) * 100 : 0;\n                return (\n                  <div key={`${sale.paymentMethod}-${sale.currencyCode}`} className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        {getPaymentMethodIcon(sale.paymentMethod)}\n                        <span className=\"font-medium capitalize\" data-testid={`payment-method-${index}`}>\n                          {sale.paymentMethod}\n                        </span>\n                        <Badge variant=\"outline\" data-testid={`payment-currency-${index}`}>\n                          {sale.currencyCode}\n                        </Badge>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-semibold\" data-testid={`payment-amount-${index}`}>\n                          {formatAmount(parseFloat(sale.totalAmount || '0'), sale.currencyCode as any)}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\" data-testid={`payment-count-${index}`}>\n                          {sale.count} transactions\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"w-full bg-muted rounded-full h-2\">\n                      <div\n                        className=\"bg-primary h-2 rounded-full transition-all duration-300\"\n                        style={{ width: `${percentage}%` }}\n                        data-testid={`payment-progress-${index}`}\n                      ></div>\n                    </div>\n                    <div className=\"text-xs text-muted-foreground text-right\">\n                      {percentage.toFixed(1)}% of total sales\n                    </div>\n                  </div>\n                );\n              })\n            ) : (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <PieChart className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                <p>No sales data for this date</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Expenses by Category */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingDown className=\"w-5 h-5\" />\n              Expenses by Category\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {dailyReport?.expenses && dailyReport.expenses.length > 0 ? (\n              dailyReport.expenses.map((expense, index) => {\n                const percentage = totalExpenses > 0 ? (parseFloat(expense.totalAmount || '0') / totalExpenses) * 100 : 0;\n                return (\n                  <div key={`${expense.category}-${expense.currencyCode}`} className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-4 h-4 bg-red-500 rounded-sm\"></div>\n                        <span className=\"font-medium capitalize\" data-testid={`expense-category-${index}`}>\n                          {expense.category}\n                        </span>\n                        <Badge variant=\"outline\" data-testid={`expense-currency-${index}`}>\n                          {expense.currencyCode}\n                        </Badge>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-semibold text-red-600\" data-testid={`expense-amount-${index}`}>\n                          {formatAmount(parseFloat(expense.totalAmount || '0'), expense.currencyCode as any)}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"w-full bg-muted rounded-full h-2\">\n                      <div\n                        className=\"bg-red-500 h-2 rounded-full transition-all duration-300\"\n                        style={{ width: `${percentage}%` }}\n                        data-testid={`expense-progress-${index}`}\n                      ></div>\n                    </div>\n                    <div className=\"text-xs text-muted-foreground text-right\">\n                      {percentage.toFixed(1)}% of total expenses\n                    </div>\n                  </div>\n                );\n              })\n            ) : (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <TrendingDown className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                <p>No expenses recorded for this date</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Detailed Breakdown */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Daily Summary</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {/* Sales Summary */}\n            <div className=\"space-y-4\">\n              <h3 className=\"font-semibold text-lg flex items-center gap-2\">\n                <TrendingUp className=\"w-5 h-5 text-green-500\" />\n                Sales Summary\n              </h3>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Total Revenue:</span>\n                  <span className=\"font-medium text-green-600\" data-testid=\"summary-revenue\">\n                    {formatAmount(totalSales)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Total Transactions:</span>\n                  <span className=\"font-medium\" data-testid=\"summary-transactions\">\n                    {totalTransactions}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Average Sale:</span>\n                  <span className=\"font-medium\" data-testid=\"summary-avg-sale\">\n                    {formatAmount(totalTransactions > 0 ? totalSales / totalTransactions : 0)}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            <Separator orientation=\"vertical\" className=\"hidden md:block\" />\n\n            {/* Expense Summary */}\n            <div className=\"space-y-4\">\n              <h3 className=\"font-semibold text-lg flex items-center gap-2\">\n                <TrendingDown className=\"w-5 h-5 text-red-500\" />\n                Expense Summary\n              </h3>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Total Expenses:</span>\n                  <span className=\"font-medium text-red-600\" data-testid=\"summary-total-expenses\">\n                    {formatAmount(totalExpenses)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Categories:</span>\n                  <span className=\"font-medium\" data-testid=\"summary-expense-categories\">\n                    {dailyReport?.expenses.length || 0}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Expense Ratio:</span>\n                  <span className=\"font-medium\" data-testid=\"summary-expense-ratio\">\n                    {totalSales > 0 ? ((totalExpenses / totalSales) * 100).toFixed(1) : 0}%\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            <Separator orientation=\"vertical\" className=\"hidden md:block\" />\n\n            {/* Profit Summary */}\n            <div className=\"space-y-4\">\n              <h3 className=\"font-semibold text-lg flex items-center gap-2\">\n                <DollarSign className={`w-5 h-5 ${netProfit >= 0 ? 'text-green-500' : 'text-red-500'}`} />\n                Profit Analysis\n              </h3>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Net Profit:</span>\n                  <span className={`font-medium ${netProfit >= 0 ? 'text-green-600' : 'text-red-600'}`} data-testid=\"summary-net-profit\">\n                    {formatAmount(netProfit)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Profit Margin:</span>\n                  <span className={`font-medium ${netProfit >= 0 ? 'text-green-600' : 'text-red-600'}`} data-testid=\"summary-profit-margin\">\n                    {totalSales > 0 ? ((netProfit / totalSales) * 100).toFixed(1) : 0}%\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Status:</span>\n                  <Badge \n                    variant={netProfit >= 0 ? 'default' : 'destructive'}\n                    data-testid=\"summary-profit-status\"\n                  >\n                    {netProfit >= 0 ? 'Profitable' : 'Loss'}\n                  </Badge>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* No Data State */}\n      {(!dailyReport?.salesByMethod || dailyReport.salesByMethod.length === 0) && \n       (!dailyReport?.expenses || dailyReport.expenses.length === 0) && (\n        <Card>\n          <CardContent className=\"text-center py-12\">\n            <BarChart3 className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No Data Available</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              No sales or expense data found for {format(selectedDate, 'PPP')}.\n            </p>\n            <p className=\"text-sm text-muted-foreground\">\n              Try selecting a different date or check if transactions were recorded.\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":20327},"client/src/pages/Dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Line, LineChart, ResponsiveContainer, XAxis, YAxis } from \"recharts\";\nimport type { Tank, SalesTransaction, Customer, Product } from \"@shared/schema\";\nimport { useCurrency } from \"@/contexts/CurrencyContext\";\nimport { useLocation } from \"wouter\";\nimport { Download, FileText, ShoppingCart, Users, BarChart3, AlertCircle, DollarSign, TrendingUp, Fuel, Clock, AlertTriangle, Check } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatCompactNumber } from \"@/lib/utils\";\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  const { formatCurrency, formatCurrencyCompact } = useCurrency();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  const { data: dashboardStats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/dashboard\", user?.stationId],\n    enabled: !!user?.stationId,\n  });\n\n  const { data: tanks = [], isLoading: tanksLoading } = useQuery<Tank[]>({\n    queryKey: [\"/api/tanks\", user?.stationId],\n    enabled: !!user?.stationId,\n  });\n\n  const { data: recentSales = [], isLoading: salesLoading } = useQuery<SalesTransaction[]>({\n    queryKey: [\"/api/sales\", user?.stationId, \"recent\"],\n    enabled: !!user?.stationId,\n  });\n\n  const { data: products = [] } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: customers = [] } = useQuery<Customer[]>({\n    queryKey: [\"/api/customers\"],\n  });\n\n  // Calculate chart data from dashboard stats (last 7 days)\n  const generateChartData = () => {\n    if (!dashboardStats || typeof dashboardStats !== 'object' || !('weeklySales' in dashboardStats)) return [];\n    \n    const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    const today = new Date().getDay();\n    const chartData = [];\n    \n    for (let i = 6; i >= 0; i--) {\n      const dayIndex = (today - i + 7) % 7;\n      const dayData = (dashboardStats as any).weeklySales?.find((d: any) => d.dayOfWeek === dayIndex);\n      chartData.push({\n        day: days[dayIndex],\n        sales: dayData ? parseFloat(dayData.totalAmount || '0') : 0\n      });\n    }\n    return chartData;\n  };\n\n  // Calculate stock value from tanks\n  const calculateStockValue = () => {\n    if (!tanks.length || !products.length) return 0;\n    \n    return tanks.reduce((total, tank) => {\n      const product = products.find(p => p.id === tank.productId);\n      if (product) {\n        const stockValue = parseFloat(tank.currentStock || '0') * parseFloat(product.currentPrice || '0');\n        return total + stockValue;\n      }\n      return total;\n    }, 0);\n  };\n\n  // Get overdue customers count\n  const getOverdueCustomersCount = () => {\n    return customers.filter((customer: Customer) => \n      parseFloat(customer.outstandingAmount || '0') > 0\n    ).length;\n  };\n\n  // Quick action handlers\n  const handleNewSale = () => {\n    setLocation('/pos');\n  };\n\n  const handleViewReports = () => {\n    setLocation('/financial-reports');\n  };\n\n  const handleStockStatus = () => {\n    setLocation('/stock');\n  };\n\n  const handleCustomerPayments = () => {\n    setLocation('/accounts-receivable');\n  };\n\n  const handleTankMonitoring = () => {\n    setLocation('/tanks');\n  };\n\n  const handleDailyReports = () => {\n    setLocation('/daily-reports');\n  };\n\n\n  const isLoading = statsLoading || tanksLoading || salesLoading;\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-20 bg-muted rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8 fade-in\">\n      {/* Key Performance Indicators */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6\">\n        <Card className=\"bg-gradient-to-br from-green-500 to-green-600 text-white border-0\">\n          <CardContent className=\"p-4 sm:p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-green-100 text-xs sm:text-sm font-medium\">Today's Sales</p>\n                <p className=\"text-lg sm:text-2xl lg:text-3xl font-bold truncate\" data-testid=\"todays-sales\">\n                  {formatCompactNumber(parseFloat((dashboardStats as any)?.todaysSales?.totalAmount || '0'), { currency: 'PKR' })}\n                </p>\n                <p className=\"text-green-100 text-xs sm:text-sm\">{(dashboardStats as any)?.todaysSales?.count || 0} transactions</p>\n              </div>\n              <div className=\"opacity-80 flex-shrink-0\"><DollarSign className=\"w-6 h-6 sm:w-8 sm:h-8 lg:w-10 lg:h-10\" /></div>\n            </div>\n            <div className=\"mt-2 sm:mt-4 flex items-center\">\n              <span className=\"text-green-100 text-xs\">+12% vs yesterday</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-blue-500 to-blue-600 text-white border-0\">\n          <CardContent className=\"p-4 sm:p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-blue-100 text-xs sm:text-sm font-medium\">Monthly Revenue</p>\n                <p className=\"text-lg sm:text-2xl lg:text-3xl font-bold truncate\" data-testid=\"monthly-revenue\">\n                  {formatCompactNumber((dashboardStats as any)?.monthlySales?.totalAmount ? parseFloat((dashboardStats as any).monthlySales.totalAmount) : 0, { currency: 'PKR' })}\n                </p>\n                <p className=\"text-blue-100 text-xs sm:text-sm\">{(dashboardStats as any)?.monthlySales?.count || 0} transactions total</p>\n              </div>\n              <div className=\"opacity-80 flex-shrink-0\"><TrendingUp className=\"w-6 h-6 sm:w-8 sm:h-8 lg:w-10 lg:h-10\" /></div>\n            </div>\n            <div className=\"mt-2 sm:mt-4 flex items-center\">\n              <span className=\"text-blue-100 text-xs\">On track for target</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-purple-500 to-purple-600 text-white border-0\">\n          <CardContent className=\"p-4 sm:p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-purple-100 text-xs sm:text-sm font-medium\">Stock Value</p>\n                <p className=\"text-lg sm:text-2xl lg:text-3xl font-bold truncate\" data-testid=\"stock-value\">\n                  {formatCompactNumber(calculateStockValue(), { currency: 'PKR' })}\n                </p>\n                <p className=\"text-purple-100 text-xs sm:text-sm\">All tanks combined</p>\n              </div>\n              <div className=\"opacity-80 flex-shrink-0\"><Fuel className=\"w-6 h-6 sm:w-8 sm:h-8 lg:w-10 lg:h-10\" /></div>\n            </div>\n            <div className=\"mt-2 sm:mt-4 flex items-center\">\n              <span className=\"text-purple-100 text-xs\">3 days avg inventory</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-orange-500 to-orange-600 text-white border-0\">\n          <CardContent className=\"p-4 sm:p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-orange-100 text-xs sm:text-sm font-medium\">Outstanding</p>\n                <p className=\"text-lg sm:text-2xl lg:text-3xl font-bold truncate\" data-testid=\"outstanding-amount\">\n                  {formatCompactNumber((dashboardStats as any)?.outstanding?.totalOutstanding ? parseFloat((dashboardStats as any).outstanding.totalOutstanding) : 0, { currency: 'PKR' })}\n                </p>\n                <p className=\"text-orange-100 text-xs sm:text-sm\">Credit customers</p>\n              </div>\n              <div className=\"opacity-80 flex-shrink-0\"><Clock className=\"w-6 h-6 sm:w-8 sm:h-8 lg:w-10 lg:h-10\" /></div>\n            </div>\n            <div className=\"mt-2 sm:mt-4 flex items-center\">\n              <span className=\"text-orange-100 text-xs\">{getOverdueCustomersCount()} customers pending</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Quick Actions</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n            <Button \n              variant=\"outline\" \n              className=\"flex flex-col items-center gap-2 h-20\"\n              onClick={handleNewSale}\n              data-testid=\"button-new-sale\"\n            >\n              <ShoppingCart className=\"w-6 h-6 text-green-600\" />\n              <span className=\"text-sm font-medium\">New Sale</span>\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              className=\"flex flex-col items-center gap-2 h-20\"\n              onClick={handleViewReports}\n              data-testid=\"button-view-reports\"\n            >\n              <BarChart3 className=\"w-6 h-6 text-blue-600\" />\n              <span className=\"text-sm font-medium\">View Reports</span>\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              className=\"flex flex-col items-center gap-2 h-20\"\n              onClick={handleStockStatus}\n              data-testid=\"button-stock-status\"\n            >\n              <FileText className=\"w-6 h-6 text-purple-600\" />\n              <span className=\"text-sm font-medium\">Stock Status</span>\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              className=\"flex flex-col items-center gap-2 h-20\"\n              onClick={handleCustomerPayments}\n              data-testid=\"button-customer-payments\"\n            >\n              <Users className=\"w-6 h-6 text-orange-600\" />\n              <span className=\"text-sm font-medium\">Customer Payments</span>\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              className=\"flex flex-col items-center gap-2 h-20\"\n              onClick={handleTankMonitoring}\n              data-testid=\"button-tank-monitoring\"\n            >\n              <AlertCircle className=\"w-6 h-6 text-red-600\" />\n              <span className=\"text-sm font-medium\">Tank Monitoring</span>\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              className=\"flex flex-col items-center gap-2 h-20\"\n              onClick={handleDailyReports}\n              data-testid=\"button-daily-reports\"\n            >\n              <Download className=\"w-6 h-6 text-indigo-600\" />\n              <span className=\"text-sm font-medium\">Daily Reports</span>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Charts and Analytics */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Sales Trend (Last 7 Days)</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={generateChartData()}>\n                  <XAxis dataKey=\"day\" />\n                  <YAxis />\n                  <Line type=\"monotone\" dataKey=\"sales\" stroke=\"hsl(var(--primary))\" strokeWidth={2} />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Today's Product Sales</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {(dashboardStats as any)?.productSales?.map((product: any, index: number) => {\n                const colors = ['bg-green-500', 'bg-blue-500', 'bg-yellow-500', 'bg-red-500'];\n                return (\n                  <div key={product.productId} className=\"flex items-center justify-between p-3 bg-muted rounded-md\">\n                    <div className=\"flex items-center\">\n                      <div className={`w-4 h-4 ${colors[index % colors.length]} rounded mr-3`}></div>\n                      <span className=\"font-medium\">{product.productName}</span>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"font-semibold\" data-testid={`${product.productName.toLowerCase()}-sales`}>\n                        {formatCurrency(parseFloat(product.totalAmount || '0'))}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {parseFloat(product.totalQuantity || '0').toLocaleString()} L\n                      </div>\n                    </div>\n                  </div>\n                );\n              }) || (\n                <div className=\"text-center text-muted-foreground py-4\">\n                  No product sales data available\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Transactions and Alerts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Recent Transactions</CardTitle>\n              <button \n                className=\"text-primary hover:text-primary/80 text-sm font-medium transition-colors\" \n                onClick={() => setLocation('/sales-history')}\n                data-testid=\"button-view-all\"\n              >\n                View All\n              </button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {recentSales.length > 0 ? recentSales.slice(0, 3).map((transaction: SalesTransaction, index: number) => {\n                const timeAgo = transaction.transactionDate ? new Date(transaction.transactionDate).toLocaleString() : 'N/A';\n                return (\n                  <div key={transaction.id} className=\"flex items-center justify-between p-3 border border-border rounded-md\">\n                    <div>\n                      <div className=\"font-medium text-card-foreground\" data-testid={`transaction-id-${index}`}>\n                        {transaction.invoiceNumber}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {transaction.paymentMethod === 'cash' ? 'Cash Sale' : transaction.paymentMethod === 'credit' ? 'Credit Sale' : 'Card Sale'}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">{timeAgo}</div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className={`font-semibold ${\n                        transaction.paymentMethod === 'cash' ? 'text-green-600' : \n                        transaction.paymentMethod === 'credit' ? 'text-blue-600' : 'text-purple-600'\n                      }`}>\n                        {formatCurrency(parseFloat(transaction.totalAmount || '0'))}\n                      </div>\n                    </div>\n                  </div>\n                );\n              }) : (\n                <div className=\"text-center text-muted-foreground py-4\">\n                  No recent transactions\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>System Alerts</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {/* Low Stock Alerts */}\n              {tanks.filter(tank => {\n                const currentStock = parseFloat(tank.currentStock || '0');\n                const minimumLevel = parseFloat(tank.minimumLevel || '500');\n                return currentStock <= minimumLevel;\n              }).slice(0, 2).map(tank => {\n                const product = products.find(p => p.id === tank.productId);\n                return (\n                  <div key={tank.id} className=\"p-3 bg-yellow-50 border border-yellow-200 rounded-md\">\n                    <div className=\"flex items-start\">\n                      <AlertTriangle className=\"w-5 h-5 text-yellow-500 mr-2\" />\n                      <div>\n                        <div className=\"text-sm font-medium text-yellow-800\">Low Stock Alert</div>\n                        <div className=\"text-xs text-yellow-600\">\n                          {tank.name} ({product?.name}) - Only {parseFloat(tank.currentStock || '0').toLocaleString()}L remaining\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n              \n              {/* Overdue Customers */}\n              {customers.filter(customer => parseFloat(customer.outstandingAmount || '0') > 50000).slice(0, 1).map(customer => (\n                <div key={customer.id} className=\"p-3 bg-red-50 border border-red-200 rounded-md\">\n                  <div className=\"flex items-start\">\n                    <DollarSign className=\"w-5 h-5 text-red-500 mr-2\" />\n                    <div>\n                      <div className=\"text-sm font-medium text-red-800\">Payment Overdue</div>\n                      <div className=\"text-xs text-red-600\">\n                        {customer.name} - ‚Çπ{parseFloat(customer.outstandingAmount || '0').toLocaleString()} outstanding\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n              \n              {/* Show message if no alerts */}\n              {tanks.filter(tank => parseFloat(tank.currentStock || '0') <= parseFloat(tank.minimumLevel || '500')).length === 0 && \n               customers.filter(customer => parseFloat(customer.outstandingAmount || '0') > 50000).length === 0 && (\n                <div className=\"p-3 bg-green-50 border border-green-200 rounded-md\">\n                  <div className=\"flex items-start\">\n                    <Check className=\"w-5 h-5 text-green-500 mr-2\" />\n                    <div>\n                      <div className=\"text-sm font-medium text-green-800\">All Systems Normal</div>\n                      <div className=\"text-xs text-green-600\">No critical alerts at this time</div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":18996},"client/src/pages/ExpenseManagement.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCurrency } from \"@/contexts/CurrencyContext\";\nimport { apiRequest } from \"@/lib/api\";\nimport { CreditCard, Receipt, Eye, Edit, Trash2, Plus, Download, Printer } from \"lucide-react\";\nimport { DeleteConfirmation } from \"@/components/ui/delete-confirmation\";\n\nconst expenseSchema = z.object({\n  description: z.string().min(1, \"Description is required\"),\n  amount: z.string().min(1, \"Amount is required\"),\n  category: z.string().min(1, \"Category is required\"),\n  paymentMethod: z.string().min(1, \"Payment method is required\"),\n  expenseDate: z.string().min(1, \"Date is required\"),\n  receiptNumber: z.string().optional(),\n  notes: z.string().optional(),\n});\n\ninterface Expense {\n  id: string;\n  description: string;\n  amount: string;\n  category: string;\n  paymentMethod: string;\n  expenseDate: string;\n  receiptNumber?: string;\n  notes?: string;\n  stationId: string;\n  userId: string;\n  createdAt: string;\n}\n\nexport default function ExpenseManagement() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { formatCurrency } = useCurrency();\n  const [open, setOpen] = useState(false);\n  const [editExpenseId, setEditExpenseId] = useState<string | null>(null);\n  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);\n  const [expenseToDelete, setExpenseToDelete] = useState<Expense | null>(null);\n\n  const form = useForm({\n    resolver: zodResolver(expenseSchema),\n    defaultValues: {\n      description: \"\",\n      amount: \"\",\n      category: \"\",\n      paymentMethod: \"\",\n      expenseDate: new Date().toISOString().split('T')[0],\n      receiptNumber: \"\",\n      notes: \"\",\n    },\n    mode: \"onChange\"\n  });\n\n  const { data: expenses = [], isLoading } = useQuery<Expense[]>({\n    queryKey: [\"/api/expenses\", user?.stationId],\n    queryFn: () => apiRequest(\"GET\", `/api/expenses?stationId=${user?.stationId}`).then(res => res.json()),\n    enabled: !!user?.stationId,\n  });\n\n  const createExpenseMutation = useMutation({\n    mutationFn: async (data: any) => {\n      console.log(\"Creating expense with data:\", data);\n      \n      if (!user?.stationId || !user?.id) {\n        throw new Error(\"User session not properly loaded\");\n      }\n\n      const expenseData = {\n        ...data,\n        stationId: user.stationId,\n        userId: user.id,\n        amount: parseFloat(data.amount).toString(),\n      };\n\n      console.log(\"Final expense data being sent:\", expenseData);\n      \n      const response = await apiRequest(\"POST\", \"/api/expenses\", expenseData);\n      if (!response.ok) {\n        const error = await response.json().catch(() => ({ message: response.statusText }));\n        throw new Error(error.message || 'Failed to create expense');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Expense recorded\",\n        description: \"Expense has been recorded successfully\",\n      });\n      setOpen(false);\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/expenses\", user?.stationId] });\n    },\n    onError: (error: any) => {\n      console.error(\"Expense creation error:\", error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to record expense\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateExpenseMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const expenseData = {\n        ...data,\n        amount: parseFloat(data.amount).toString(),\n      };\n      const response = await apiRequest(\"PUT\", `/api/expenses/${id}`, expenseData);\n      if (!response.ok) throw new Error('Failed to update expense');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Expense updated\",\n        description: \"Expense has been updated successfully\",\n      });\n      setEditExpenseId(null);\n      setOpen(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/expenses\", user?.stationId] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update expense\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteExpenseMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/expenses/${id}`);\n      if (!response.ok) throw new Error('Failed to delete expense');\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Expense deleted\",\n        description: \"Expense has been deleted successfully\",\n      });\n      setDeleteConfirmOpen(false);\n      setExpenseToDelete(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/expenses\", user?.stationId] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete expense\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    console.log(\"Expense form submission:\", { data, editExpenseId, user });\n    \n    if (editExpenseId) {\n      console.log(\"Updating expense with ID:\", editExpenseId);\n      updateExpenseMutation.mutate({ id: editExpenseId, data });\n    } else {\n      console.log(\"Creating new expense\");\n      createExpenseMutation.mutate(data);\n    }\n  };\n\n  const handleEditExpense = (expense: Expense) => {\n    setEditExpenseId(expense.id);\n    form.reset({\n      description: expense.description,\n      amount: expense.amount,\n      category: expense.category,\n      paymentMethod: expense.paymentMethod,\n      expenseDate: expense.expenseDate ? new Date(expense.expenseDate).toISOString().split('T')[0] : new Date().toISOString().split('T')[0],\n      receiptNumber: expense.receiptNumber || \"\",\n      notes: expense.notes || \"\",\n    });\n    setOpen(true);\n  };\n\n  const handleDeleteExpense = (expense: Expense) => {\n    setExpenseToDelete(expense);\n    setDeleteConfirmOpen(true);\n  };\n\n  const confirmDeleteExpense = () => {\n    if (expenseToDelete) {\n      deleteExpenseMutation.mutate(expenseToDelete.id);\n    }\n  };\n\n  const handleViewReceipt = (expense: Expense) => {\n    // Generate receipt content for viewing\n    const receiptWindow = window.open('', '_blank');\n    if (!receiptWindow) return;\n\n    const htmlContent = `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Expense Receipt - ${expense.receiptNumber || expense.id}</title>\n          <style>\n            @page { margin: 0.5in; size: A4; }\n            body { font-family: Arial, sans-serif; line-height: 1.4; color: #000; margin: 0; padding: 20px; }\n            .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 20px; }\n            .header h1 { color: #2563eb; margin: 0; }\n            .expense-details { background: #f9fafb; padding: 15px; border-radius: 8px; margin-bottom: 20px; }\n            .footer { text-align: center; margin-top: 30px; padding-top: 15px; border-top: 1px solid #e5e7eb; font-size: 12px; color: #666; }\n          </style>\n        </head>\n        <body>\n          <div class=\"header\">\n            <h1>FuelFlow Station</h1>\n            <h2>Expense Receipt</h2>\n            <p>Receipt #: ${expense.receiptNumber || expense.id}</p>\n          </div>\n\n          <div class=\"expense-details\">\n            <h3>Expense Details</h3>\n            <p><strong>Description:</strong> ${expense.description}</p>\n            <p><strong>Amount:</strong> ${formatCurrency(parseFloat(expense.amount))}</p>\n            <p><strong>Category:</strong> ${expense.category}</p>\n            <p><strong>Payment Method:</strong> ${expense.paymentMethod}</p>\n            <p><strong>Date:</strong> ${new Date(expense.expenseDate).toLocaleDateString()}</p>\n            ${expense.notes ? `<p><strong>Notes:</strong> ${expense.notes}</p>` : ''}\n          </div>\n\n          <div class=\"footer\">\n            <p>This is a computer-generated receipt from FuelFlow Management System</p>\n          </div>\n        </body>\n      </html>\n    `;\n\n    receiptWindow.document.write(htmlContent);\n    receiptWindow.document.close();\n\n    receiptWindow.onload = () => {\n      setTimeout(() => {\n        receiptWindow.print();\n        receiptWindow.close();\n      }, 500);\n    };\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/3 mb-4\"></div>\n          <div className=\"h-4 bg-muted rounded w-1/2 mb-8\"></div>\n          <div className=\"h-96 bg-muted rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const totalExpenses = expenses.reduce((sum, expense) => sum + parseFloat(expense.amount), 0);\n\n  return (\n    <div className=\"space-y-6 fade-in\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-2xl font-semibold text-card-foreground\">Expense Management</h3>\n          <p className=\"text-muted-foreground\">Track and manage business expenses</p>\n        </div>\n        <Dialog open={open} onOpenChange={(isOpen) => { \n          setOpen(isOpen);\n          if (!isOpen) { \n            setEditExpenseId(null); \n            form.reset();\n          } \n        }}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-expense\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Record Expense\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[500px]\">\n            <DialogHeader>\n              <DialogTitle>{editExpenseId ? \"Edit Expense\" : \"Record New Expense\"}</DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Office supplies, fuel, etc.\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"amount\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Amount *</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" step=\"0.01\" placeholder=\"0.00\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"category\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Category *</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select category\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"fuel\">Fuel</SelectItem>\n                            <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                            <SelectItem value=\"utilities\">Utilities</SelectItem>\n                            <SelectItem value=\"supplies\">Supplies</SelectItem>\n                            <SelectItem value=\"salaries\">Salaries</SelectItem>\n                            <SelectItem value=\"other\">Other</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"paymentMethod\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Payment Method *</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select method\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"cash\">Cash</SelectItem>\n                            <SelectItem value=\"bank_transfer\">Bank Transfer</SelectItem>\n                            <SelectItem value=\"cheque\">Cheque</SelectItem>\n                            <SelectItem value=\"credit_card\">Credit Card</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"expenseDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Date *</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"date\" \n                            {...field} \n                            max=\"9999-12-31\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <FormField\n                  control={form.control}\n                  name=\"receiptNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Receipt Number</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Optional receipt reference\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Notes</FormLabel>\n                      <FormControl>\n                        <Textarea placeholder=\"Additional details\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex justify-end space-x-2 pt-4\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setOpen(false)}>\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createExpenseMutation.isPending || updateExpenseMutation.isPending}>\n                    {editExpenseId ? \"Update Expense\" : \"Record Expense\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold text-primary\">{expenses.length}</div>\n            <div className=\"text-sm text-muted-foreground\">Total Expenses</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold text-red-600\">{formatCurrency(totalExpenses)}</div>\n            <div className=\"text-sm text-muted-foreground\">Total Amount</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {expenses.filter(e => new Date(e.expenseDate).getMonth() === new Date().getMonth()).length}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">This Month</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Expenses List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Expense History</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-muted\">\n                <tr>\n                  <th className=\"text-left p-3 font-medium\">Date</th>\n                  <th className=\"text-left p-3 font-medium\">Description</th>\n                  <th className=\"text-left p-3 font-medium\">Category</th>\n                  <th className=\"text-right p-3 font-medium\">Amount</th>\n                  <th className=\"text-left p-3 font-medium\">Payment Method</th>\n                  <th className=\"text-center p-3 font-medium\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {expenses.length > 0 ? expenses.map((expense, index) => (\n                  <tr key={expense.id} className=\"border-b border-border hover:bg-muted/50\">\n                    <td className=\"p-3 text-sm\">\n                      {new Date(expense.expenseDate).toLocaleDateString()}\n                    </td>\n                    <td className=\"p-3 font-medium\">{expense.description}</td>\n                    <td className=\"p-3\">\n                      <Badge variant=\"outline\">{expense.category}</Badge>\n                    </td>\n                    <td className=\"p-3 text-right font-semibold text-red-600\">\n                      {formatCurrency(parseFloat(expense.amount))}\n                    </td>\n                    <td className=\"p-3 capitalize\">{expense.paymentMethod.replace('_', ' ')}</td>\n                    <td className=\"p-3 text-center\">\n                      <div className=\"flex items-center justify-center space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleViewReceipt(expense)}\n                          className=\"p-2 text-blue-600 hover:text-blue-800 hover:bg-blue-50\"\n                          title=\"View Receipt\"\n                        >\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleEditExpense(expense)}\n                          className=\"p-2 text-green-600 hover:text-green-800 hover:bg-green-50\"\n                          title=\"Edit Expense\"\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleDeleteExpense(expense)}\n                          className=\"p-2 text-red-600 hover:text-red-800 hover:bg-red-50\"\n                          title=\"Delete Expense\"\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                )) : (\n                  <tr>\n                    <td colSpan={6} className=\"p-8 text-center text-muted-foreground\">\n                      No expenses recorded yet\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Delete Confirmation Dialog */}\n      <DeleteConfirmation\n        isOpen={deleteConfirmOpen}\n        onClose={() => setDeleteConfirmOpen(false)}\n        onConfirm={confirmDeleteExpense}\n        title=\"Delete Expense\"\n        description=\"Are you sure you want to delete this expense? This action cannot be undone.\"\n        itemName={expenseToDelete?.description || \"expense\"}\n        isLoading={deleteExpenseMutation.isPending}\n      />\n    </div>\n  );\n}\n","size_bytes":21423},"client/src/pages/FinancialReports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useCurrency } from \"@/contexts/CurrencyContext\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatCompactNumber } from \"@/lib/utils\";\nimport { Download, Printer } from \"lucide-react\";\n\nexport default function FinancialReports() {\n  const { user } = useAuth();\n  const { formatCurrency } = useCurrency();\n  const { toast } = useToast();\n  const [reportType, setReportType] = useState(\"profit-loss\");\n  const [period, setPeriod] = useState(\"this-month\");\n  const [isGeneratingReport, setIsGeneratingReport] = useState(false);\n\n  const { data: financialData, isLoading } = useQuery({\n    queryKey: [\"/api/reports/financial\", user?.stationId, period],\n    enabled: !!user?.stationId,\n  });\n\n  // Handler functions\n  const handleGenerateReport = () => {\n    setIsGeneratingReport(true);\n    toast({\n      title: \"Generating Report\",\n      description: `Creating ${getReportTypeName(reportType)} for ${getPeriodName(period)}...`,\n    });\n    \n    // Simulate report generation\n    setTimeout(() => {\n      setIsGeneratingReport(false);\n      toast({\n        title: \"Report Generated\",\n        description: \"Financial report has been generated successfully\",\n      });\n    }, 1500);\n  };\n\n  const handleExportReport = () => {\n    const reportData = getCurrentReportData();\n    const csvContent = generateCSV(reportData);\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `${reportType}-${period}-${new Date().toISOString().split('T')[0]}.csv`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    \n    toast({\n      title: \"Export Successful\",\n      description: \"Financial report has been exported to CSV\",\n    });\n  };\n\n  const handlePrintReport = () => {\n    const printContent = generatePrintHTML();\n    const printWindow = window.open('', '_blank');\n    if (printWindow) {\n      printWindow.document.write(printContent);\n      printWindow.document.close();\n      printWindow.focus();\n      printWindow.print();\n      printWindow.close();\n    }\n    \n    toast({\n      title: \"Print Prepared\",\n      description: \"Financial report is ready for printing\",\n    });\n  };\n\n  // Helper functions\n  const getReportTypeName = (type: string) => {\n    const types: { [key: string]: string } = {\n      'profit-loss': 'Profit & Loss Statement',\n      'balance-sheet': 'Balance Sheet',\n      'cash-flow': 'Cash Flow Statement',\n      'sales-analysis': 'Sales Analysis',\n      'expense-analysis': 'Expense Analysis'\n    };\n    return types[type] || 'Financial Report';\n  };\n\n  const getPeriodName = (period: string) => {\n    const periods: { [key: string]: string } = {\n      'this-month': 'This Month',\n      'last-month': 'Last Month',\n      'this-quarter': 'This Quarter',\n      'this-year': 'This Year',\n      'custom': 'Custom Range'\n    };\n    return periods[period] || 'Selected Period';\n  };\n\n  const getCurrentReportData = () => {\n    return {\n      reportType: getReportTypeName(reportType),\n      period: getPeriodName(period),\n      revenue: {\n        petrol: 850000,\n        diesel: 420000,\n        other: 25000,\n        total: 1295000\n      },\n      expenses: {\n        cogs: 1180000,\n        salaries: 35000,\n        utilities: 8500,\n        maintenance: 12000,\n        insurance: 3500,\n        other: 5200,\n        total: 1244200\n      },\n      netProfit: 50800\n    };\n  };\n\n  const generateCSV = (data: any) => {\n    const csv = [\n      ['Financial Report', data.reportType],\n      ['Period', data.period],\n      ['Generated', new Date().toLocaleString()],\n      [''],\n      ['REVENUE'],\n      ['Petrol Sales', data.revenue.petrol],\n      ['Diesel Sales', data.revenue.diesel],\n      ['Other Services', data.revenue.other],\n      ['Total Revenue', data.revenue.total],\n      [''],\n      ['EXPENSES'],\n      ['Cost of Goods Sold', data.expenses.cogs],\n      ['Staff Salaries', data.expenses.salaries],\n      ['Electricity & Utilities', data.expenses.utilities],\n      ['Maintenance', data.expenses.maintenance],\n      ['Insurance', data.expenses.insurance],\n      ['Other Expenses', data.expenses.other],\n      ['Total Expenses', data.expenses.total],\n      [''],\n      ['NET PROFIT', data.netProfit]\n    ];\n    \n    return csv.map(row => row.join(',')).join('\\n');\n  };\n\n  const generatePrintHTML = () => {\n    const data = getCurrentReportData();\n    return `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Financial Report - ${data.reportType}</title>\n          <style>\n            @media print {\n              @page { margin: 1in; }\n              body { font-family: Arial, sans-serif; background: white; color: black; }\n            }\n            body { font-family: Arial, sans-serif; background: white; color: black; padding: 20px; }\n            .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 10px; }\n            .section { margin: 20px 0; }\n            .section h3 { background: #f5f5f5; padding: 10px; margin: 0; border: 1px solid #ddd; }\n            .line-item { display: flex; justify-content: space-between; padding: 8px 10px; border-left: 1px solid #ddd; border-right: 1px solid #ddd; }\n            .line-item:nth-child(even) { background: #f9f9f9; }\n            .total { font-weight: bold; background: #e9e9e9 !important; border: 1px solid #999; }\n            .profit { background: #d4edda !important; border: 2px solid #28a745; font-weight: bold; text-align: center; padding: 15px; margin-top: 20px; }\n          </style>\n        </head>\n        <body>\n          <div class=\"header\">\n            <h1>${data.reportType}</h1>\n            <p>Period: ${data.period} | Generated: ${new Date().toLocaleString()}</p>\n          </div>\n          \n          <div class=\"section\">\n            <h3>REVENUE</h3>\n            <div class=\"line-item\"><span>Petrol Sales</span><span>${formatCurrency(data.revenue.petrol)}</span></div>\n            <div class=\"line-item\"><span>Diesel Sales</span><span>${formatCurrency(data.revenue.diesel)}</span></div>\n            <div class=\"line-item\"><span>Other Services</span><span>${formatCurrency(data.revenue.other)}</span></div>\n            <div class=\"line-item total\"><span>Total Revenue</span><span>${formatCurrency(data.revenue.total)}</span></div>\n          </div>\n          \n          <div class=\"section\">\n            <h3>EXPENSES</h3>\n            <div class=\"line-item\"><span>Cost of Goods Sold</span><span>${formatCurrency(data.expenses.cogs)}</span></div>\n            <div class=\"line-item\"><span>Staff Salaries</span><span>${formatCurrency(data.expenses.salaries)}</span></div>\n            <div class=\"line-item\"><span>Electricity & Utilities</span><span>${formatCurrency(data.expenses.utilities)}</span></div>\n            <div class=\"line-item\"><span>Maintenance</span><span>${formatCurrency(data.expenses.maintenance)}</span></div>\n            <div class=\"line-item\"><span>Insurance</span><span>${formatCurrency(data.expenses.insurance)}</span></div>\n            <div class=\"line-item\"><span>Other Expenses</span><span>${formatCurrency(data.expenses.other)}</span></div>\n            <div class=\"line-item total\"><span>Total Expenses</span><span>${formatCurrency(data.expenses.total)}</span></div>\n          </div>\n          \n          <div class=\"profit\">\n            <h3>NET PROFIT: ${formatCurrency(data.netProfit)}</h3>\n            <p>Profit Margin: ${((data.netProfit / data.revenue.total) * 100).toFixed(2)}%</p>\n          </div>\n        </body>\n      </html>\n    `;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/3 mb-4\"></div>\n          <div className=\"h-4 bg-muted rounded w-1/2 mb-8\"></div>\n          <div className=\"h-64 bg-muted rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6 fade-in\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <h3 className=\"text-2xl font-semibold text-card-foreground mb-2\">Financial Reports</h3>\n        <p className=\"text-muted-foreground\">\n          Comprehensive financial statements and analysis for your petrol pump business\n        </p>\n      </div>\n\n      {/* Report Selection */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-card-foreground mb-2\">Report Type</label>\n              <Select value={reportType} onValueChange={setReportType}>\n                <SelectTrigger data-testid=\"select-report-type\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"profit-loss\">Profit & Loss Statement</SelectItem>\n                  <SelectItem value=\"balance-sheet\">Balance Sheet</SelectItem>\n                  <SelectItem value=\"cash-flow\">Cash Flow Statement</SelectItem>\n                  <SelectItem value=\"sales-analysis\">Sales Analysis</SelectItem>\n                  <SelectItem value=\"expense-analysis\">Expense Analysis</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-card-foreground mb-2\">Period</label>\n              <Select value={period} onValueChange={setPeriod}>\n                <SelectTrigger data-testid=\"select-period\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"this-month\">This Month</SelectItem>\n                  <SelectItem value=\"last-month\">Last Month</SelectItem>\n                  <SelectItem value=\"this-quarter\">This Quarter</SelectItem>\n                  <SelectItem value=\"this-year\">This Year</SelectItem>\n                  <SelectItem value=\"custom\">Custom Range</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex items-end\">\n              <Button \n                className=\"w-full\" \n                onClick={handleGenerateReport}\n                disabled={isGeneratingReport}\n                data-testid=\"button-generate-report\"\n              >\n                {isGeneratingReport ? \"Generating...\" : \"Generate Report\"}\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Profit & Loss Statement */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle>Profit & Loss Statement</CardTitle>\n              <p className=\"text-sm text-muted-foreground\">For the month of January 2024</p>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                className=\"p-2\"\n                onClick={handleExportReport}\n                data-testid=\"button-export\"\n                title=\"Export Report to CSV\"\n              >\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                className=\"p-2\"\n                onClick={handlePrintReport}\n                data-testid=\"button-print\"\n                title=\"Print Report\"\n              >\n                <Printer className=\"w-4 h-4 mr-2\" />\n                Print\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Revenue Section */}\n            <div>\n              <h5 className=\"font-semibold text-card-foreground mb-4 pb-2 border-b border-border\">\n                Revenue\n              </h5>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Petrol Sales</span>\n                  <span className=\"font-medium\" data-testid=\"petrol-revenue\">{formatCurrency(850000)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Diesel Sales</span>\n                  <span className=\"font-medium\" data-testid=\"diesel-revenue\">{formatCurrency(420000)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Other Services</span>\n                  <span className=\"font-medium\" data-testid=\"other-revenue\">{formatCurrency(25000)}</span>\n                </div>\n                <div className=\"border-t border-border pt-3 mt-4\">\n                  <div className=\"flex justify-between font-semibold\">\n                    <span>Total Revenue</span>\n                    <span className=\"text-green-600\" data-testid=\"total-revenue\">{formatCurrency(1295000)}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Expenses Section */}\n            <div>\n              <h5 className=\"font-semibold text-card-foreground mb-4 pb-2 border-b border-border\">\n                Expenses\n              </h5>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Cost of Goods Sold</span>\n                  <span className=\"font-medium\" data-testid=\"cogs\">{formatCurrency(1180000)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Staff Salaries</span>\n                  <span className=\"font-medium\" data-testid=\"salaries\">{formatCurrency(35000)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Electricity & Utilities</span>\n                  <span className=\"font-medium\" data-testid=\"utilities\">{formatCurrency(8500)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Maintenance</span>\n                  <span className=\"font-medium\" data-testid=\"maintenance\">{formatCurrency(12000)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Insurance</span>\n                  <span className=\"font-medium\" data-testid=\"insurance\">{formatCurrency(3500)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Other Expenses</span>\n                  <span className=\"font-medium\" data-testid=\"other-expenses\">{formatCurrency(5200)}</span>\n                </div>\n                <div className=\"border-t border-border pt-3 mt-4\">\n                  <div className=\"flex justify-between font-semibold\">\n                    <span>Total Expenses</span>\n                    <span className=\"text-red-600\" data-testid=\"total-expenses\">{formatCurrency(1244200)}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Net Profit */}\n          <div className=\"mt-8 p-4 bg-muted rounded-lg\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-lg font-semibold text-card-foreground\">Net Profit</span>\n              <span className=\"text-2xl font-bold text-green-600\" data-testid=\"net-profit\">{formatCurrency(50800)}</span>\n            </div>\n            <div className=\"mt-2 text-sm text-muted-foreground\">\n              Profit Margin: 3.92% | Previous Month: {formatCurrency(45200)} (+12.4%)\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":16476},"client/src/pages/InvoiceReceipt.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useEffect, useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useCurrency } from \"@/contexts/CurrencyContext\";\nimport { useStation } from \"@/contexts/StationContext\";\nimport { apiRequest } from \"@/lib/api\";\nimport { formatAmount } from \"@/lib/currency\";\nimport { Printer, Download, ArrowLeft, ChevronDown, FileText, Image } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport type {\n  SalesTransaction,\n  SalesTransactionItem,\n  Customer,\n  Product,\n  Station,\n  User\n} from \"@shared/schema\";\n\ninterface TransactionWithDetails extends SalesTransaction {\n  customer: Customer;\n  user: User;\n  station: Station;\n  items: Array<SalesTransactionItem & { product: Product }>;\n}\n\n// Assuming you have a hook or context to get station settings\n// For demonstration, we'll mock it. Replace with your actual hook/context.\nconst useStationSettings = () => {\n  // In a real app, this would fetch settings from an API or context\n  const [stationSettings, setStationSettings] = useState({\n    stationName: \"FuelFlow Station\",\n    address: \"123 Fuel St, Petro City\",\n    contactNumber: \"555-123-4567\",\n    email: \"contact@fuelflow.com\",\n    gstNumber: \"GST123456789\",\n    licenseNumber: \"LICENSE987654321\"\n  });\n  return { stationSettings };\n};\n\nexport default function InvoiceReceipt() {\n  const { id } = useParams<{ id: string }>();\n  const { user } = useAuth();\n  const { stationSettings } = useStation(); // Get station settings\n\n  const { data: transaction, isLoading } = useQuery<TransactionWithDetails>({\n    queryKey: [\"/api/sales/detail\", id!],\n    enabled: !!id && !!user?.stationId,\n  });\n\n  // Check for print parameter from Sales History\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const shouldPrint = urlParams.get('print') === '1';\n\n    if (shouldPrint && !isLoading && transaction) {\n      // Data is loaded, safe to print\n      setTimeout(() => {\n        window.print();\n      }, 200); // Slightly longer delay for reliable printing\n    }\n  }, [isLoading, transaction]);\n\n  const handlePrint = () => {\n    const printContent = document.getElementById('invoice-print');\n    if (!printContent) return;\n\n    const printWindow = window.open('', '_blank');\n    if (!printWindow) return;\n\n    const htmlContent = `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Sales Invoice ${transaction?.invoiceNumber || 'Unknown'}</title>\n          <style>\n            @page { margin: 0.5in; size: A4; }\n            body { font-family: Arial, sans-serif; line-height: 1.4; color: #000; margin: 0; padding: 20px; }\n            .container { max-width: 800px; margin: 0 auto; }\n            .header { display: flex; justify-content: space-between; align-items: start; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 20px; }\n            .station-info h1 { color: #2563eb; font-size: 28px; margin: 0; }\n            .station-info p { margin: 5px 0; color: #666; }\n            .invoice-title { font-size: 24px; font-weight: bold; text-align: right; }\n            .invoice-meta { text-align: right; margin-top: 10px; }\n            .invoice-meta p { margin: 5px 0; }\n            .section { margin-bottom: 30px; }\n            .section h3 { background: #f3f4f6; padding: 10px; margin: 0 0 15px 0; font-size: 16px; }\n            .details-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; }\n            .detail-item { margin-bottom: 10px; }\n            .detail-label { font-weight: bold; color: #374151; }\n            .detail-value { color: #6b7280; }\n            .items-table { width: 100%; border-collapse: collapse; margin: 20px 0; }\n            .items-table th, .items-table td { padding: 12px; text-align: left; border-bottom: 1px solid #e5e7eb; }\n            .items-table th { background: #f9fafb; font-weight: bold; }\n            .items-table .amount { text-align: right; }\n            .totals { background: #f9fafb; padding: 20px; border-radius: 8px; margin-top: 20px; }\n            .total-row { display: flex; justify-content: space-between; margin-bottom: 10px; }\n            .total-row.final { border-top: 2px solid #333; padding-top: 10px; margin-top: 15px; font-weight: bold; font-size: 18px; }\n            .footer { text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #e5e7eb; color: #6b7280; font-size: 12px; }\n            .payment-badge { background: #10b981; color: white; padding: 5px 15px; border-radius: 20px; font-size: 12px; }\n          </style>\n        </head>\n        <body>\n          <div class=\"container\">\n            <div class=\"header\">\n              <div class=\"station-info\">\n                <h1>FuelFlow Station</h1>\n                <p>Sales Invoice</p>\n                <p>Generated on ${new Date().toLocaleDateString()}</p>\n              </div>\n              <div>\n                <div class=\"invoice-title\">SALES INVOICE</div>\n                <div class=\"invoice-meta\">\n                  <p><strong>Invoice #:</strong> ${transaction?.invoiceNumber}</p>\n                  <p><strong>Date:</strong> ${new Date(transaction?.createdAt || new Date()).toLocaleDateString()}</p>\n                  <div class=\"payment-badge\">${transaction?.paymentMethod?.toUpperCase()}</div>\n                </div>\n              </div>\n            </div>\n\n            ${transaction?.customer ? `\n            <div class=\"section\">\n              <h3>Customer Information</h3>\n              <div class=\"details-grid\">\n                <div>\n                  <div class=\"detail-item\">\n                    <div class=\"detail-label\">Customer Name:</div>\n                    <div class=\"detail-value\">${transaction.customer.name}</div>\n                  </div>\n                  <div class=\"detail-item\">\n                    <div class=\"detail-label\">Customer Type:</div>\n                    <div class=\"detail-value\">${transaction.customer.type}</div>\n                  </div>\n                </div>\n                <div>\n                  ${transaction.customer.contactPhone ? `\n                  <div class=\"detail-item\">\n                    <div class=\"detail-label\">Phone:</div>\n                    <div class=\"detail-value\">${transaction.customer.contactPhone}</div>\n                  </div>` : ''}\n                  ${transaction.customer.gstNumber ? `\n                  <div class=\"detail-item\">\n                    <div class=\"detail-label\">GST Number:</div>\n                    <div class=\"detail-value\">${transaction.customer.gstNumber}</div>\n                  </div>` : ''}\n                </div>\n              </div>\n            </div>` : ''}\n\n            <div class=\"section\">\n              <h3>Items</h3>\n              <table class=\"items-table\">\n                <thead>\n                  <tr>\n                    <th>Product</th>\n                    <th>Quantity</th>\n                    <th>Unit Price</th>\n                    <th class=\"amount\">Total</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  ${transaction?.items?.map(item => `\n                    <tr>\n                      <td>${item.product?.name || 'Unknown Product'}</td>\n                      <td>${parseFloat(item.quantity).toFixed(3)} ${item.product?.unit || 'L'}</td>\n                      <td>${formatAmount(parseFloat(item.unitPrice), transaction?.currencyCode || 'PKR')}</td>\n                      <td class=\"amount\">${formatAmount(parseFloat(item.totalPrice), transaction?.currencyCode || 'PKR')}</td>\n                    </tr>\n                  `).join('') || ''}\n                </tbody>\n              </table>\n            </div>\n\n            <div class=\"totals\">\n              <div class=\"total-row\">\n                <span>Subtotal:</span>\n                <span>${formatAmount(parseFloat(transaction?.subtotal || '0'), transaction?.currencyCode || 'PKR')}</span>\n              </div>\n              ${parseFloat(transaction?.taxAmount || '0') > 0 ? `\n              <div class=\"total-row\">\n                <span>Tax:</span>\n                <span>${formatAmount(parseFloat(transaction?.taxAmount || '0'), transaction?.currencyCode || 'PKR')}</span>\n              </div>` : ''}\n              <div class=\"total-row final\">\n                <span>Total Amount:</span>\n                <span>${formatAmount(parseFloat(transaction?.totalAmount || '0'), transaction?.currencyCode || 'PKR')}</span>\n              </div>\n              ${parseFloat(transaction?.outstandingAmount || '0') > 0 ? `\n              <div class=\"total-row\" style=\"color: #dc2626;\">\n                <span>Outstanding Amount:</span>\n                <span>${formatAmount(parseFloat(transaction?.outstandingAmount || '0'), transaction?.currencyCode || 'PKR')}</span>\n              </div>` : ''}\n            </div>\n\n            <div class=\"footer\">\n              <p>Thank you for your business!</p>\n              <p>This is a computer-generated invoice from FuelFlow Management System</p>\n              <p>Generated on ${new Date().toLocaleString()}</p>\n            </div>\n          </div>\n        </body>\n      </html>\n    `;\n\n    printWindow.document.write(htmlContent);\n    printWindow.document.close();\n\n    printWindow.onload = () => {\n      setTimeout(() => {\n        printWindow.print();\n        printWindow.close();\n      }, 500);\n    };\n  };\n\n  const handleDownloadPDF = () => {\n    const printContent = document.getElementById('invoice-print');\n    if (!printContent) return;\n\n    // Create a clone of the content to manipulate\n    const clonedContent = printContent.cloneNode(true) as HTMLElement;\n\n    // Create a new window for PDF generation\n    const printWindow = window.open('', '_blank');\n    if (!printWindow) return;\n\n    const htmlContent = `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Sales Invoice ${transaction?.invoiceNumber || 'Unknown'}</title>\n          <style>\n            @page { margin: 0.5in; size: A4; }\n            body { font-family: Arial, sans-serif; line-height: 1.4; color: #000; margin: 0; padding: 20px; }\n            .container { max-width: 800px; margin: 0 auto; }\n            .header { display: flex; justify-content: space-between; align-items: start; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 20px; }\n            .station-info h1 { color: #2563eb; font-size: 28px; margin: 0; }\n            .invoice-title { font-size: 24px; font-weight: bold; text-align: right; }\n            .items-table { width: 100%; border-collapse: collapse; margin: 20px 0; }\n            .items-table th, .items-table td { padding: 12px; text-align: left; border-bottom: 1px solid #e5e7eb; }\n            .items-table th { background: #f9fafb; font-weight: bold; }\n            .totals { background: #f9fafb; padding: 20px; border-radius: 8px; margin-top: 20px; }\n            .total-row { display: flex; justify-content: space-between; margin-bottom: 10px; }\n            .footer { text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #e5e7eb; color: #6b7280; font-size: 12px; }\n          </style>\n        </head>\n        <body>\n          ${clonedContent.innerHTML}\n        </body>\n      </html>\n    `;\n\n    printWindow.document.write(htmlContent);\n    printWindow.document.close();\n\n    // Auto-download as PDF\n    setTimeout(() => {\n      printWindow.focus();\n      printWindow.print();\n\n      // Create download link for PDF\n      const blob = new Blob([htmlContent], { type: 'application/pdf' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `invoice-${transaction?.invoiceNumber || 'unknown'}.pdf`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      printWindow.close();\n    }, 1000);\n  };\n\n  const handleDownloadPNG = async () => {\n    const invoiceElement = document.getElementById('invoice-print');\n    if (!invoiceElement) return;\n\n    try {\n      // Create canvas and convert to image\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      if (!ctx) return;\n\n      // Set canvas dimensions\n      canvas.width = 800;\n      canvas.height = 1200;\n\n      // Fill with white background\n      ctx.fillStyle = '#ffffff';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Add text content (simplified version)\n      ctx.fillStyle = '#000000';\n      ctx.font = '16px Arial';\n      ctx.fillText(`Invoice: ${transaction?.invoiceNumber}`, 50, 50);\n      ctx.fillText(`Customer: ${transaction?.customer?.name}`, 50, 80);\n      ctx.fillText(`Amount: ${formatAmount(parseFloat(transaction?.totalAmount || '0'), transaction?.currencyCode || 'PKR')}`, 50, 110);\n\n      // Create download link\n      const link = document.createElement('a');\n      link.download = `invoice-${transaction?.invoiceNumber || 'unknown'}.png`;\n      link.href = canvas.toDataURL('image/png');\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } catch (error) {\n      console.error('PNG download failed:', error);\n      // Fallback notification\n      alert('PNG download not available. Please use print or PDF option.');\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-64 mb-4\"></div>\n          <div className=\"h-4 bg-muted rounded w-48 mb-8\"></div>\n          <div className=\"h-96 bg-muted rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!transaction) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"text-center p-6\">\n            <h2 className=\"text-2xl font-bold mb-2\">Transaction Not Found</h2>\n            <p className=\"text-muted-foreground mb-4\">\n              The requested invoice could not be found.\n            </p>\n            <Link href=\"/sales-history\">\n              <Button>\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Sales History\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const isPaid = parseFloat(transaction.outstandingAmount || '0') === 0;\n  const isOverdue = transaction.dueDate && new Date(transaction.dueDate) < new Date() && !isPaid;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Print/Download Actions - Hidden when printing */}\n      <div className=\"print:hidden sticky top-0 bg-background/80 backdrop-blur-sm border-b z-10\">\n        <div className=\"container mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <Link href=\"/sales-history\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back\n                </Button>\n              </Link>\n              <h1 className=\"text-2xl font-bold\">Invoice #{transaction.invoiceNumber}</h1>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Button \n                onClick={handlePrint} \n                variant=\"outline\" \n                size=\"sm\" \n                className=\"p-2\" \n                data-testid=\"button-print\" \n                title=\"Print Invoice\"\n              >\n                <Printer className=\"w-4 h-4 mr-2\" />\n                Print\n              </Button>\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    className=\"p-2\" \n                    data-testid=\"button-download\" \n                    title=\"Download Options\"\n                  >\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Download\n                    <ChevronDown className=\"w-4 h-4 ml-2\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent>\n                  <DropdownMenuItem onClick={handleDownloadPDF} data-testid=\"download-pdf\">\n                    <FileText className=\"w-4 h-4 mr-2\" />\n                    Download PDF\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={handleDownloadPNG} data-testid=\"download-png\">\n                    <Image className=\"w-4 h-4 mr-2\" />\n                    Download PNG\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Invoice Content */}\n      <div className=\"container mx-auto px-6 py-8 max-w-4xl\">\n        <Card className=\"print:shadow-none print:border-none\">\n          <CardContent className=\"p-8\" id=\"invoice-print\">\n            {/* Header */}\n            <div className=\"text-center mb-8 border-b border-gray-300 pb-6\">\n            <h1 className=\"text-3xl font-bold text-blue-600 mb-2\">{stationSettings?.stationName || 'FuelFlow Station'}</h1>\n            <div className=\"text-sm text-gray-600 space-y-1\">\n              {stationSettings?.address && <p>{stationSettings.address}</p>}\n              {stationSettings?.contactNumber && <p>Phone: {stationSettings.contactNumber}</p>}\n              {stationSettings?.email && <p>Email: {stationSettings.email}</p>}\n              {stationSettings?.gstNumber && <p>GST: {stationSettings.gstNumber}</p>}\n            </div>\n            <p className=\"text-lg text-gray-600 mt-4\">Sales Invoice</p>\n            <p className=\"text-sm text-gray-500\">Invoice #{transaction.invoiceNumber}</p>\n          </div>\n\n            {/* Status Badges */}\n            <div className=\"flex gap-2 mb-6\">\n              <Badge variant={isPaid ? \"default\" : \"secondary\"} data-testid=\"badge-payment-status\">\n                {isPaid ? \"PAID\" : \"UNPAID\"}\n              </Badge>\n              {isOverdue && (\n                <Badge variant=\"destructive\" data-testid=\"badge-overdue\">\n                  OVERDUE\n                </Badge>\n              )}\n              <Badge variant=\"outline\" data-testid=\"badge-payment-method\">\n                {transaction.paymentMethod.toUpperCase()}\n              </Badge>\n            </div>\n\n            {/* Customer Info */}\n            <div className=\"grid md:grid-cols-2 gap-8 mb-8\">\n              <div>\n                <h3 className=\"font-semibold text-lg mb-3\">Bill To:</h3>\n                <div className=\"space-y-1\">\n                  <p className=\"font-semibold\" data-testid=\"text-customer-name\">{transaction.customer.name}</p>\n                  {transaction.customer.contactPhone && (\n                    <p data-testid=\"text-customer-phone\">Phone: {transaction.customer.contactPhone}</p>\n                  )}\n                  {transaction.customer.contactEmail && (\n                    <p data-testid=\"text-customer-email\">Email: {transaction.customer.contactEmail}</p>\n                  )}\n                  {transaction.customer.address && (\n                    <p data-testid=\"text-customer-address\">{transaction.customer.address}</p>\n                  )}\n                </div>\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-lg mb-3\">Transaction Details:</h3>\n                <div className=\"space-y-1 text-sm\">\n                  <p><span className=\"font-semibold\">Cashier:</span> <span data-testid=\"text-cashier-name\">{transaction.user.fullName}</span></p>\n                  <p><span className=\"font-semibold\">Currency:</span> <span data-testid=\"text-currency\">{transaction.currencyCode}</span></p>\n                  {transaction.notes && (\n                    <p><span className=\"font-semibold\">Notes:</span> <span data-testid=\"text-notes\">{transaction.notes}</span></p>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            <Separator className=\"mb-6\" />\n\n            {/* Line Items */}\n            <div className=\"mb-8\">\n              <h3 className=\"font-semibold text-lg mb-4\">Items</h3>\n              <div className=\"border rounded-lg\">\n                <div className=\"grid grid-cols-12 gap-4 p-4 bg-muted/50 font-semibold text-sm border-b\">\n                  <div className=\"col-span-5\">Product</div>\n                  <div className=\"col-span-2 text-right\">Quantity</div>\n                  <div className=\"col-span-2 text-right\">Unit Price</div>\n                  <div className=\"col-span-3 text-right\">Total</div>\n                </div>\n                {transaction.items.map((item, index) => (\n                  <div key={item.id} className=\"grid grid-cols-12 gap-4 p-4 border-b last:border-b-0\" data-testid={`row-item-${index}`}>\n                    <div className=\"col-span-5\">\n                      <div className=\"font-semibold\" data-testid={`text-product-name-${index}`}>{item.product.name}</div>\n                      {item.product.hsnCode && (\n                        <div className=\"text-xs text-muted-foreground\" data-testid={`text-hsn-${index}`}>\n                          HSN: {item.product.hsnCode}\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"col-span-2 text-right\" data-testid={`text-quantity-${index}`}>\n                      {parseFloat(item.quantity).toFixed(3)} {item.product.unit}\n                    </div>\n                    <div className=\"col-span-2 text-right\" data-testid={`text-unit-price-${index}`}>\n                      {formatAmount(parseFloat(item.unitPrice), transaction.currencyCode)}\n                    </div>\n                    <div className=\"col-span-3 text-right font-semibold\" data-testid={`text-total-price-${index}`}>\n                      {formatAmount(parseFloat(item.totalPrice), transaction.currencyCode)}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Totals */}\n            <div className=\"flex justify-end mb-8\">\n              <div className=\"w-full max-w-sm space-y-2\">\n                <div className=\"flex justify-between text-lg font-semibold\">\n                  <span>Total Amount:</span>\n                  <span data-testid=\"text-total-amount\">{formatAmount(parseFloat(transaction.totalAmount ?? '0'), transaction.currencyCode)}</span>\n                </div>\n                {parseFloat(transaction.paidAmount ?? '0') > 0 && (\n                  <div className=\"flex justify-between text-green-600\">\n                    <span>Amount Paid:</span>\n                    <span data-testid=\"text-paid-amount\">{formatAmount(parseFloat(transaction.paidAmount || '0'), transaction.currencyCode)}</span>\n                  </div>\n                )}\n                {parseFloat(transaction.outstandingAmount ?? '0') > 0 && (\n                  <div className=\"flex justify-between text-red-600 font-semibold\">\n                    <span>Outstanding:</span>\n                    <span data-testid=\"text-outstanding-amount\">{formatAmount(parseFloat(transaction.outstandingAmount ?? '0'), transaction.currencyCode)}</span>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Footer */}\n            <Separator className=\"mb-6\" />\n            <div className=\"text-center text-sm text-muted-foreground\">\n              <p>Thank you for your business!</p>\n              {stationSettings?.licenseNumber && (\n                <p className=\"mt-1\">License: {stationSettings.licenseNumber}</p>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":24163},"client/src/pages/PointOfSale.tsx":{"content":"","size_bytes":0},"client/src/pages/PriceManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport type { Product } from \"@shared/schema\";\nimport { insertProductSchema } from \"@shared/schema\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCurrency } from \"@/contexts/CurrencyContext\";\nimport { apiRequest } from \"@/lib/api\";\nimport { Plus, Edit3, TrendingUp, Clock, Calendar, AlertTriangle, Download, Save, History, Bell } from \"lucide-react\";\n\nexport default function PriceManagement() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { currencyConfig } = useCurrency();\n  const [open, setOpen] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n  const [priceEditOpen, setPriceEditOpen] = useState(false);\n  const [selectedProductForPrice, setSelectedProductForPrice] = useState<Product | null>(null);\n  const [newPrice, setNewPrice] = useState(\"\");\n  const [bulkUpdateOpen, setBulkUpdateOpen] = useState(false);\n  const [priceHistoryOpen, setPriceHistoryOpen] = useState(false);\n  const [scheduleDialogOpen, setScheduleDialogOpen] = useState(false);\n  const [selectedProductForSchedule, setSelectedProductForSchedule] = useState<Product | null>(null);\n\n  const form = useForm({\n    resolver: zodResolver(insertProductSchema),\n    defaultValues: {\n      name: \"\",\n      category: \"fuel\",\n      unit: \"litre\",\n      currentPrice: \"0\",\n      density: \"0.750\",\n      hsnCode: \"\",\n    },\n  });\n\n  const createProductMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/products\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Product created\",\n        description: \"New product has been added successfully\",\n      });\n      setOpen(false);\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    createProductMutation.mutate(data);\n  };\n\n  const { data: products = [], isLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const updatePriceMutation = useMutation({\n    mutationFn: async ({ productId, newPrice }: { productId: string; newPrice: number }) => {\n      const response = await apiRequest(\"PUT\", `/api/products/${productId}`, {\n        currentPrice: newPrice.toString()\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Price updated\",\n        description: \"Product price updated successfully\",\n      });\n      setPriceEditOpen(false);\n      setSelectedProductForPrice(null);\n      setNewPrice(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Price update failed\",\n        description: \"Failed to update product price\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEditPrice = (product: Product) => {\n    setSelectedProductForPrice(product);\n    setNewPrice(product.currentPrice || \"0\");\n    setPriceEditOpen(true);\n  };\n\n  const handleUpdatePrice = () => {\n    if (selectedProductForPrice && newPrice) {\n      updatePriceMutation.mutate({\n        productId: selectedProductForPrice.id,\n        newPrice: parseFloat(newPrice)\n      });\n    }\n  };\n\n  const handleViewHistory = (product: Product) => {\n    setSelectedProductForPrice(product);\n    setPriceHistoryOpen(true);\n  };\n\n  const handleSchedulePrice = (product: Product) => {\n    setSelectedProductForSchedule(product);\n    setScheduleDialogOpen(true);\n  };\n\n  const handleBulkUpdate = () => {\n    setBulkUpdateOpen(true);\n  };\n\n  const handlePriceHistory = () => {\n    setPriceHistoryOpen(true);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/3 mb-4\"></div>\n          <div className=\"h-4 bg-muted rounded w-1/2 mb-8\"></div>\n          <div className=\"h-96 bg-muted rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6 fade-in\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-2xl font-semibold text-card-foreground\">Price Management</h3>\n          <p className=\"text-muted-foreground\">Manage product pricing and profit margins</p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Dialog open={open} onOpenChange={setOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-add-product\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Product\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[500px] max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Add New Product</DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Product Name *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter product name\" {...field} data-testid=\"input-product-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"category\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Category *</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-product-category\">\n                                <SelectValue placeholder=\"Select category\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"fuel\">Fuel</SelectItem>\n                              <SelectItem value=\"lubricant\">Lubricant</SelectItem>\n                              <SelectItem value=\"additive\">Additive</SelectItem>\n                              <SelectItem value=\"other\">Other</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"unit\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Unit *</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-product-unit\">\n                                <SelectValue placeholder=\"Select unit\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"litre\">Litre</SelectItem>\n                              <SelectItem value=\"kilogram\">Kilogram</SelectItem>\n                              <SelectItem value=\"piece\">Piece</SelectItem>\n                              <SelectItem value=\"bottle\">Bottle</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"currentPrice\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Price ({currencyConfig.symbol}) *</FormLabel>\n                          <FormControl>\n                            <Input type=\"number\" step=\"0.01\" placeholder=\"0.00\" {...field} data-testid=\"input-product-price\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"hsnCode\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>HSN Code</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Enter HSN code\" {...field} data-testid=\"input-product-hsn\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"density\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Density (for fuels)</FormLabel>\n                          <FormControl>\n                            <Input type=\"number\" step=\"0.001\" placeholder=\"0.750\" {...field} data-testid=\"input-product-density\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <div className=\"flex justify-end space-x-2 pt-4\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setOpen(false)} data-testid=\"button-cancel\">\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\" disabled={createProductMutation.isPending} data-testid=\"button-submit-product\">\n                      {createProductMutation.isPending ? \"Creating...\" : \"Create Product\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n          <Button onClick={handleBulkUpdate} data-testid=\"button-bulk-price-update\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            Bulk Update\n          </Button>\n          <Button variant=\"outline\" onClick={handlePriceHistory} data-testid=\"button-price-history\">\n            <TrendingUp className=\"w-4 h-4 mr-2\" />\n            Price History\n          </Button>\n        </div>\n      </div>\n\n      {/* Market Prices Overview */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Current Market Rates</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {products.slice(0, 3).map((product: Product, index: number) => {\n              const colors = [\n                { bg: 'bg-green-50', border: 'border-green-200', text: 'text-green-600', label: 'text-green-700', change: 'text-green-600' },\n                { bg: 'bg-blue-50', border: 'border-blue-200', text: 'text-blue-600', label: 'text-blue-700', change: 'text-blue-600' },\n                { bg: 'bg-purple-50', border: 'border-purple-200', text: 'text-purple-600', label: 'text-purple-700', change: 'text-purple-600' }\n              ];\n              const color = colors[index % colors.length];\n              \n              return (\n                <div key={product.id} className={`p-4 ${color.bg} rounded-lg border ${color.border}`}>\n                  <div className=\"text-center\">\n                    <div className={`text-2xl font-bold ${color.text}`} data-testid={`market-${product.name.toLowerCase()}-price`}>\n                      ‚Çπ{parseFloat(product.currentPrice || '0').toFixed(2)}\n                    </div>\n                    <div className={`text-sm ${color.label}`}>{product.name} - Current Rate</div>\n                    <div className={`text-xs ${color.change} mt-1`}>‚Üí Market rate</div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Product Pricing Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Product Price Management</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-muted\">\n                <tr>\n                  <th className=\"text-left p-3 font-medium\">Product</th>\n                  <th className=\"text-center p-3 font-medium\">Category</th>\n                  <th className=\"text-right p-3 font-medium\">Cost Price</th>\n                  <th className=\"text-right p-3 font-medium\">Selling Price</th>\n                  <th className=\"text-right p-3 font-medium\">Margin</th>\n                  <th className=\"text-center p-3 font-medium\">Last Updated</th>\n                  <th className=\"text-center p-3 font-medium\">Status</th>\n                  <th className=\"text-center p-3 font-medium\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {products.length > 0 ? products.map((product: Product, index: number) => {\n                  const currentPrice = parseFloat(product.currentPrice || '0');\n                  const estimatedCost = currentPrice * 0.95; // Estimated cost is 95% of selling price\n                  const marginPercentage = ((currentPrice - estimatedCost) / estimatedCost * 100).toFixed(2);\n                  \n                  return (\n                    <tr key={product.id} className=\"border-b border-border hover:bg-muted/50\">\n                      <td className=\"p-3\">\n                        <div className=\"font-medium text-card-foreground\" data-testid={`product-name-${index}`}>\n                          {product.name}\n                        </div>\n                      </td>\n                      <td className=\"p-3 text-center\">\n                        <Badge variant=\"secondary\" data-testid={`product-category-${index}`}>\n                          {product.category}\n                        </Badge>\n                      </td>\n                      <td className=\"p-3 text-right font-mono\" data-testid={`cost-price-${index}`}>\n                        ‚Çπ{estimatedCost.toFixed(2)}\n                      </td>\n                      <td className=\"p-3 text-right\">\n                        <div className=\"flex items-center justify-end space-x-2\">\n                          <span className=\"font-semibold font-mono\" data-testid={`selling-price-${index}`}>\n                            ‚Çπ{currentPrice.toFixed(2)}\n                          </span>\n                        </div>\n                      </td>\n                      <td className=\"p-3 text-right\">\n                        <span className={`font-semibold ${parseFloat(marginPercentage) > 5 ? 'text-green-600' : \n                                      parseFloat(marginPercentage) > 2 ? 'text-orange-600' : 'text-red-600'}`}\n                              data-testid={`margin-${index}`}>\n                          {marginPercentage}%\n                        </span>\n                      </td>\n                      <td className=\"p-3 text-center text-sm\">\n                        {product.createdAt ? new Date(product.createdAt).toLocaleDateString('en-GB') : 'N/A'}\n                      </td>\n                      <td className=\"p-3 text-center\">\n                        <Badge\n                          variant={product.isActive ? 'default' : 'secondary'}\n                          className={product.isActive ? 'bg-green-100 text-green-800' : ''}\n                          data-testid={`product-status-${index}`}\n                        >\n                          {product.isActive ? 'Active' : 'Inactive'}\n                        </Badge>\n                      </td>\n                      <td className=\"p-3 text-center\">\n                        <div className=\"flex items-center justify-center space-x-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"h-8 w-8 text-blue-600 hover:text-blue-800 hover:bg-blue-50\"\n                            onClick={() => handleEditPrice(product)}\n                            data-testid={`button-edit-price-${index}`}\n                          >\n                            <Edit3 className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"h-8 w-8 text-green-600 hover:text-green-800 hover:bg-green-50\"\n                            onClick={() => handleViewHistory(product)}\n                            data-testid={`button-history-${index}`}\n                          >\n                            <TrendingUp className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"h-8 w-8 text-purple-600 hover:text-purple-800 hover:bg-purple-50\"\n                            onClick={() => handleSchedulePrice(product)}\n                            data-testid={`button-schedule-${index}`}\n                          >\n                            <Clock className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  );\n                }) : (\n                  <tr>\n                    <td colSpan={8} className=\"p-8 text-center text-muted-foreground\">\n                      No products found\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Price Change Alerts */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Price Change Notifications</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            <div className=\"p-3 bg-green-50 border border-green-200 rounded-md\">\n              <div className=\"flex items-start\">\n                <TrendingUp className=\"w-4 h-4 text-green-500 mr-2 mt-0.5\" />\n                <div>\n                  <div className=\"text-sm font-medium text-green-800\">Price Increase</div>\n                  <div className=\"text-xs text-green-600\">\n                    Petrol price increased by ‚Çπ0.50 to ‚Çπ110.50 per liter effective from today\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"p-3 bg-red-50 border border-red-200 rounded-md\">\n              <div className=\"flex items-start\">\n                <TrendingUp className=\"w-4 h-4 text-red-500 mr-2 mt-0.5 rotate-180\" />\n                <div>\n                  <div className=\"text-sm font-medium text-red-800\">Price Decrease</div>\n                  <div className=\"text-xs text-red-600\">\n                    Diesel price decreased by ‚Çπ0.25 to ‚Çπ84.25 per liter effective from today\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"p-3 bg-yellow-50 border border-yellow-200 rounded-md\">\n              <div className=\"flex items-start\">\n                <AlertTriangle className=\"w-4 h-4 text-yellow-500 mr-2 mt-0.5\" />\n                <div>\n                  <div className=\"text-sm font-medium text-yellow-800\">Margin Alert</div>\n                  <div className=\"text-xs text-yellow-600\">\n                    Diesel margin has dropped below 3%. Consider adjusting selling price.\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Price Edit Dialog */}\n      <Dialog open={priceEditOpen} onOpenChange={setPriceEditOpen}>\n        <DialogContent className=\"sm:max-w-[400px]\">\n          <DialogHeader>\n            <DialogTitle>Update Price - {selectedProductForPrice?.name}</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium\">Current Price</label>\n              <div className=\"text-lg font-semibold text-muted-foreground\">\n                {selectedProductForPrice && `‚Çπ${parseFloat(selectedProductForPrice.currentPrice || '0').toFixed(2)}`}\n              </div>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">New Price ({currencyConfig.symbol})</label>\n              <Input\n                type=\"number\"\n                step=\"0.01\"\n                value={newPrice}\n                onChange={(e) => setNewPrice(e.target.value)}\n                placeholder=\"Enter new price\"\n                className=\"mt-1\"\n              />\n            </div>\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setPriceEditOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleUpdatePrice}\n                disabled={updatePriceMutation.isPending || !newPrice}\n              >\n                {updatePriceMutation.isPending ? \"Updating...\" : \"Update Price\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Bulk Update Dialog */}\n      <Dialog open={bulkUpdateOpen} onOpenChange={setBulkUpdateOpen}>\n        <DialogContent className=\"sm:max-w-[600px]\">\n          <DialogHeader>\n            <DialogTitle>Bulk Price Update</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"p-4 bg-muted rounded-lg\">\n              <h4 className=\"font-medium mb-2\">Update Multiple Products</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Select products and apply percentage or fixed amount changes.\n              </p>\n            </div>\n            <div className=\"space-y-3\">\n              <div>\n                <Label>Update Type</Label>\n                <Select defaultValue=\"percentage\">\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"percentage\">Percentage Change</SelectItem>\n                    <SelectItem value=\"fixed\">Fixed Amount</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label>Value</Label>\n                <Input placeholder=\"Enter percentage or amount\" />\n              </div>\n            </div>\n            <div className=\"flex justify-end space-x-2\">\n              <Button variant=\"outline\" onClick={() => setBulkUpdateOpen(false)}>\n                Cancel\n              </Button>\n              <Button>Apply Changes</Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Price History Dialog */}\n      <Dialog open={priceHistoryOpen} onOpenChange={setPriceHistoryOpen}>\n        <DialogContent className=\"sm:max-w-[700px]\">\n          <DialogHeader>\n            <DialogTitle>\n              Price History {selectedProductForPrice ? `- ${selectedProductForPrice.name}` : 'Report'}\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"p-4 bg-muted rounded-lg\">\n              <h4 className=\"font-medium mb-2\">Price Change History</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Track price changes over time for better pricing decisions.\n              </p>\n            </div>\n            <div className=\"space-y-2\">\n              {[\n                { date: \"2024-01-15\", oldPrice: \"285.00\", newPrice: \"290.00\", reason: \"Market adjustment\" },\n                { date: \"2024-01-10\", oldPrice: \"280.00\", newPrice: \"285.00\", reason: \"Supplier cost increase\" },\n                { date: \"2024-01-05\", oldPrice: \"275.00\", newPrice: \"280.00\", reason: \"Government tax revision\" }\n              ].map((change, index) => (\n                <div key={index} className=\"flex justify-between items-center p-3 border rounded-lg\">\n                  <div>\n                    <div className=\"font-medium\">{change.date}</div>\n                    <div className=\"text-sm text-muted-foreground\">{change.reason}</div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"line-through text-red-600\">‚Çπ{change.oldPrice}</div>\n                    <div className=\"font-semibold text-green-600\">‚Çπ{change.newPrice}</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n            <div className=\"flex justify-end\">\n              <Button variant=\"outline\" onClick={() => setPriceHistoryOpen(false)}>\n                Close\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Schedule Price Dialog */}\n      <Dialog open={scheduleDialogOpen} onOpenChange={setScheduleDialogOpen}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>\n              Schedule Price Change {selectedProductForSchedule ? `- ${selectedProductForSchedule.name}` : ''}\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label>New Price ({currencyConfig.symbol})</Label>\n              <Input type=\"number\" step=\"0.01\" placeholder=\"Enter new price\" />\n            </div>\n            <div>\n              <Label>Effective Date</Label>\n              <Input type=\"datetime-local\" />\n            </div>\n            <div>\n              <Label>Reason for Change</Label>\n              <Select>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select reason\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"market\">Market Adjustment</SelectItem>\n                  <SelectItem value=\"supplier\">Supplier Cost Change</SelectItem>\n                  <SelectItem value=\"tax\">Tax Revision</SelectItem>\n                  <SelectItem value=\"promotion\">Promotional Pricing</SelectItem>\n                  <SelectItem value=\"other\">Other</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex justify-end space-x-2\">\n              <Button variant=\"outline\" onClick={() => setScheduleDialogOpen(false)}>\n                Cancel\n              </Button>\n              <Button>Schedule Change</Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":28402},"client/src/pages/PurchaseOrders.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport type { PurchaseOrder, Supplier, Product } from \"@shared/schema\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCurrency } from \"@/contexts/CurrencyContext\";\nimport { apiRequest } from \"@/lib/api\";\nimport { Combobox } from \"@/components/ui/combobox\";\nimport { Eye, Edit, Printer, Trash2, Plus, Download } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { DeleteConfirmation } from \"@/components/ui/delete-confirmation\";\nimport { generatePrintTemplate, printDocument, downloadAsPDF, downloadAsPNG } from \"@/lib/printUtils\";\n\nconst lineItemSchema = z.object({\n  productId: z.string().min(1, \"Product is required\"),\n  quantity: z.string().min(1, \"Quantity is required\").refine((val) => parseFloat(val) > 0, \"Quantity must be greater than 0\"),\n  unitPrice: z.string().min(1, \"Unit price is required\").refine((val) => parseFloat(val) > 0, \"Unit price must be greater than 0\"),\n});\n\nconst purchaseOrderSchema = z.object({\n  orderNumber: z.string().min(1, \"Order number is required\"),\n  supplierId: z.string().min(1, \"Supplier is required\"),\n  orderDate: z.string().min(1, \"Order date is required\"),\n  expectedDeliveryDate: z.string().optional(),\n  status: z.string().default(\"pending\"),\n  items: z.array(lineItemSchema).min(1, \"At least one item is required\"),\n  notes: z.string().optional(),\n});\n\nexport default function PurchaseOrders() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { formatCurrency, currencyConfig } = useCurrency();\n  const [, navigate] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [open, setOpen] = useState(false);\n  const [editOrderId, setEditOrderId] = useState<string | null>(null);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [orderToDelete, setOrderToDelete] = useState<PurchaseOrder | null>(null);\n  const [lineItems, setLineItems] = useState([{\n    productId: \"\",\n    quantity: \"\",\n    unitPrice: \"\",\n  }]);\n\n  const form = useForm({\n    resolver: zodResolver(purchaseOrderSchema),\n    defaultValues: {\n      orderNumber: `PO-${Date.now()}`,\n      supplierId: \"\",\n      orderDate: new Date().toISOString().split('T')[0],\n      expectedDeliveryDate: \"\",\n      status: \"pending\",\n      items: [{\n        productId: \"\",\n        quantity: \"\",\n        unitPrice: \"\",\n      }],\n      notes: \"\",\n    },\n  });\n\n  const createPurchaseOrderMutation = useMutation({\n    mutationFn: async (data: any) => {\n      console.log(\"Creating purchase order with validated data:\", data);\n      \n      if (!user?.stationId || !user?.id) {\n        throw new Error(\"User session not loaded properly\");\n      }\n\n      // Calculate totals from line items\n      const subtotal = data.items.reduce((sum: number, item: any) => \n        sum + (parseFloat(item.quantity || '0') * parseFloat(item.unitPrice || '0')), 0\n      );\n      const taxAmount = 0; // No tax for now\n      const totalAmount = subtotal + taxAmount;\n\n      // Prepare line items with calculated totals\n      const itemsWithTotals = data.items.map((item: any) => ({\n        productId: item.productId,\n        quantity: item.quantity,\n        unitPrice: item.unitPrice,\n        totalPrice: (parseFloat(item.quantity || '0') * parseFloat(item.unitPrice || '0')).toString(),\n      }));\n\n      const orderData = {\n        orderNumber: data.orderNumber,\n        stationId: user.stationId,\n        supplierId: data.supplierId,\n        userId: user.id,\n        orderDate: data.orderDate,\n        expectedDeliveryDate: data.expectedDeliveryDate || null,\n        status: data.status,\n        currencyCode: currencyConfig.code,\n        subtotal: subtotal.toString(),\n        taxAmount: taxAmount.toString(),\n        totalAmount: totalAmount.toString(),\n        notes: data.notes || \"\",\n      };\n\n      console.log(\"Final order data being sent:\", orderData);\n      console.log(\"Items being sent:\", itemsWithTotals);\n      \n      const response = await apiRequest(\"POST\", \"/api/purchase-orders\", { order: orderData, items: itemsWithTotals });\n      if (!response.ok) {\n        const error = await response.json().catch(() => ({ message: response.statusText }));\n        throw new Error(error.message || 'Failed to create purchase order');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Purchase order created\",\n        description: \"Purchase order has been created successfully\",\n      });\n      setOpen(false);\n      form.reset({\n        orderNumber: `PO-${Date.now()}`,\n        supplierId: \"\",\n        orderDate: new Date().toISOString().split('T')[0],\n        expectedDeliveryDate: \"\",\n        status: \"pending\",\n        items: [{\n          productId: \"\",\n          quantity: \"\",\n          unitPrice: \"\",\n        }],\n        notes: \"\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders\", user?.stationId] });\n    },\n    onError: (error: any) => {\n      console.error(\"Purchase order creation error:\", error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create purchase order\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePurchaseOrderMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const orderData = {\n        ...data,\n        stationId: user?.stationId,\n        userId: user?.id,\n        currencyCode: currencyConfig.code,\n      };\n      const response = await apiRequest(\"PUT\", `/api/purchase-orders/${id}`, orderData);\n      if (!response.ok) throw new Error('Failed to update purchase order');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Purchase order updated\",\n        description: \"Purchase order has been updated successfully\",\n      });\n      setEditOrderId(null);\n      setOpen(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders\", user?.stationId] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update purchase order\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deletePurchaseOrderMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/purchase-orders/${id}`);\n      if (!response.ok) throw new Error('Failed to delete purchase order');\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Purchase order deleted\",\n        description: \"Purchase order has been deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders\", user?.stationId] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete purchase order\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    console.log(\"Form submitted with data:\", data);\n    \n    if (editOrderId) {\n      updatePurchaseOrderMutation.mutate({ id: editOrderId, data });\n    } else {\n      createPurchaseOrderMutation.mutate(data);\n    }\n  };\n\n  const { data: purchaseOrders = [], isLoading: isLoadingPurchaseOrders } = useQuery<PurchaseOrder[]>({\n    queryKey: [\"/api/purchase-orders\", user?.stationId],\n    enabled: !!user?.stationId,\n  });\n\n  const { data: suppliers = [] } = useQuery<Supplier[]>({\n    queryKey: [\"/api/suppliers\"],\n  });\n\n  const { data: products = [] } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const filteredOrders = purchaseOrders.filter((order: PurchaseOrder) => {\n    const matchesSearch = order.orderNumber?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || order.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  const handleDeleteOrder = (order: PurchaseOrder) => {\n    setOrderToDelete(order);\n    setDeleteDialogOpen(true);\n  };\n\n  const confirmDeleteOrder = () => {\n    if (orderToDelete) {\n      deletePurchaseOrderMutation.mutate(orderToDelete.id);\n      setDeleteDialogOpen(false);\n      setOrderToDelete(null);\n    }\n  };\n\n  const handleViewOrder = (order: PurchaseOrder) => {\n    navigate(`/purchase-invoice/${order.id}`);\n  };\n\n  const handlePrint = (order: PurchaseOrder) => {\n    const supplier = suppliers.find(s => s.id === order.supplierId);\n    const orderData = {\n      ...order,\n      supplier,\n      items: []\n    };\n    const template = generatePrintTemplate(orderData, 'invoice');\n    printDocument(template);\n  };\n\n  const handleDownloadPDF = (order: PurchaseOrder) => {\n    const supplier = suppliers.find(s => s.id === order.supplierId);\n    const orderData = {\n      ...order,\n      supplier,\n      items: []\n    };\n    const template = generatePrintTemplate(orderData, 'invoice');\n    downloadAsPDF(template);\n  };\n\n  const handleDownloadPNG = (order: PurchaseOrder) => {\n    const supplier = suppliers.find(s => s.id === order.supplierId);\n    const orderData = {\n      ...order,\n      supplier,\n      items: []\n    };\n    const template = generatePrintTemplate(orderData, 'invoice');\n    downloadAsPNG(template);\n  };\n\n  if (isLoadingPurchaseOrders) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/3 mb-4\"></div>\n          <div className=\"h-4 bg-muted rounded w-1/2 mb-8\"></div>\n          <div className=\"h-96 bg-muted rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const pendingOrders = filteredOrders.filter((o: PurchaseOrder) => o.status === 'pending').length;\n  const deliveredOrders = filteredOrders.filter((o: PurchaseOrder) => o.status === 'delivered').length;\n  const totalValue = filteredOrders.reduce((sum: number, o: PurchaseOrder) => sum + parseFloat(o.totalAmount || '0'), 0);\n\n  return (\n    <div className=\"space-y-6 fade-in\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <div>\n          <h3 className=\"text-2xl font-semibold text-card-foreground\">Purchase Orders</h3>\n          <p className=\"text-muted-foreground\">Manage fuel procurement and supplier orders</p>\n        </div>\n        <Dialog open={open} onOpenChange={(isOpen) => { \n          setOpen(isOpen);\n          if (!isOpen) { \n            setEditOrderId(null); \n            form.reset({\n              orderNumber: `PO-${Date.now()}`,\n              supplierId: \"\",\n              orderDate: new Date().toISOString().split('T')[0],\n              expectedDeliveryDate: \"\",\n              status: \"pending\",\n              items: [{\n                productId: \"\",\n                quantity: \"\",\n                unitPrice: \"\",\n              }],\n              notes: \"\",\n            });\n          } \n        }}>\n          <DialogTrigger asChild>\n            <Button className=\"w-full sm:w-auto\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Purchase Order\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[600px] max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>{editOrderId ? \"Edit Purchase Order\" : \"Create New Purchase Order\"}</DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"orderNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Order Number *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"PO-123456\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"supplierId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Supplier *</FormLabel>\n                        <FormControl>\n                          <Combobox\n                            options={suppliers.map(s => ({ value: s.id, label: s.name }))}\n                            value={field.value}\n                            onValueChange={field.onChange}\n                            placeholder=\"Select supplier\"\n                            emptyMessage=\"No suppliers found\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"orderDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Order Date *</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"expectedDeliveryDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Expected Delivery Date</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                {/* Line Items Section */}\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-lg font-medium\">Order Items</h3>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        const currentItems = form.getValues(\"items\");\n                        form.setValue(\"items\", [...currentItems, { productId: \"\", quantity: \"\", unitPrice: \"\" }]);\n                      }}\n                      data-testid=\"button-add-item\"\n                    >\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Add Item\n                    </Button>\n                  </div>\n                  \n                  {form.watch(\"items\").map((_, index) => (\n                    <div key={index} className=\"grid grid-cols-12 gap-2 items-end border rounded-lg p-4\">\n                      <div className=\"col-span-5\">\n                        <FormField\n                          control={form.control}\n                          name={`items.${index}.productId`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Product *</FormLabel>\n                              <FormControl>\n                                <Select onValueChange={field.onChange} value={field.value}>\n                                  <SelectTrigger data-testid={`select-product-${index}`}>\n                                    <SelectValue placeholder=\"Select product\" />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    {products.map((product) => (\n                                      <SelectItem key={product.id} value={product.id}>\n                                        {product.name} - {formatCurrency(parseFloat(product.currentPrice))}\n                                      </SelectItem>\n                                    ))}\n                                  </SelectContent>\n                                </Select>\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <div className=\"col-span-2\">\n                        <FormField\n                          control={form.control}\n                          name={`items.${index}.quantity`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Quantity *</FormLabel>\n                              <FormControl>\n                                <Input\n                                  type=\"number\"\n                                  step=\"0.001\"\n                                  placeholder=\"0\"\n                                  {...field}\n                                  data-testid={`input-quantity-${index}`}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <div className=\"col-span-3\">\n                        <FormField\n                          control={form.control}\n                          name={`items.${index}.unitPrice`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Unit Price *</FormLabel>\n                              <FormControl>\n                                <Input\n                                  type=\"number\"\n                                  step=\"0.01\"\n                                  placeholder=\"0.00\"\n                                  {...field}\n                                  data-testid={`input-unitprice-${index}`}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <div className=\"col-span-2 flex items-center justify-between\">\n                        <div className=\"text-sm font-medium\">\n                          {formatCurrency(\n                            (parseFloat(form.watch(`items.${index}.quantity`) || '0') * \n                             parseFloat(form.watch(`items.${index}.unitPrice`) || '0'))\n                          )}\n                        </div>\n                        {form.watch(\"items\").length > 1 && (\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => {\n                              const currentItems = form.getValues(\"items\");\n                              form.setValue(\"items\", currentItems.filter((_, i) => i !== index));\n                            }}\n                            data-testid={`button-remove-item-${index}`}\n                          >\n                            <Trash2 className=\"w-4 h-4 text-red-500\" />\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                  \n                  {/* Totals Display */}\n                  <div className=\"bg-muted/50 rounded-lg p-4 space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Subtotal:</span>\n                      <span data-testid=\"text-calculated-subtotal\">\n                        {formatCurrency(\n                          form.watch(\"items\").reduce((sum, item) => \n                            sum + (parseFloat(item.quantity || '0') * parseFloat(item.unitPrice || '0')), 0\n                          )\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Tax (0%):</span>\n                      <span>\n                        {formatCurrency(0)}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between font-semibold\">\n                      <span>Total:</span>\n                      <span data-testid=\"text-calculated-total\">\n                        {formatCurrency(\n                          form.watch(\"items\").reduce((sum, item) => \n                            sum + (parseFloat(item.quantity || '0') * parseFloat(item.unitPrice || '0')), 0\n                          )\n                        )}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                <FormField\n                  control={form.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Notes</FormLabel>\n                      <FormControl>\n                        <Textarea placeholder=\"Order details and special instructions\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex flex-col sm:flex-row justify-end space-y-2 sm:space-y-0 sm:space-x-2 pt-4\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => { \n                      setOpen(false); \n                      setEditOrderId(null); \n                    }} className=\"w-full sm:w-auto\">\n                      Cancel\n                    </Button>\n                  <Button type=\"submit\" disabled={createPurchaseOrderMutation.isPending || updatePurchaseOrderMutation.isPending} className=\"w-full sm:w-auto\">\n                    {editOrderId ? \"Update Purchase Order\" : \"Create Purchase Order\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Purchase Order Stats */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-xl md:text-2xl font-bold text-primary\">\n              {filteredOrders.length}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Total Orders</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-xl md:text-2xl font-bold text-orange-600\">\n              {pendingOrders}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Pending Orders</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-xl md:text-2xl font-bold text-green-600\">\n              {deliveredOrders}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Delivered Orders</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-xl md:text-2xl font-bold text-purple-600\">\n              {formatCurrency(totalValue)}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Total Value</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Purchase Orders Table */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n            <CardTitle>Purchase Order History</CardTitle>\n            <div className=\"flex flex-col sm:flex-row items-stretch sm:items-center space-y-2 sm:space-y-0 sm:space-x-2 w-full sm:w-auto\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search by PO number...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full sm:w-48\"\n              />\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-full sm:w-32\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"delivered\">Delivered</SelectItem>\n                  <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-muted\">\n                <tr>\n                  <th className=\"text-left p-3 font-medium\">PO Number</th>\n                  <th className=\"text-left p-3 font-medium\">Supplier</th>\n                  <th className=\"text-right p-3 font-medium\">Amount</th>\n                  <th className=\"text-center p-3 font-medium\">Order Date</th>\n                  <th className=\"text-center p-3 font-medium\">Status</th>\n                  <th className=\"text-center p-3 font-medium\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {filteredOrders.length > 0 ? filteredOrders.map((order: PurchaseOrder, index: number) => {\n                  const supplier = suppliers.find(s => s.id === order.supplierId);\n\n                  return (\n                    <tr key={order.id} className=\"border-b border-border hover:bg-muted/50\">\n                      <td className=\"p-3\">\n                        <span className=\"font-medium text-primary\">\n                          {order.orderNumber}\n                        </span>\n                      </td>\n                      <td className=\"p-3\">{supplier?.name || 'Unknown Supplier'}</td>\n                      <td className=\"p-3 text-right font-semibold\">\n                        {formatCurrency(parseFloat(order.totalAmount || '0'))}\n                      </td>\n                      <td className=\"p-3 text-center text-sm\">\n                        {order.orderDate ? new Date(order.orderDate).toLocaleDateString('en-GB') : 'N/A'}\n                      </td>\n                      <td className=\"p-3 text-center\">\n                        <Badge\n                          variant={order.status === 'delivered' ? 'default' :\n                                  order.status === 'pending' ? 'secondary' : 'destructive'}\n                          className={order.status === 'delivered' ? 'bg-green-100 text-green-800' :\n                                    order.status === 'pending' ? 'bg-yellow-100 text-yellow-800' : ''}\n                        >\n                          {order.status}\n                        </Badge>\n                      </td>\n                      <td className=\"p-3 text-center\">\n                        <div className=\"flex items-center space-x-1 justify-center\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleViewOrder(order)}\n                            className=\"p-2 text-blue-600 hover:text-blue-800\"\n                            title=\"View invoice\"\n                          >\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setEditOrderId(order.id);\n                              form.reset({\n                                orderNumber: order.orderNumber || \"\",\n                                supplierId: order.supplierId || \"\",\n                                orderDate: order.orderDate ? new Date(order.orderDate).toISOString().split('T')[0] : new Date().toISOString().split('T')[0],\n                                expectedDeliveryDate: order.expectedDeliveryDate ? new Date(order.expectedDeliveryDate).toISOString().split('T')[0] : '',\n                                status: order.status || \"pending\",\n                                subtotal: order.subtotal || \"\",\n                                taxAmount: order.taxAmount || \"0\",\n                                totalAmount: order.totalAmount || \"\",\n                                notes: order.notes || \"\",\n                              });\n                            }}\n                            className=\"p-2 text-green-600 hover:text-green-800\"\n                            title=\"Edit order\"\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handlePrint(order)}\n                            className=\"p-2 text-purple-600 hover:text-purple-800\"\n                            title=\"Print order\"\n                          >\n                            <Printer className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleDeleteOrder(order)}\n                            className=\"p-2 text-red-600 hover:text-red-800\"\n                            title=\"Delete Order\"\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  );\n                }) : (\n                  <tr>\n                    <td colSpan={6} className=\"p-8 text-center text-muted-foreground\">\n                      No purchase orders found for the selected criteria\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Delete Confirmation Dialog */}\n      <DeleteConfirmation\n        isOpen={deleteDialogOpen}\n        onClose={() => setDeleteDialogOpen(false)}\n        onConfirm={confirmDeleteOrder}\n        title=\"Delete Purchase Order\"\n        description=\"Are you sure you want to delete this purchase order? This action cannot be undone and will remove all order data.\"\n        itemName={orderToDelete?.orderNumber || \"purchase order\"}\n        isLoading={deletePurchaseOrderMutation.isPending}\n      />\n    </div>\n  );\n}\n","size_bytes":31791},"client/src/pages/SalesHistory.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport type { SalesTransaction, Customer, Product } from \"@shared/schema\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ConfirmDelete } from \"@/components/ui/confirm-delete\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useCurrency } from \"@/contexts/CurrencyContext\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/api\";\nimport { Eye, Edit, Trash2, Play, Download } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nimport { DeleteConfirmation } from \"@/components/ui/delete-confirmation\";\n\n\ninterface DraftSale {\n  id: string;\n  selectedCustomerId: string;\n  transactionItems: any[];\n  paymentMethod: string;\n  timestamp: number;\n  totalAmount: number;\n}\n\nexport default function SalesHistory() {\n  const { user } = useAuth();\n  const { formatCurrency } = useCurrency();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, navigate] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [dateFilter, setDateFilter] = useState(\"today\");\n  const [paymentFilter, setPaymentFilter] = useState(\"all\");\n  const [draftSales, setDraftSales] = useState<DraftSale[]>([]);\n  const [showDrafts, setShowDrafts] = useState(true);\n  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);\n  const [transactionToDelete, setTransactionToDelete] = useState<string | null>(null);\n  const [draftDeleteConfirmOpen, setDraftDeleteConfirmOpen] = useState(false);\n  const [draftToDelete, setDraftToDelete] = useState<string | null>(null);\n\n  const handleViewTransaction = (transactionId: string) => {\n    navigate(`/invoice/${transactionId}`);\n  };\n\n  const deleteSaleMutation = useMutation({\n    mutationFn: async (transactionId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/sales/${transactionId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Transaction deleted\",\n        description: \"Sales transaction has been deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/sales\", user?.stationId] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete transaction\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeleteTransaction = (transactionId: string) => {\n    setTransactionToDelete(transactionId);\n    setDeleteConfirmOpen(true);\n  };\n\n  const confirmDeleteTransaction = () => {\n    if (transactionToDelete) {\n      deleteSaleMutation.mutate(transactionToDelete);\n      setDeleteConfirmOpen(false);\n      setTransactionToDelete(null);\n    }\n  };\n\n  const handleEditTransaction = (transactionId: string) => {\n    // Navigate to Point of Sale with pre-loaded transaction data\n    navigate(`/pos?edit=${transactionId}`);\n  };\n\n  const handleContinueDraft = (draftId: string) => {\n    // Navigate to Point of Sale to continue the draft\n    navigate(`/pos?draft=${draftId}`);\n  };\n\n  const handleDeleteDraft = (draftId: string) => {\n    setDraftToDelete(draftId);\n    setDraftDeleteConfirmOpen(true);\n  };\n\n  const confirmDeleteDraft = () => {\n    if (draftToDelete) {\n      const updatedDrafts = draftSales.filter(draft => draft.id !== draftToDelete);\n      setDraftSales(updatedDrafts);\n\n      // Update localStorage\n      if (updatedDrafts.length > 0) {\n        localStorage.setItem('allPosDrafts', JSON.stringify(updatedDrafts));\n      } else {\n        localStorage.removeItem('allPosDrafts');\n        localStorage.removeItem('posDraft'); // Also remove single draft\n      }\n\n      toast({\n        title: \"Draft deleted\",\n        description: \"Draft sale has been removed\",\n      });\n\n      setDraftDeleteConfirmOpen(false);\n      setDraftToDelete(null);\n    }\n  };\n\n  // Load drafts from localStorage\n  useEffect(() => {\n    const loadDrafts = () => {\n      try {\n        // Check for multiple drafts\n        const allDrafts = localStorage.getItem('allPosDrafts');\n        if (allDrafts) {\n          const drafts = JSON.parse(allDrafts) as DraftSale[];\n          setDraftSales(drafts);\n          return;\n        }\n\n        // Check for single draft (legacy support)\n        const singleDraft = localStorage.getItem('posDraft');\n        if (singleDraft) {\n          const draft = JSON.parse(singleDraft);\n          const totalAmount = draft.transactionItems?.reduce((sum: number, item: any) => {\n            return sum + (item.totalPrice || 0);\n          }, 0) || 0;\n\n          const draftSale: DraftSale = {\n            id: `draft-${draft.timestamp || Date.now()}`,\n            selectedCustomerId: draft.selectedCustomerId || '',\n            transactionItems: draft.transactionItems || [],\n            paymentMethod: draft.paymentMethod || 'cash',\n            timestamp: draft.timestamp || Date.now(),\n            totalAmount: totalAmount\n          };\n\n          setDraftSales([draftSale]);\n\n          // Migrate to new format\n          localStorage.setItem('allPosDrafts', JSON.stringify([draftSale]));\n        }\n      } catch (error) {\n        console.error('Failed to load drafts:', error);\n      }\n    };\n\n    loadDrafts();\n  }, []);\n\n  const exportToExcel = () => {\n    const csvContent = \"data:text/csv;charset=utf-8,\" + \n      \"Invoice,Customer,Amount,Payment Method,Date\\n\" +\n      filteredTransactions.map(t => {\n        const customer = customers.find(c => c.id === t.customerId);\n        const date = t.transactionDate ? new Date(t.transactionDate).toLocaleDateString() : 'N/A';\n        return `${t.invoiceNumber},${customer?.name || 'Walk-in'},${t.totalAmount},${t.paymentMethod},${date}`;\n      }).join(\"\\n\");\n\n    const encodedUri = encodeURI(csvContent);\n    const link = document.createElement(\"a\");\n    link.setAttribute(\"href\", encodedUri);\n    link.setAttribute(\"download\", `sales-history-${new Date().toISOString().split('T')[0]}.csv`);\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const exportToPDF = () => {\n    // Create a printable version of the sales data\n    const printContent = `\n      <html>\n        <head>\n          <title>Sales History Report</title>\n          <style>\n            body { font-family: Arial, sans-serif; margin: 20px; }\n            table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n            th { background-color: #f2f2f2; }\n            .header { text-align: center; margin-bottom: 20px; }\n          </style>\n        </head>\n        <body>\n          <div class=\"header\">\n            <h1>Sales History Report</h1>\n            <p>Generated on ${new Date().toLocaleDateString()}</p>\n          </div>\n          <table>\n            <tr>\n              <th>Invoice</th>\n              <th>Customer</th>\n              <th>Amount</th>\n              <th>Payment Method</th>\n              <th>Date</th>\n            </tr>\n            ${filteredTransactions.map(t => {\n              const customer = customers.find(c => c.id === t.customerId);\n              const date = t.transactionDate ? new Date(t.transactionDate).toLocaleDateString() : 'N/A';\n              return `<tr>\n                <td>${t.invoiceNumber}</td>\n                <td>${customer?.name || 'Walk-in'}</td>\n                <td>${formatCurrency(parseFloat(t.totalAmount || '0'))}</td>\n                <td>${t.paymentMethod}</td>\n                <td>${date}</td>\n              </tr>`;\n            }).join('')}\n          </table>\n        </body>\n      </html>\n    `;\n\n    const printWindow = window.open('', '_blank');\n    if (printWindow) {\n      printWindow.document.write(printContent);\n      printWindow.document.close();\n      printWindow.print();\n    }\n  };\n\n  const { data: salesTransactions = [], isLoading } = useQuery<SalesTransaction[]>({\n    queryKey: [\"/api/sales\", user?.stationId],\n    enabled: !!user?.stationId,\n  });\n\n  const { data: customers = [] } = useQuery<Customer[]>({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const { data: products = [] } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const filteredTransactions = salesTransactions.filter((transaction: SalesTransaction) => {\n    // Enhanced search across multiple fields\n    const customer = customers.find(c => c.id === transaction.customerId);\n    const searchLower = searchTerm.toLowerCase();\n\n    const matchesSearch = !searchTerm || \n      transaction.invoiceNumber?.toLowerCase().includes(searchLower) ||\n      customer?.name?.toLowerCase().includes(searchLower) ||\n      transaction.totalAmount?.includes(searchTerm) ||\n      transaction.paymentMethod?.toLowerCase().includes(searchLower) ||\n      transaction.subtotal?.includes(searchTerm) ||\n      (customer?.contactPhone && customer.contactPhone.includes(searchTerm)) ||\n      (customer?.gstNumber && customer.gstNumber.toLowerCase().includes(searchLower));\n    const matchesPayment = paymentFilter === \"all\" || transaction.paymentMethod === paymentFilter;\n\n    // Date filtering\n    if (!transaction.transactionDate) return false;\n    const transactionDate = new Date(transaction.transactionDate);\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    let matchesDate = true;\n    if (dateFilter === \"today\") {\n      const transactionToday = new Date(transactionDate);\n      transactionToday.setHours(0, 0, 0, 0);\n      matchesDate = transactionToday.getTime() === today.getTime();\n    } else if (dateFilter === \"yesterday\") {\n      const yesterday = new Date(today);\n      yesterday.setDate(yesterday.getDate() - 1);\n      const transactionToday = new Date(transactionDate);\n      transactionToday.setHours(0, 0, 0, 0);\n      matchesDate = transactionToday.getTime() === yesterday.getTime();\n    } else if (dateFilter === \"week\") {\n      const weekAgo = new Date(today);\n      weekAgo.setDate(weekAgo.getDate() - 7);\n      matchesDate = transactionDate >= weekAgo;\n    } else if (dateFilter === \"month\") {\n      const monthAgo = new Date(today);\n      monthAgo.setMonth(monthAgo.getMonth() - 1);\n      matchesDate = transactionDate >= monthAgo;\n    }\n\n    return matchesSearch && matchesPayment && matchesDate;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/3 mb-4\"></div>\n          <div className=\"h-4 bg-muted rounded w-1/2 mb-8\"></div>\n          <div className=\"h-96 bg-muted rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const todaysSales = filteredTransactions.length;\n  const totalAmount = filteredTransactions.reduce((sum: number, t: SalesTransaction) => sum + parseFloat(t.totalAmount || '0'), 0);\n  const cashSales = filteredTransactions.filter((t: SalesTransaction) => t.paymentMethod === 'cash').length;\n  const creditSales = filteredTransactions.filter((t: SalesTransaction) => t.paymentMethod === 'credit').length;\n\n  return (\n    <div className=\"space-y-6 fade-in\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-2xl font-semibold text-card-foreground\">Sales History</h3>\n          <p className=\"text-muted-foreground\">Complete transaction history and sales analytics</p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"outline\" onClick={exportToExcel} data-testid=\"button-export-excel\">\n            <Download className=\"w-4 h-4 mr-2\" />Export Excel\n          </Button>\n          <Button variant=\"outline\" onClick={exportToPDF} data-testid=\"button-export-pdf\">\n            üìÑ Export PDF\n          </Button>\n        </div>\n      </div>\n\n      {/* Sales Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold text-primary\" data-testid=\"todays-transactions\">\n              {todaysSales}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Today's Transactions</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold text-green-600\" data-testid=\"total-sales-amount\">\n              {formatCurrency(totalAmount)}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Total Sales Amount</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold text-blue-600\" data-testid=\"cash-transactions\">\n              {cashSales}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Cash Transactions</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold text-orange-600\" data-testid=\"credit-transactions\">\n              {creditSales}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Credit Transactions</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Sales History Table */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Transaction History</CardTitle>\n            <div className=\"flex items-center space-x-2\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search by invoice, customer, amount...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-64\"\n                data-testid=\"input-search-transactions\"\n              />\n              <Select value={dateFilter} onValueChange={setDateFilter}>\n                <SelectTrigger className=\"w-32\" data-testid=\"select-date-filter\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"today\">Today</SelectItem>\n                  <SelectItem value=\"yesterday\">Yesterday</SelectItem>\n                  <SelectItem value=\"week\">This Week</SelectItem>\n                  <SelectItem value=\"month\">This Month</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={paymentFilter} onValueChange={setPaymentFilter}>\n                <SelectTrigger className=\"w-32\" data-testid=\"select-payment-filter\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Methods</SelectItem>\n                  <SelectItem value=\"cash\">Cash</SelectItem>\n                  <SelectItem value=\"card\">Card</SelectItem>\n                  <SelectItem value=\"credit\">Credit</SelectItem>\n                  <SelectItem value=\"fleet\">Fleet</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button \n                variant={showDrafts ? \"default\" : \"outline\"}\n                onClick={() => setShowDrafts(!showDrafts)}\n                data-testid=\"button-toggle-drafts\"\n              >\n                {showDrafts ? \"Hide Drafts\" : \"Show Drafts\"}\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-muted\">\n                <tr>\n                  <th className=\"text-left p-3 font-medium\">Time</th>\n                  <th className=\"text-left p-3 font-medium\">Invoice</th>\n                  <th className=\"text-left p-3 font-medium\">Customer</th>\n                  <th className=\"text-left p-3 font-medium\">Product</th>\n                  <th className=\"text-right p-3 font-medium\">Quantity</th>\n                  <th className=\"text-right p-3 font-medium\">Rate</th>\n                  <th className=\"text-right p-3 font-medium\">Amount</th>\n                  <th className=\"text-center p-3 font-medium\">Payment</th>\n                  <th className=\"text-center p-3 font-medium\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {/* Draft Sales */}\n                {showDrafts && draftSales.map((draft: DraftSale, index: number) => {\n                  const customer = customers.find(c => c.id === draft.selectedCustomerId);\n                  const draftTime = new Date(draft.timestamp).toLocaleTimeString('en-IN', {\n                    hour: '2-digit',\n                    minute: '2-digit'\n                  });\n\n                  return (\n                    <tr key={`draft-${draft.id}`} className=\"border-b border-border hover:bg-muted/50 bg-yellow-50 dark:bg-yellow-900/20\">\n                      <td className=\"p-3 text-sm\">{draftTime}</td>\n                      <td className=\"p-3\">\n                        <span className=\"font-medium text-yellow-600\" data-testid={`draft-invoice-${index}`}>\n                          DRAFT-{draft.id.split('-').pop()?.slice(-6)}\n                        </span>\n                      </td>\n                      <td className=\"p-3\">{customer?.name || 'Walk-in Customer'}</td>\n                      <td className=\"p-3\">{draft.transactionItems.length} items</td>\n                      <td className=\"p-3 text-right\">{draft.transactionItems.reduce((sum, item) => sum + (item.quantity || 0), 0).toFixed(1)}L</td>\n                      <td className=\"p-3 text-right\">-</td>\n                      <td className=\"p-3 text-right font-semibold\" data-testid={`draft-amount-${index}`}>\n                        {formatCurrency(draft.totalAmount)}\n                      </td>\n                      <td className=\"p-3 text-center\">\n                        <Badge variant=\"outline\" className=\"bg-yellow-100 text-yellow-800\">\n                          DRAFT\n                        </Badge>\n                      </td>\n                      <td className=\"p-3 text-center\">\n                        <div className=\"flex items-center justify-center space-x-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleContinueDraft(draft.id)}\n                            className=\"text-green-600 hover:text-green-800 p-1\"\n                            data-testid={`button-continue-draft-${index}`}\n                            title=\"Continue Draft\"\n                          >\n                            <Play className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDeleteDraft(draft.id)}\n                            className=\"text-red-600 hover:text-red-800 p-1\"\n                            data-testid={`button-delete-draft-${index}`}\n                            title=\"Delete Draft\"\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  );\n                })}\n\n                {/* Completed Sales */}\n                {filteredTransactions.length > 0 ? filteredTransactions.map((transaction: SalesTransaction & { items?: any[] }, index: number) => {\n                  const customer = customers.find(c => c.id === transaction.customerId);\n                  const transactionTime = transaction.transactionDate \n                    ? new Date(transaction.transactionDate).toLocaleTimeString('en-IN', {\n                        hour: '2-digit',\n                        minute: '2-digit'\n                      })\n                    : 'N/A';\n\n                  return (\n                    <tr key={transaction.id} className=\"border-b border-border hover:bg-muted/50\">\n                      <td className=\"p-3 text-sm\">{transactionTime}</td>\n                      <td className=\"p-3\">\n                        <span className=\"font-medium text-primary\" data-testid={`invoice-${index}`}>\n                          {transaction.invoiceNumber}\n                        </span>\n                      </td>\n                      <td className=\"p-3\">{customer?.name || 'Walk-in Customer'}</td>\n                      <td className=\"p-3\">\n                        {transaction.items && transaction.items.length > 0 ? (\n                          transaction.items.length === 1 \n                            ? transaction.items[0].product?.name \n                            : `${transaction.items.length} items`\n                        ) : 'No items'}\n                      </td>\n                      <td className=\"p-3 text-right\">\n                        {transaction.items && transaction.items.length > 0 \n                          ? transaction.items.reduce((sum: number, item: any) => sum + parseFloat(item.quantity || '0'), 0).toFixed(1) + 'L'\n                          : '-'\n                        }\n                      </td>\n                      <td className=\"p-3 text-right\">\n                        {transaction.items && transaction.items.length === 1 \n                          ? formatCurrency(parseFloat(transaction.items[0].unitPrice || '0'))\n                          : '-'\n                        }\n                      </td>\n                      <td className=\"p-3 text-right font-semibold\" data-testid={`amount-${index}`}>\n                        {formatCurrency(parseFloat(transaction.totalAmount || '0'))}\n                      </td>\n                      <td className=\"p-3 text-center\">\n                        <Badge\n                          variant={transaction.paymentMethod === 'cash' ? 'default' : \n                                  transaction.paymentMethod === 'credit' ? 'destructive' : 'secondary'}\n                          data-testid={`payment-method-${index}`}\n                        >\n                          {transaction.paymentMethod}\n                        </Badge>\n                      </td>\n                      <td className=\"p-3 text-center\">\n                        <div className=\"flex items-center justify-center space-x-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleViewTransaction(transaction.id)}\n                            className=\"text-blue-600 hover:text-blue-800 p-1\"\n                            data-testid={`button-view-${index}`}\n                          >\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDeleteTransaction(transaction.id)}\n                            className=\"text-red-600 hover:text-red-800 p-1\"\n                            data-testid={`button-delete-${index}`}\n                            title=\"Delete Transaction\"\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleEditTransaction(transaction.id)}\n                            className=\"text-purple-600 hover:text-purple-800 p-1\"\n                            data-testid={`button-edit-${index}`}\n                            title=\"Edit Transaction\"\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  );\n                }) : null}\n\n                {/* Show message when no data */}\n                {filteredTransactions.length === 0 && (!showDrafts || draftSales.length === 0) && (\n                  <tr>\n                    <td colSpan={9} className=\"p-8 text-center text-muted-foreground\">\n                      {showDrafts && draftSales.length === 0 \n                        ? \"No transactions or drafts found\" \n                        : \"No transactions found for the selected criteria\"}\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Transaction Deletion Confirmation */}\n      <DeleteConfirmation\n        isOpen={deleteConfirmOpen}\n        onClose={() => setDeleteConfirmOpen(false)}\n        onConfirm={confirmDeleteTransaction}\n        title=\"Delete Sales Transaction\"\n        description=\"Are you sure you want to delete this sales transaction? This action cannot be undone and will permanently remove all transaction data.\"\n        itemName=\"sales transaction\"\n        isLoading={deleteSaleMutation.isPending}\n      />\n\n      {/* Draft Deletion Confirmation */}\n      <DeleteConfirmation\n        isOpen={draftDeleteConfirmOpen}\n        onClose={() => setDraftDeleteConfirmOpen(false)}\n        onConfirm={confirmDeleteDraft}\n        title=\"Delete Draft Sale\"\n        description=\"Are you sure you want to delete this draft sale? This action cannot be undone.\"\n        itemName=\"draft sale\"\n      />\n    </div>\n  );\n}","size_bytes":25682},"client/src/pages/Settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCurrency } from \"@/contexts/CurrencyContext\";\nimport { useStation } from \"@/contexts/StationContext\";\nimport { CURRENCY_CONFIG, type CurrencyCode } from \"@/lib/currency\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function Settings() {\n  const { user } = useAuth();\n\n\n  const { toast } = useToast();\n  const { currency, setCurrency } = useCurrency();\n  const { stationSettings, updateStationSettings, isLoading } = useStation();\n\n  // Theme state\n  const [isDarkMode, setIsDarkMode] = useState(() => {\n    return document.documentElement.classList.contains('dark');\n  });\n\n  // Notification preferences\n  const [notifications, setNotifications] = useState({\n    lowStock: true,\n    salesAlerts: true,\n    paymentReminders: true,\n    systemUpdates: false,\n  });\n\n  // Display preferences\n  const [displayPreferences, setDisplayPreferences] = useState({\n    compactView: false,\n    showTips: true,\n    autoRefresh: true,\n    refreshInterval: \"30\",\n  });\n\n  // Handle dark mode toggle\n  const toggleDarkMode = () => {\n    const newDarkMode = !isDarkMode;\n    setIsDarkMode(newDarkMode);\n\n    if (newDarkMode) {\n      document.documentElement.classList.add('dark');\n      localStorage.setItem('theme', 'dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n      localStorage.setItem('theme', 'light');\n    }\n\n    toast({\n      title: \"Theme updated\",\n      description: `Switched to ${newDarkMode ? 'dark' : 'light'} mode`,\n    });\n  };\n\n  // Initialize theme state from current DOM state (theme is now initialized globally)\n  useEffect(() => {\n    setIsDarkMode(document.documentElement.classList.contains('dark'));\n  }, []);\n\n  // Load saved settings on component mount\n  useEffect(() => {\n    // Load notification preferences\n    const savedNotifications = localStorage.getItem('notifications');\n    if (savedNotifications) {\n      try {\n        const parsedNotifications = JSON.parse(savedNotifications);\n        setNotifications(parsedNotifications);\n      } catch (error) {\n        console.error('Failed to parse saved notifications:', error);\n      }\n    }\n\n    // Load display preferences  \n    const savedDisplayPreferences = localStorage.getItem('displayPreferences');\n    if (savedDisplayPreferences) {\n      try {\n        const parsedDisplayPreferences = JSON.parse(savedDisplayPreferences);\n        setDisplayPreferences(parsedDisplayPreferences);\n      } catch (error) {\n        console.error('Failed to parse saved display preferences:', error);\n      }\n    }\n  }, []);\n\n  // Handle currency change\n  const handleCurrencyChange = (newCurrency: CurrencyCode) => {\n    setCurrency(newCurrency);\n    toast({\n      title: \"Currency updated\",\n      description: `Currency changed to ${CURRENCY_CONFIG[newCurrency].name}`,\n    });\n  };\n\n  // Save settings\n  const saveSettings = () => {\n    // Save to localStorage and global context\n    localStorage.setItem('notifications', JSON.stringify(notifications));\n    localStorage.setItem('displayPreferences', JSON.stringify(displayPreferences));\n\n    toast({\n      title: \"Settings saved\",\n      description: \"Your preferences have been saved successfully\",\n    });\n  };\n\n  // Show loading state while station settings are loading\n  if (isLoading || !stationSettings) {\n    return (\n      <div className=\"space-y-6 fade-in\">\n        <div className=\"mb-6\">\n          <h3 className=\"text-2xl font-semibold text-card-foreground mb-2\">Settings</h3>\n          <p className=\"text-muted-foreground\">\n            Loading your preferences and configuration...\n          </p>\n        </div>\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div className=\"h-48 bg-muted rounded-lg\"></div>\n            <div className=\"h-48 bg-muted rounded-lg\"></div>\n            <div className=\"h-48 bg-muted rounded-lg\"></div>\n            <div className=\"h-48 bg-muted rounded-lg\"></div>\n          </div>\n          <div className=\"h-64 bg-muted rounded-lg\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6 fade-in\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <h3 className=\"text-2xl font-semibold text-card-foreground mb-2\">Settings</h3>\n        <p className=\"text-muted-foreground\">\n          Manage your preferences, currency settings, and system configuration\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Currency & Localization */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              üí± Currency & Localization\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"currency-select\" className=\"text-sm font-medium\">\n                Default Currency\n              </Label>\n              <Select value={currency} onValueChange={handleCurrencyChange}>\n                <SelectTrigger className=\"mt-2\" data-testid=\"select-currency\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {(Object.entries(CURRENCY_CONFIG) as [CurrencyCode, typeof CURRENCY_CONFIG[CurrencyCode]][]).map(([code, config]) => (\n                    <SelectItem key={code} value={code}>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"font-mono text-sm\">{config.symbol}</span>\n                        <span>{config.name}</span>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {code}\n                        </Badge>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Current: {CURRENCY_CONFIG[currency].symbol} {CURRENCY_CONFIG[currency].name}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Appearance */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              üé® Appearance\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label className=\"text-sm font-medium\">Dark Mode</Label>\n                <p className=\"text-xs text-muted-foreground\">\n                  Toggle between light and dark themes\n                </p>\n              </div>\n              <Switch\n                checked={isDarkMode}\n                onCheckedChange={toggleDarkMode}\n                data-testid=\"switch-dark-mode\"\n              />\n            </div>\n\n            <Separator />\n\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label className=\"text-sm font-medium\">Compact View</Label>\n                <p className=\"text-xs text-muted-foreground\">\n                  Use smaller cards and spacing\n                </p>\n              </div>\n              <Switch\n                checked={displayPreferences.compactView}\n                onCheckedChange={(checked) => \n                  setDisplayPreferences(prev => ({ ...prev, compactView: checked }))\n                }\n                data-testid=\"switch-compact-view\"\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label className=\"text-sm font-medium\">Show Tips</Label>\n                <p className=\"text-xs text-muted-foreground\">\n                  Display helpful tips throughout the app\n                </p>\n              </div>\n              <Switch\n                checked={displayPreferences.showTips}\n                onCheckedChange={(checked) => \n                  setDisplayPreferences(prev => ({ ...prev, showTips: checked }))\n                }\n                data-testid=\"switch-show-tips\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Notifications */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              üîî Notifications\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label className=\"text-sm font-medium\">Low Stock Alerts</Label>\n                <p className=\"text-xs text-muted-foreground\">\n                  Notify when tank levels are low\n                </p>\n              </div>\n              <Switch\n                checked={notifications.lowStock}\n                onCheckedChange={(checked) => \n                  setNotifications(prev => ({ ...prev, lowStock: checked }))\n                }\n                data-testid=\"switch-low-stock\"\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label className=\"text-sm font-medium\">Sales Alerts</Label>\n                <p className=\"text-xs text-muted-foreground\">\n                  Notify for large transactions\n                </p>\n              </div>\n              <Switch\n                checked={notifications.salesAlerts}\n                onCheckedChange={(checked) => \n                  setNotifications(prev => ({ ...prev, salesAlerts: checked }))\n                }\n                data-testid=\"switch-sales-alerts\"\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label className=\"text-sm font-medium\">Payment Reminders</Label>\n                <p className=\"text-xs text-muted-foreground\">\n                  Remind about overdue payments\n                </p>\n              </div>\n              <Switch\n                checked={notifications.paymentReminders}\n                onCheckedChange={(checked) => \n                  setNotifications(prev => ({ ...prev, paymentReminders: checked }))\n                }\n                data-testid=\"switch-payment-reminders\"\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label className=\"text-sm font-medium\">System Updates</Label>\n                <p className=\"text-xs text-muted-foreground\">\n                  Notify about app updates\n                </p>\n              </div>\n              <Switch\n                checked={notifications.systemUpdates}\n                onCheckedChange={(checked) => \n                  setNotifications(prev => ({ ...prev, systemUpdates: checked }))\n                }\n                data-testid=\"switch-system-updates\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Data & Performance */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              ‚ö° Data & Performance\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label className=\"text-sm font-medium\">Auto Refresh</Label>\n                <p className=\"text-xs text-muted-foreground\">\n                  Automatically refresh data\n                </p>\n              </div>\n              <Switch\n                checked={displayPreferences.autoRefresh}\n                onCheckedChange={(checked) => \n                  setDisplayPreferences(prev => ({ ...prev, autoRefresh: checked }))\n                }\n                data-testid=\"switch-auto-refresh\"\n              />\n            </div>\n\n            {displayPreferences.autoRefresh && (\n              <div>\n                <Label className=\"text-sm font-medium\">Refresh Interval (seconds)</Label>\n                <Select \n                  value={displayPreferences.refreshInterval} \n                  onValueChange={(value) => \n                    setDisplayPreferences(prev => ({ ...prev, refreshInterval: value }))\n                  }\n                >\n                  <SelectTrigger className=\"mt-2\" data-testid=\"select-refresh-interval\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"15\">15 seconds</SelectItem>\n                    <SelectItem value=\"30\">30 seconds</SelectItem>\n                    <SelectItem value=\"60\">1 minute</SelectItem>\n                    <SelectItem value=\"120\">2 minutes</SelectItem>\n                    <SelectItem value=\"300\">5 minutes</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Station Information */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            üè™ Station Information\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"station-name\" className=\"text-sm font-medium\">Station Name</Label>\n              <Input\n                id=\"station-name\"\n                value={stationSettings?.stationName || ''}\n                onChange={(e) => updateStationSettings?.({ stationName: e.target.value })}\n                data-testid=\"input-station-name\"\n                className=\"mt-2\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"contact-number\" className=\"text-sm font-medium\">Contact Number</Label>\n              <Input\n                id=\"contact-number\"\n                value={stationSettings?.contactNumber || ''}\n                onChange={(e) => updateStationSettings?.({ contactNumber: e.target.value })}\n                data-testid=\"input-contact-number\"\n                className=\"mt-2\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"email\" className=\"text-sm font-medium\">Email Address</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={stationSettings?.email || ''}\n                onChange={(e) => updateStationSettings?.({ email: e.target.value })}\n                data-testid=\"input-email\"\n                className=\"mt-2\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"gst-number\" className=\"text-sm font-medium\">GST Number</Label>\n              <Input\n                id=\"gst-number\"\n                value={stationSettings?.gstNumber || ''}\n                onChange={(e) => updateStationSettings?.({ gstNumber: e.target.value })}\n                data-testid=\"input-gst-number\"\n                className=\"mt-2\"\n              />\n            </div>\n\n            <div className=\"md:col-span-2\">\n              <Label htmlFor=\"address\" className=\"text-sm font-medium\">Address</Label>\n              <Input\n                id=\"address\"\n                value={stationSettings?.address || ''}\n                onChange={(e) => updateStationSettings?.({ address: e.target.value })}\n                data-testid=\"input-address\"\n                className=\"mt-2\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Save Button */}\n      <div className=\"flex justify-end\">\n        <Button onClick={saveSettings} size=\"lg\" data-testid=\"button-save-settings\">\n          Save All Settings\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":16224},"client/src/pages/StockManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport type { Tank, Product, StockMovement } from \"@shared/schema\";\nimport { insertStockMovementSchema } from \"@shared/schema\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/api\";\nimport { Combobox } from \"@/components/ui/combobox\";\nimport { useLocation } from \"wouter\";\nimport { BarChart3, Package, ArrowRightLeft, ClipboardList } from \"lucide-react\";\n\nexport default function StockManagement() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  const [open, setOpen] = useState(false);\n\n  const form = useForm({\n    resolver: zodResolver(insertStockMovementSchema.omit({ id: true })),\n    defaultValues: {\n      tankId: \"\",\n      movementType: \"in\",\n      quantity: \"0\",\n      previousStock: \"0\",\n      newStock: \"0\",\n      referenceType: \"adjustment\",\n      notes: \"\",\n      stationId: user?.stationId || \"\",\n      userId: user?.id || \"\",\n    },\n  });\n\n  const transferForm = useForm({\n    resolver: zodResolver(insertStockMovementSchema.pick({ \n      quantity: true \n    }).extend({\n      sourceTankId: insertStockMovementSchema.shape.tankId,\n      destinationTankId: insertStockMovementSchema.shape.tankId,\n      notes: insertStockMovementSchema.shape.notes,\n    })),\n    defaultValues: {\n      sourceTankId: \"\",\n      destinationTankId: \"\",\n      quantity: \"\",\n      notes: \"\",\n    },\n  });\n\n  const auditForm = useForm({\n    defaultValues: {},\n  });\n\n  // Regular stock movement mutation with success handling\n  const createStockMovementMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const movementData = {\n        ...data,\n        stationId: user?.stationId || data.stationId,\n        userId: user?.id || data.userId,\n      };\n      const response = await apiRequest(\"POST\", \"/api/stock-movements\", movementData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Stock entry recorded\",\n        description: \"Stock movement has been recorded successfully\",\n      });\n      setOpen(false);\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/stock-movements\", user?.stationId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tanks\", user?.stationId] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to record stock movement\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Batch stock movement mutation without success callbacks (for transfers and audits)\n  const batchStockMovementMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const movementData = {\n        ...data,\n        stationId: user?.stationId || data.stationId,\n        userId: user?.id || data.userId,\n      };\n      const response = await apiRequest(\"POST\", \"/api/stock-movements\", movementData);\n      return response.json();\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    createStockMovementMutation.mutate(data);\n  };\n\n  // Quick Actions handlers\n  const handleStockReport = () => {\n    toast({\n      title: \"Stock Report\",\n      description: \"Generating comprehensive stock report...\",\n    });\n    // Navigate to reports or open print dialog\n    setLocation('/financial-reports');\n  };\n\n  const handleNewPurchase = () => {\n    setLocation('/purchase-orders');\n  };\n\n  const [transferDialogOpen, setTransferDialogOpen] = useState(false);\n  const [auditDialogOpen, setAuditDialogOpen] = useState(false);\n\n  const handleStockTransfer = () => {\n    transferForm.reset({\n      sourceTankId: \"\",\n      destinationTankId: \"\",\n      quantity: \"\",\n      notes: \"\",\n    });\n    setTransferDialogOpen(true);\n  };\n\n  const handleStockAudit = () => {\n    // Initialize audit form with current stock values for all tanks\n    const initialAuditData = tanks.reduce((acc, tank) => {\n      acc[tank.id] = tank.currentStock || \"0\";\n      return acc;\n    }, {} as {[tankId: string]: string});\n    auditForm.reset(initialAuditData);\n    setAuditDialogOpen(true);\n  };\n\n  const executeStockTransfer = async () => {\n    const { sourceTankId, destinationTankId, quantity, notes } = transferForm.getValues();\n    \n    if (!sourceTankId || !destinationTankId || !quantity || parseFloat(quantity) <= 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill all fields with valid values\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (sourceTankId === destinationTankId) {\n      toast({\n        title: \"Error\", \n        description: \"Source and destination tanks cannot be the same\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const sourceTank = tanks.find(t => t.id === sourceTankId);\n    const destTank = tanks.find(t => t.id === destinationTankId);\n    const transferQty = parseFloat(quantity);\n\n    if (!sourceTank || !destTank) {\n      toast({\n        title: \"Error\",\n        description: \"Invalid tank selection\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate source has enough stock\n    if (parseFloat(sourceTank.currentStock || \"0\") < transferQty) {\n      toast({\n        title: \"Error\",\n        description: \"Insufficient stock in source tank\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate destination has capacity\n    const destCurrentStock = parseFloat(destTank.currentStock || \"0\");\n    const destCapacity = parseFloat(destTank.capacity || \"0\");\n    if (destCurrentStock + transferQty > destCapacity) {\n      toast({\n        title: \"Error\", \n        description: \"Not enough capacity in destination tank\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      // Generate single reference ID for atomicity\n      const transferRef = `TXF-${Date.now()}`;\n      \n      // Create OUT movement from source\n      await batchStockMovementMutation.mutateAsync({\n        tankId: sourceTankId,\n        movementType: \"out\",\n        quantity: quantity,\n        unitPrice: \"0\",\n        notes: `Transfer OUT to ${destTank.name} - ${notes}`,\n        referenceType: \"transfer\",\n        referenceId: transferRef\n      });\n\n      // Create IN movement to destination  \n      await batchStockMovementMutation.mutateAsync({\n        tankId: destinationTankId,\n        movementType: \"in\", \n        quantity: quantity,\n        unitPrice: \"0\",\n        notes: `Transfer IN from ${sourceTank.name} - ${notes}`,\n        referenceType: \"transfer\",\n        referenceId: transferRef\n      });\n\n      toast({\n        title: \"Transfer Completed\",\n        description: `Successfully transferred ${transferQty}L from ${sourceTank.name} to ${destTank.name}`,\n      });\n\n      setTransferDialogOpen(false);\n      transferForm.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/tanks\", user?.stationId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stock-movements\", user?.stationId] });\n    } catch (error) {\n      toast({\n        title: \"Transfer Failed\",\n        description: \"Failed to complete stock transfer\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const executeStockAudit = async () => {\n    const auditEntries = Object.entries(auditForm.getValues());\n    let adjustmentsMade = 0;\n    const auditRef = `AUD-${Date.now()}`;\n\n    try {\n      for (const [tankId, physicalCount] of auditEntries) {\n        const tank = tanks.find(t => t.id === tankId);\n        if (!tank) continue;\n\n        const currentStock = parseFloat(tank.currentStock || \"0\");\n        const physicalStock = parseFloat(physicalCount);\n        const difference = physicalStock - currentStock;\n\n        // Only create movement if there's a difference\n        if (Math.abs(difference) >= 0.01) {\n          await batchStockMovementMutation.mutateAsync({\n            tankId: tankId,\n            movementType: difference > 0 ? \"in\" : \"out\",\n            quantity: Math.abs(difference).toString(),\n            unitPrice: \"0\",\n            notes: `Stock audit adjustment - Physical: ${physicalStock}L, System: ${currentStock}L`,\n            referenceType: \"audit\",\n            referenceId: auditRef\n          });\n          adjustmentsMade++;\n        }\n      }\n\n      toast({\n        title: \"Audit Completed\",\n        description: `Stock audit completed. ${adjustmentsMade} adjustments made.`,\n      });\n\n      setAuditDialogOpen(false);\n      auditForm.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/tanks\", user?.stationId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stock-movements\", user?.stationId] });\n    } catch (error) {\n      toast({\n        title: \"Audit Failed\",\n        description: \"Failed to complete stock audit\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleCreatePurchaseOrder = (tankId: string) => {\n    setLocation(`/purchase-orders?tank=${tankId}`);\n  };\n\n  const { data: tanks = [], isLoading: tanksLoading } = useQuery<Tank[]>({\n    queryKey: [\"/api/tanks\", user?.stationId],\n    enabled: !!user?.stationId,\n  });\n\n  const { data: products = [] } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: stockMovements = [], isLoading: movementsLoading } = useQuery<StockMovement[]>({\n    queryKey: [\"/api/stock-movements\", user?.stationId],\n    enabled: !!user?.stationId,\n  });\n\n  if (tanksLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(3)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-32 bg-muted rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const getProductName = (productId: string) => {\n    const product = products.find(p => p.id === productId);\n    return product?.name || 'Unknown Product';\n  };\n\n  const getTankStatus = (currentStock: number, capacity: number, minimumLevel: number) => {\n    const percentage = (currentStock / capacity) * 100;\n    if (currentStock <= minimumLevel) return { status: 'critical', color: 'bg-red-600', textColor: 'text-red-600' };\n    if (percentage < 30) return { status: 'low', color: 'bg-orange-600', textColor: 'text-orange-600' };\n    return { status: 'normal', color: 'bg-green-600', textColor: 'text-green-600' };\n  };\n\n  return (\n    <div className=\"space-y-8 fade-in\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-2xl font-semibold text-card-foreground\">Stock & Inventory Management</h3>\n          <p className=\"text-muted-foreground\">Real-time tank monitoring and inventory control</p>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <Dialog open={open} onOpenChange={setOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-new-stock-entry\">\n                + New Stock Entry\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[500px] max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Add Stock Movement</DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"tankId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Tank *</FormLabel>\n                        <FormControl>\n                          <Combobox\n                            options={tanks.map(t => ({ value: t.id, label: `${t.name} - ${getProductName(t.productId)}` }))}\n                            value={field.value}\n                            onValueChange={field.onChange}\n                            placeholder=\"Select tank\"\n                            emptyMessage=\"No tanks found\"\n                            data-testid=\"select-tank\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"movementType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Movement Type *</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-movement-type\">\n                                <SelectValue placeholder=\"Select type\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"in\">Stock In</SelectItem>\n                              <SelectItem value=\"out\">Stock Out</SelectItem>\n                              <SelectItem value=\"adjustment\">Adjustment</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"quantity\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Quantity (L) *</FormLabel>\n                          <FormControl>\n                            <Input type=\"number\" step=\"0.001\" placeholder=\"0.000\" {...field} data-testid=\"input-quantity\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"previousStock\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Previous Stock (L) *</FormLabel>\n                          <FormControl>\n                            <Input type=\"number\" step=\"0.001\" placeholder=\"0.000\" {...field} data-testid=\"input-previous-stock\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"newStock\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>New Stock (L) *</FormLabel>\n                          <FormControl>\n                            <Input type=\"number\" step=\"0.001\" placeholder=\"0.000\" {...field} data-testid=\"input-new-stock\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <FormField\n                    control={form.control}\n                    name=\"referenceType\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Reference Type</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-reference-type\">\n                              <SelectValue placeholder=\"Select type\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"sale\">Sale</SelectItem>\n                            <SelectItem value=\"purchase\">Purchase</SelectItem>\n                            <SelectItem value=\"adjustment\">Adjustment</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"notes\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Notes</FormLabel>\n                        <FormControl>\n                          <Textarea placeholder=\"Additional details about the stock movement\" {...field} data-testid=\"input-stock-notes\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <div className=\"flex justify-end space-x-2 pt-4\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setOpen(false)} data-testid=\"button-cancel\">\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\" disabled={createStockMovementMutation.isPending} data-testid=\"button-submit-stock\">\n                      {createStockMovementMutation.isPending ? \"Recording...\" : \"Record Stock Movement\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            className=\"p-2\"\n            onClick={handleStockReport}\n            data-testid=\"button-stock-report\"\n            title=\"View Stock Report\"\n          >\n            <BarChart3 className=\"w-4 h-4 mr-2\" />\n            Stock Report\n          </Button>\n        </div>\n      </div>\n\n      {/* Tank Status Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {tanks.map((tank: Tank, index: number) => {\n          const currentStock = parseFloat(tank.currentStock || '0');\n          const capacity = parseFloat(tank.capacity || '1');\n          const minimumLevel = parseFloat(tank.minimumLevel || '0');\n          const percentage = Math.round((currentStock / capacity) * 100);\n          const available = capacity - currentStock;\n          const { status, color, textColor } = getTankStatus(currentStock, capacity, minimumLevel);\n          \n          return (\n            <Card key={tank.id} className=\"shadow-sm\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h4 className=\"font-semibold text-card-foreground\" data-testid={`tank-name-${index}`}>\n                    {tank.name} - {getProductName(tank.productId)}\n                  </h4>\n                  <Badge \n                    variant={status === 'normal' ? 'default' : 'destructive'}\n                    className={status === 'normal' ? 'bg-green-100 text-green-800' : \n                              status === 'low' ? 'bg-yellow-100 text-yellow-800' : \n                              'bg-red-100 text-red-800'}\n                    data-testid={`tank-status-${index}`}\n                  >\n                    {status === 'critical' ? 'Low Stock' : status === 'low' ? 'Low Stock' : 'Normal'}\n                  </Badge>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Current Stock:</span>\n                    <span className={`font-semibold ${textColor}`} data-testid={`current-stock-${index}`}>\n                      {currentStock.toLocaleString()} L\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Capacity:</span>\n                    <span data-testid={`capacity-${index}`}>{capacity.toLocaleString()} L</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Available:</span>\n                    <span className=\"text-green-600 font-medium\" data-testid={`available-${index}`}>\n                      {available.toLocaleString()} L\n                    </span>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Progress value={percentage} className=\"h-3\" />\n                    <div className=\"text-center text-sm text-muted-foreground\" data-testid={`percentage-${index}`}>\n                      {percentage}% filled\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Stock Movements and Alerts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Recent Stock Movements */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Stock Movements</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {movementsLoading ? (\n              <div className=\"space-y-3\">\n                {[...Array(3)].map((_, i) => (\n                  <div key={i} className=\"animate-pulse p-4 bg-muted rounded-md h-20\"></div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {stockMovements.length > 0 ? stockMovements.slice(0, 3).map((movement: StockMovement, index: number) => {\n                  const tank = tanks.find(t => t.id === movement.tankId);\n                  const product = products.find(p => p.id === tank?.productId);\n                  const isPositive = movement.movementType === 'in';\n                  const quantity = parseFloat(movement.quantity || '0');\n                  const timeAgo = movement.movementDate ? new Date(movement.movementDate).toLocaleString('en-GB') : 'Unknown';\n                  \n                  return (\n                    <div key={movement.id} className=\"p-4 border border-border rounded-md\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <div className={`font-medium ${isPositive ? 'text-green-600' : 'text-red-600'}`}>\n                            Stock {movement.movementType === 'in' ? 'In' : movement.movementType === 'out' ? 'Out' : 'Adjustment'} - {product?.name || 'Unknown'}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {tank?.name} | {movement.referenceType || 'Manual'} #{movement.referenceId || 'N/A'}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">{timeAgo}</div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className={`font-semibold ${isPositive ? 'text-green-600' : 'text-red-600'}`}>\n                            {isPositive ? '+' : ''}{Math.abs(quantity).toLocaleString()} L\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">Movement</div>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                }) : (\n                  <div className=\"p-4 text-center text-muted-foreground\">\n                    No recent stock movements\n                  </div>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Low Stock Alerts */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Stock Alerts & Actions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {/* Generate real alerts based on tank data */}\n              {tanks.filter(tank => {\n                const currentStock = parseFloat(tank.currentStock || '0');\n                const minimumLevel = parseFloat(tank.minimumLevel || '0');\n                return currentStock <= minimumLevel;\n              }).slice(0, 2).map((tank, index) => {\n                const currentStock = parseFloat(tank.currentStock || '0');\n                const capacity = parseFloat(tank.capacity || '1');\n                const percentage = Math.round((currentStock / capacity) * 100);\n                const product = products.find(p => p.id === tank.productId);\n                \n                return (\n                  <div key={tank.id} className=\"p-3 bg-yellow-50 border border-yellow-200 rounded-md\">\n                    <div className=\"flex items-start\">\n                      <span className=\"text-yellow-500 mr-2\">‚ö†Ô∏è</span>\n                      <div className=\"flex-1\">\n                        <div className=\"text-sm font-medium text-yellow-800\">Low Stock Alert</div>\n                        <div className=\"text-xs text-yellow-600 mt-1\">\n                          {tank.name} ({product?.name}) - Only {currentStock.toLocaleString()}L remaining ({percentage}% capacity)\n                        </div>\n                        <Button \n                          size=\"sm\" \n                          className=\"mt-2 bg-yellow-600 hover:bg-yellow-700 text-white\"\n                          onClick={() => handleCreatePurchaseOrder(tank.id)}\n                          data-testid=\"button-create-purchase-order\"\n                        >\n                          Create Purchase Order\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n              \n              {/* Show info message if no critical alerts */}\n              {tanks.filter(tank => parseFloat(tank.currentStock || '0') <= parseFloat(tank.minimumLevel || '0')).length === 0 && (\n                <div className=\"p-3 bg-green-50 border border-green-200 rounded-md\">\n                  <div className=\"flex items-start\">\n                    <span className=\"text-green-500 mr-2\">‚úì</span>\n                    <div className=\"flex-1\">\n                      <div className=\"text-sm font-medium text-green-800\">All Stock Levels Normal</div>\n                      <div className=\"text-xs text-green-600 mt-1\">\n                        No critical stock alerts at this time\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Quick Stock Actions */}\n            <div className=\"mt-6 pt-4 border-t border-border\">\n              <h5 className=\"font-medium text-card-foreground mb-3\">Quick Actions</h5>\n              <div className=\"grid grid-cols-2 gap-2\">\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  className=\"p-2\"\n                  onClick={handleStockReport}\n                  data-testid=\"button-stock-report-quick\"\n                  title=\"View Stock Report\"\n                >\n                  <BarChart3 className=\"w-4 h-4 mr-2\" />\n                  Stock Report\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  className=\"p-2\"\n                  onClick={handleNewPurchase}\n                  data-testid=\"button-new-purchase\"\n                  title=\"Create New Purchase\"\n                >\n                  <Package className=\"w-4 h-4 mr-2\" />\n                  New Purchase\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  className=\"p-2\"\n                  onClick={handleStockTransfer}\n                  data-testid=\"button-stock-transfer\"\n                  title=\"Transfer Stock\"\n                >\n                  <ArrowRightLeft className=\"w-4 h-4 mr-2\" />\n                  Stock Transfer\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  className=\"p-2\"\n                  onClick={handleStockAudit}\n                  data-testid=\"button-stock-audit\"\n                  title=\"Conduct Stock Audit\"\n                >\n                  <ClipboardList className=\"w-4 h-4 mr-2\" />\n                  Stock Audit\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Stock Transfer Dialog */}\n      <Dialog open={transferDialogOpen} onOpenChange={setTransferDialogOpen}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>Stock Transfer</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium\">Source Tank</label>\n              <Select value={transferForm.sourceTankId} onValueChange={(value) => setTransferForm(prev => ({...prev, sourceTankId: value}))}>\n                <SelectTrigger className=\"mt-2\" data-testid=\"select-source-tank\">\n                  <SelectValue placeholder=\"Choose source tank\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {tanks.map(tank => {\n                    const product = products.find(p => p.id === tank.productId);\n                    return (\n                      <SelectItem key={tank.id} value={tank.id}>\n                        {tank.name} - {product?.name} ({parseFloat(tank.currentStock || '0').toLocaleString()}L available)\n                      </SelectItem>\n                    );\n                  })}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Destination Tank</label>\n              <Select value={transferForm.destinationTankId} onValueChange={(value) => setTransferForm(prev => ({...prev, destinationTankId: value}))}>\n                <SelectTrigger className=\"mt-2\" data-testid=\"select-destination-tank\">\n                  <SelectValue placeholder=\"Choose destination tank\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {tanks.filter(tank => tank.id !== transferForm.sourceTankId).map(tank => {\n                    const product = products.find(p => p.id === tank.productId);\n                    const available = parseFloat(tank.capacity || \"0\") - parseFloat(tank.currentStock || \"0\");\n                    return (\n                      <SelectItem key={tank.id} value={tank.id}>\n                        {tank.name} - {product?.name} ({available.toLocaleString()}L capacity)\n                      </SelectItem>\n                    );\n                  })}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Quantity (Liters)</label>\n              <Input\n                type=\"number\"\n                placeholder=\"Enter quantity to transfer\"\n                value={transferForm.quantity}\n                onChange={(e) => setTransferForm(prev => ({...prev, quantity: e.target.value}))}\n                className=\"mt-2\"\n                data-testid=\"input-transfer-quantity\"\n              />\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Notes</label>\n              <Input\n                placeholder=\"Transfer notes (optional)\"\n                value={transferForm.notes}\n                onChange={(e) => setTransferForm(prev => ({...prev, notes: e.target.value}))}\n                className=\"mt-2\"\n                data-testid=\"input-transfer-notes\"\n              />\n            </div>\n            <div className=\"flex justify-end space-x-3\">\n              <Button variant=\"outline\" onClick={() => setTransferDialogOpen(false)} data-testid=\"button-cancel-transfer\">\n                Cancel\n              </Button>\n              <Button \n                onClick={executeStockTransfer} \n                disabled={batchStockMovementMutation.isPending}\n                data-testid=\"button-execute-transfer\"\n              >\n                {batchStockMovementMutation.isPending ? \"Transferring...\" : \"Execute Transfer\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Stock Audit Dialog */}\n      <Dialog open={auditDialogOpen} onOpenChange={setAuditDialogOpen}>\n        <DialogContent className=\"sm:max-w-[600px] max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Stock Audit</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"text-sm text-muted-foreground\">\n              Enter the physical count for each tank. The system will automatically calculate adjustments based on the difference between physical and system stock.\n            </div>\n            <div className=\"border rounded-lg p-4 bg-muted/50\">\n              <h4 className=\"font-medium mb-3\">Physical Stock Count:</h4>\n              <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                {tanks.map(tank => {\n                  const product = products.find(p => p.id === tank.productId);\n                  const systemStock = parseFloat(tank.currentStock || '0');\n                  const physicalStock = parseFloat(auditForm[tank.id] || '0');\n                  const difference = physicalStock - systemStock;\n                  \n                  return (\n                    <div key={tank.id} className=\"grid grid-cols-12 gap-2 items-center text-sm\">\n                      <div className=\"col-span-4\">\n                        <div className=\"font-medium\">{tank.name}</div>\n                        <div className=\"text-xs text-muted-foreground\">{product?.name}</div>\n                      </div>\n                      <div className=\"col-span-2 text-center\">\n                        <div className=\"text-xs text-muted-foreground\">System</div>\n                        <div>{systemStock.toLocaleString()}L</div>\n                      </div>\n                      <div className=\"col-span-3\">\n                        <Input\n                          type=\"number\"\n                          placeholder=\"Physical count\"\n                          value={auditForm[tank.id] || ''}\n                          onChange={(e) => setAuditForm(prev => ({...prev, [tank.id]: e.target.value}))}\n                          className=\"text-center\"\n                          data-testid={`input-audit-${tank.id}`}\n                        />\n                      </div>\n                      <div className=\"col-span-3 text-center\">\n                        <div className=\"text-xs text-muted-foreground\">Difference</div>\n                        <div className={`font-medium ${Math.abs(difference) < 0.01 ? 'text-green-600' : difference > 0 ? 'text-blue-600' : 'text-red-600'}`}>\n                          {Math.abs(difference) < 0.01 ? '‚úì' : (difference > 0 ? '+' : '') + difference.toFixed(1)}L\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n            <div className=\"flex justify-end space-x-3\">\n              <Button variant=\"outline\" onClick={() => setAuditDialogOpen(false)} data-testid=\"button-cancel-audit\">\n                Cancel\n              </Button>\n              <Button \n                onClick={executeStockAudit} \n                disabled={batchStockMovementMutation.isPending}\n                data-testid=\"button-execute-audit\"\n              >\n                {batchStockMovementMutation.isPending ? \"Processing...\" : \"Complete Audit\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":36878},"client/src/pages/SupplierManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport type { Supplier } from \"@shared/schema\";\nimport { insertSupplierSchema } from \"@shared/schema\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCurrency } from \"@/contexts/CurrencyContext\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/api\";\nimport { Eye, Edit, Package, CreditCard, Trash2 } from \"lucide-react\";\n\nimport { DeleteConfirmation } from \"@/components/ui/delete-confirmation\";\n\nexport default function SupplierManagement() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { user } = useAuth();\n  const { formatCurrency } = useCurrency();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterStatus, setFilterStatus] = useState(\"all\");\n  const [open, setOpen] = useState(false);\n  const [viewDialogOpen, setViewDialogOpen] = useState(false);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [paymentDialogOpen, setPaymentDialogOpen] = useState(false);\n  const [selectedSupplier, setSelectedSupplier] = useState<Supplier | null>(null);\n  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);\n  const [supplierToDelete, setSupplierToDelete] = useState<Supplier | null>(null);\n\n\n  // Edit form\n  const editForm = useForm({\n    resolver: zodResolver(insertSupplierSchema),\n    defaultValues: {\n      name: \"\",\n      contactPerson: \"\",\n      contactPhone: \"\",\n      contactEmail: \"\",\n      address: \"\",\n      gstNumber: \"\",\n      paymentTerms: \"Net 30 Days\",\n      outstandingAmount: \"0\",\n    },\n  });\n\n  // Payment form\n  const paymentForm = useForm({\n    resolver: zodResolver(z.object({\n      amount: z.string().min(1, \"Amount is required\"),\n      paymentMethod: z.enum(['cash', 'card']),\n      referenceNumber: z.string().optional(),\n      notes: z.string().optional(),\n    })),\n    defaultValues: {\n      amount: \"\",\n      paymentMethod: \"cash\" as const,\n      referenceNumber: \"\",\n      notes: \"\",\n    },\n  });\n\n  const form = useForm({\n    resolver: zodResolver(insertSupplierSchema),\n    defaultValues: {\n      name: \"\",\n      contactPerson: \"\",\n      contactPhone: \"\",\n      contactEmail: \"\",\n      address: \"\",\n      gstNumber: \"\",\n      paymentTerms: \"Net 30 Days\",\n      outstandingAmount: \"0\",\n    },\n  });\n\n  const updateSupplierMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await apiRequest(\"PUT\", `/api/suppliers/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Supplier updated\",\n        description: \"Supplier information has been updated successfully\",\n      });\n      setEditDialogOpen(false);\n      editForm.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/suppliers\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update supplier\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const recordPaymentMutation = useMutation({\n    mutationFn: async (paymentData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/payments\", paymentData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Payment recorded\",\n        description: \"Payment has been recorded successfully\",\n      });\n      setPaymentDialogOpen(false);\n      paymentForm.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/suppliers\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/payments\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to record payment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createSupplierMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/suppliers\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Supplier created\",\n        description: \"New supplier has been added successfully\",\n      });\n      setOpen(false);\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/suppliers\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create supplier\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteSupplierMutation = useMutation({\n    mutationFn: async (supplierId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/suppliers/${supplierId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Supplier deleted\",\n        description: \"Supplier has been deleted successfully\",\n      });\n      setDeleteConfirmOpen(false);\n      setSupplierToDelete(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/suppliers\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete supplier\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    createSupplierMutation.mutate(data);\n  };\n\n  const handleViewSupplier = (supplier: Supplier) => {\n    setSelectedSupplier(supplier);\n    setViewDialogOpen(true);\n  };\n\n  const handleEditSupplier = (supplier: Supplier) => {\n    setSelectedSupplier(supplier);\n    editForm.reset({\n      name: supplier.name,\n      contactPerson: supplier.contactPerson || \"\",\n      contactPhone: supplier.contactPhone || \"\",\n      contactEmail: supplier.contactEmail || \"\",\n      address: supplier.address || \"\",\n      gstNumber: supplier.gstNumber || \"\",\n      paymentTerms: supplier.paymentTerms || \"Net 30 Days\",\n      outstandingAmount: supplier.outstandingAmount || \"0\",\n    });\n    setEditDialogOpen(true);\n  };\n\n  const handlePaymentSupplier = (supplier: Supplier) => {\n    setSelectedSupplier(supplier);\n    paymentForm.reset({\n      amount: \"\",\n      paymentMethod: \"cash\" as const,\n      referenceNumber: \"\",\n      notes: \"\",\n    });\n    setPaymentDialogOpen(true);\n  };\n\n  const onEditSubmit = (data: any) => {\n    if (!selectedSupplier) return;\n    updateSupplierMutation.mutate({ id: selectedSupplier.id, data });\n  };\n\n  const onPaymentSubmit = (data: any) => {\n    if (!selectedSupplier || !user) return;\n\n    if (!user.id) {\n      toast({\n        title: \"Error\",\n        description: \"User authentication required to record payment\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const paymentData = {\n      supplierId: selectedSupplier.id,\n      amount: data.amount,\n      paymentMethod: data.paymentMethod,\n      referenceNumber: data.referenceNumber,\n      notes: data.notes,\n      type: \"payable\",\n      stationId: user.stationId || \"default-station\",\n      userId: user.id,\n      currencyCode: \"PKR\",\n    };\n    recordPaymentMutation.mutate(paymentData);\n  };\n\n  const handleDeleteSupplier = (supplier: Supplier) => {\n    setSupplierToDelete(supplier);\n    setDeleteConfirmOpen(true);\n  };\n\n  const confirmDeleteSupplier = () => {\n    if (supplierToDelete) {\n      deleteSupplierMutation.mutate(supplierToDelete.id);\n    }\n  };\n\n  const { data: suppliers = [], isLoading } = useQuery<Supplier[]>({\n    queryKey: [\"/api/suppliers\"],\n  });\n\n  const filteredSuppliers = suppliers.filter((supplier: Supplier) => {\n    const matchesSearch = supplier.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         supplier.contactPerson?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = filterStatus === \"all\" ||\n                         (filterStatus === \"active\" && supplier.isActive) ||\n                         (filterStatus === \"inactive\" && !supplier.isActive);\n    return matchesSearch && matchesStatus;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/3 mb-4\"></div>\n          <div className=\"h-4 bg-muted rounded w-1/2 mb-8\"></div>\n          <div className=\"h-96 bg-muted rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const activeSuppliers = suppliers.filter((s: Supplier) => s.isActive).length;\n  const totalOutstanding = suppliers.reduce((sum: number, s: Supplier) => sum + parseFloat(s.outstandingAmount || '0'), 0);\n  const suppliersWithOutstanding = suppliers.filter((s: Supplier) => parseFloat(s.outstandingAmount || '0') > 0).length;\n\n  return (\n    <div className=\"space-y-6 fade-in\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-2xl font-semibold text-card-foreground\">Supplier Management</h3>\n          <p className=\"text-muted-foreground\">Manage vendor relationships and payment terms</p>\n        </div>\n        <Dialog open={open} onOpenChange={setOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-supplier\">\n              + Add New Supplier\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[500px] max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Add New Supplier</DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Supplier Name *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter supplier name\" {...field} data-testid=\"input-supplier-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"contactPerson\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Contact Person</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter contact person name\" {...field} data-testid=\"input-contact-person\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"contactPhone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone Number</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter phone number\" {...field} data-testid=\"input-supplier-phone\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"contactEmail\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email Address</FormLabel>\n                        <FormControl>\n                          <Input type=\"email\" placeholder=\"Enter email address\" {...field} data-testid=\"input-supplier-email\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <FormField\n                  control={form.control}\n                  name=\"address\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Address</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter address\" {...field} data-testid=\"input-supplier-address\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"gstNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>GST Number</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter GST number\" {...field} data-testid=\"input-supplier-gst\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"paymentTerms\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Payment Terms</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-payment-terms\">\n                              <SelectValue placeholder=\"Select payment terms\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"Net 15 Days\">Net 15 Days</SelectItem>\n                            <SelectItem value=\"Net 30 Days\">Net 30 Days</SelectItem>\n                            <SelectItem value=\"Net 45 Days\">Net 45 Days</SelectItem>\n                            <SelectItem value=\"Net 60 Days\">Net 60 Days</SelectItem>\n                            <SelectItem value=\"Cash on Delivery\">Cash on Delivery</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <div className=\"flex justify-end space-x-2 pt-4\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setOpen(false)} data-testid=\"button-cancel\">\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createSupplierMutation.isPending} data-testid=\"button-submit-supplier\">\n                    {createSupplierMutation.isPending ? \"Creating...\" : \"Create Supplier\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* View Supplier Dialog */}\n        <Dialog open={viewDialogOpen} onOpenChange={setViewDialogOpen}>\n          <DialogContent className=\"sm:max-w-[500px]\">\n            <DialogHeader>\n              <DialogTitle>Supplier Details</DialogTitle>\n            </DialogHeader>\n            {selectedSupplier && (\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium\">Name</label>\n                    <p className=\"text-sm text-muted-foreground\">{selectedSupplier.name}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium\">Contact Person</label>\n                    <p className=\"text-sm text-muted-foreground\">{selectedSupplier.contactPerson || 'N/A'}</p>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium\">Phone</label>\n                    <p className=\"text-sm text-muted-foreground\">{selectedSupplier.contactPhone || 'N/A'}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium\">Email</label>\n                    <p className=\"text-sm text-muted-foreground\">{selectedSupplier.contactEmail || 'N/A'}</p>\n                  </div>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Address</label>\n                  <p className=\"text-sm text-muted-foreground\">{selectedSupplier.address || 'N/A'}</p>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium\">GST Number</label>\n                    <p className=\"text-sm text-muted-foreground\">{selectedSupplier.gstNumber || 'N/A'}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium\">Outstanding</label>\n                    <p className=\"text-sm text-muted-foreground\">{formatCurrency(parseFloat(selectedSupplier.outstandingAmount || '0'))}</p>\n                  </div>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n\n        {/* Payment Dialog */}\n        <Dialog open={paymentDialogOpen} onOpenChange={setPaymentDialogOpen}>\n          <DialogContent className=\"sm:max-w-[500px]\">\n            <DialogHeader>\n              <DialogTitle>Record Payment to {selectedSupplier?.name}</DialogTitle>\n            </DialogHeader>\n            <Form {...paymentForm}>\n              <form onSubmit={paymentForm.handleSubmit(onPaymentSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={paymentForm.control}\n                  name=\"amount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Payment Amount *</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" step=\"0.01\" placeholder=\"0.00\" {...field} data-testid=\"input-supplier-payment-amount\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={paymentForm.control}\n                  name=\"paymentMethod\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Payment Method *</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-supplier-payment-method\">\n                            <SelectValue placeholder=\"Select method\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"cash\">Cash</SelectItem>\n                          <SelectItem value=\"card\">Card</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={paymentForm.control}\n                  name=\"referenceNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Reference Number</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Transaction reference\" {...field} data-testid=\"input-supplier-reference-number\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={paymentForm.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Notes</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Payment notes\" {...field} data-testid=\"input-supplier-payment-notes\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex justify-end space-x-2 pt-4\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setPaymentDialogOpen(false)} data-testid=\"button-cancel-supplier-payment\">\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={recordPaymentMutation.isPending} data-testid=\"button-record-supplier-payment\">\n                    {recordPaymentMutation.isPending ? \"Recording...\" : \"Record Payment\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Supplier Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold text-primary\" data-testid=\"total-suppliers\">\n              {suppliers.length}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Total Suppliers</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold text-green-600\" data-testid=\"active-suppliers\">\n              {activeSuppliers}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Active Suppliers</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold text-red-600\" data-testid=\"total-outstanding-suppliers\">\n              {formatCurrency(totalOutstanding)}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Total Outstanding</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold text-orange-600\" data-testid=\"suppliers-with-outstanding\">\n              {suppliersWithOutstanding}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Pending Payments</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Delete Confirmation Dialog */}\n      <DeleteConfirmation\n        isOpen={deleteConfirmOpen}\n        onClose={() => setDeleteConfirmOpen(false)}\n        onConfirm={confirmDeleteSupplier}\n        title=\"Delete Supplier\"\n        description=\"Are you sure you want to delete this supplier? This action cannot be undone and will remove all supplier data and related records.\"\n        itemName={supplierToDelete?.name || \"supplier\"}\n        isLoading={deleteSupplierMutation.isPending}\n      />\n\n      {/* Supplier Data Table */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Supplier Directory</CardTitle>\n            <div className=\"flex items-center space-x-2\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search suppliers...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-48\"\n                data-testid=\"input-search-suppliers\"\n              />\n              <Select value={filterStatus} onValueChange={setFilterStatus}>\n                <SelectTrigger className=\"w-32\" data-testid=\"select-filter-status\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Suppliers</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"inactive\">Inactive</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-muted\">\n                <tr>\n                  <th className=\"text-left p-3 font-medium\">Supplier</th>\n                  <th className=\"text-left p-3 font-medium\">Contact Person</th>\n                  <th className=\"text-left p-3 font-medium\">Payment Terms</th>\n                  <th className=\"text-right p-3 font-medium\">Outstanding</th>\n                  <th className=\"text-center p-3 font-medium\">Last Order</th>\n                  <th className=\"text-center p-3 font-medium\">Status</th>\n                  <th className=\"text-center p-3 font-medium\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {filteredSuppliers.length > 0 ? filteredSuppliers.map((supplier: Supplier, index: number) => {\n                  const outstanding = parseFloat(supplier.outstandingAmount || '0');\n\n                  return (\n                    <tr key={supplier.id} className=\"border-b border-border hover:bg-muted/50\">\n                      <td className=\"p-3\">\n                        <div className=\"font-medium text-card-foreground\" data-testid={`supplier-name-${index}`}>\n                          {supplier.name}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          GST: {supplier.gstNumber || 'N/A'}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {supplier.contactEmail || 'N/A'}\n                        </div>\n                      </td>\n                      <td className=\"p-3\">\n                        <div className=\"font-medium\">{supplier.contactPerson || 'N/A'}</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {supplier.contactPhone || 'N/A'}\n                        </div>\n                      </td>\n                      <td className=\"p-3\">{supplier.paymentTerms || 'Net 30 Days'}</td>\n                      <td className=\"p-3 text-right\">\n                        {outstanding > 0 ? (\n                          <span className=\"font-semibold text-red-600\" data-testid={`outstanding-supplier-${index}`}>\n                            {formatCurrency(outstanding)}\n                          </span>\n                        ) : (\n                          <span className=\"text-green-600\">{formatCurrency(0)}</span>\n                        )}\n                      </td>\n                      <td className=\"p-3 text-center text-sm\">\n                        {supplier.createdAt ? new Date(supplier.createdAt).toLocaleDateString('en-GB') : 'N/A'}\n                      </td>\n                      <td className=\"p-3 text-center\">\n                        <Badge\n                          variant={supplier.isActive ? 'default' : 'secondary'}\n                          className={supplier.isActive ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}\n                          data-testid={`supplier-status-${index}`}\n                        >\n                          {supplier.isActive ? 'Active' : 'Inactive'}\n                        </Badge>\n                      </td>\n                      <td className=\"p-3 text-center\">\n                        <div className=\"flex items-center justify-center space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleViewSupplier(supplier)}\n                            className=\"p-2 text-blue-600 hover:text-blue-800 hover:bg-blue-50\"\n                            data-testid={`button-view-supplier-${index}`}\n                            title=\"View Details\"\n                          >\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleEditSupplier(supplier)}\n                            className=\"p-2 text-green-600 hover:text-green-800 hover:bg-green-50\"\n                            data-testid={`button-edit-supplier-${index}`}\n                            title=\"Edit Supplier\"\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          {parseFloat(supplier.outstandingAmount || '0') > 0 && (\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handlePaymentSupplier(supplier)}\n                              className=\"p-2 text-orange-600 hover:text-orange-800 hover:bg-orange-50\"\n                              data-testid={`button-payment-supplier-${index}`}\n                              title=\"Record Payment\"\n                            >\n                              <CreditCard className=\"w-4 h-4\" />\n                            </Button>\n                          )}\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleDeleteSupplier(supplier)}\n                            className=\"p-2 text-red-600 hover:text-red-800 hover:bg-red-50\"\n                            data-testid={`button-delete-supplier-${index}`}\n                            title=\"Delete Supplier\"\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  );\n                }) : (\n                  <tr>\n                    <td colSpan={7} className=\"p-8 text-center text-muted-foreground\">\n                      No suppliers found for the selected criteria\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Edit Supplier Dialog */}\n      <Dialog open={editDialogOpen} onOpenChange={setEditDialogOpen}>\n        <DialogContent className=\"sm:max-w-[500px] max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Edit Supplier</DialogTitle>\n          </DialogHeader>\n          <Form {...editForm}>\n            <form onSubmit={editForm.handleSubmit(onEditSubmit)} className=\"space-y-4\">\n              <FormField\n                control={editForm.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Supplier Name *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter supplier name\" {...field} data-testid=\"input-edit-supplier-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={editForm.control}\n                name=\"contactPerson\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Contact Person</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter contact person name\" {...field} data-testid=\"input-edit-contact-person\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={editForm.control}\n                  name=\"contactPhone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Phone Number</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter phone number\" {...field} data-testid=\"input-edit-supplier-phone\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"contactEmail\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email Address</FormLabel>\n                      <FormControl>\n                        <Input type=\"email\" placeholder=\"Enter email address\" {...field} data-testid=\"input-edit-supplier-email\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              <FormField\n                control={editForm.control}\n                name=\"address\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Address</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter address\" {...field} data-testid=\"input-edit-supplier-address\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={editForm.control}\n                  name=\"gstNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>GST Number</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter GST number\" {...field} data-testid=\"input-edit-supplier-gst\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"paymentTerms\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Payment Terms</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-edit-payment-terms\">\n                            <SelectValue placeholder=\"Select payment terms\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"Net 15 Days\">Net 15 Days</SelectItem>\n                          <SelectItem value=\"Net 30 Days\">Net 30 Days</SelectItem>\n                          <SelectItem value=\"Net 45 Days\">Net 45 Days</SelectItem>\n                          <SelectItem value=\"Net 60 Days\">Net 60 Days</SelectItem>\n                          <SelectItem value=\"Cash on Delivery\">Cash on Delivery</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setEditDialogOpen(false)} data-testid=\"button-cancel-edit-supplier\">\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={updateSupplierMutation.isPending} data-testid=\"button-update-supplier\">\n                  {updateSupplierMutation.isPending ? \"Updating...\" : \"Update Supplier\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":36229},"client/src/pages/TankMonitoring.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useCurrency } from \"@/contexts/CurrencyContext\";\nimport { formatAmount } from \"@/lib/currency\";\nimport { \n  Gauge, \n  AlertTriangle, \n  AlertCircle, \n  CheckCircle,\n  Wrench,\n  Droplets,\n  Calendar,\n  TrendingDown,\n  TrendingUp,\n  Plus\n} from \"lucide-react\";\nimport type { Tank, Product, StockMovement } from \"@shared/schema\";\n\ninterface TankWithProduct extends Tank {\n  product: Product;\n}\n\nexport default function TankMonitoring() {\n  const { user } = useAuth();\n  const { formatCurrency } = useCurrency();\n  const [selectedTank, setSelectedTank] = useState<string | null>(null);\n  const [addTankDialogOpen, setAddTankDialogOpen] = useState(false);\n  const [maintenanceDialogOpen, setMaintenanceDialogOpen] = useState(false);\n  const [selectedTankForMaintenance, setSelectedTankForMaintenance] = useState<TankWithProduct | null>(null);\n\n  const handleAddTank = () => {\n    setAddTankDialogOpen(true);\n  };\n\n  const handleMaintenance = (tank: TankWithProduct) => {\n    setSelectedTankForMaintenance(tank);\n    setMaintenanceDialogOpen(true);\n  };\n\n  const { data: tanks = [], isLoading } = useQuery<TankWithProduct[]>({\n    queryKey: [`/api/tanks/${user?.stationId}`],\n    enabled: !!user?.stationId,\n    refetchInterval: 10000, // Real-time updates every 10 seconds\n  });\n\n  const { data: stockMovements = [] } = useQuery<StockMovement[]>({\n    queryKey: [`/api/stock-movements/${selectedTank}`],\n    enabled: !!selectedTank,\n  });\n\n  const getStockPercentage = (tank: Tank): number => {\n    const current = parseFloat(tank.currentStock || '0');\n    const capacity = parseFloat(tank.capacity || '1');\n    return Math.round((current / capacity) * 100);\n  };\n\n  const getStockStatus = (tank: Tank): 'critical' | 'low' | 'normal' => {\n    const percentage = getStockPercentage(tank);\n    const minLevel = parseFloat(tank.minimumLevel || '0');\n    const capacity = parseFloat(tank.capacity || '1');\n    const minPercentage = (minLevel / capacity) * 100;\n\n    if (percentage <= minPercentage * 0.5) return 'critical';\n    if (percentage <= minPercentage) return 'low';\n    return 'normal';\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'critical':\n        return <AlertCircle className=\"w-5 h-5 text-red-500\" />;\n      case 'low':\n        return <AlertTriangle className=\"w-5 h-5 text-yellow-500\" />;\n      case 'maintenance':\n        return <Wrench className=\"w-5 h-5 text-gray-500\" />;\n      default:\n        return <CheckCircle className=\"w-5 h-5 text-green-500\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'critical':\n        return 'destructive';\n      case 'low':\n        return 'secondary';\n      case 'maintenance':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n\n  const getProgressColor = (percentage: number, stockStatus: string) => {\n    if (stockStatus === 'critical') return 'bg-red-500';\n    if (stockStatus === 'low') return 'bg-yellow-500';\n    return 'bg-green-500';\n  };\n\n  const alertTanks = tanks.filter(tank => {\n    const stockStatus = getStockStatus(tank);\n    return stockStatus === 'critical' || stockStatus === 'low' || tank.status === 'maintenance';\n  });\n\n  const totalCapacity = tanks.reduce((sum, tank) => sum + parseFloat(tank.capacity || '0'), 0);\n  const totalStock = tanks.reduce((sum, tank) => sum + parseFloat(tank.currentStock || '0'), 0);\n  const totalStockPercentage = totalCapacity > 0 ? Math.round((totalStock / totalCapacity) * 100) : 0;\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/3 mb-4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8\">\n            {[1, 2, 3, 4].map((i) => (\n              <div key={i} className=\"h-32 bg-muted rounded\"></div>\n            ))}\n          </div>\n          <div className=\"h-96 bg-muted rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"page-title\">Tank Monitoring</h1>\n          <p className=\"text-muted-foreground\">Monitor fuel tank levels and inventory status</p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Gauge className=\"w-5 h-5\" />\n          <span className=\"text-sm font-medium\">Live Monitoring</span>\n        </div>\n      </div>\n\n      {/* Alerts Section */}\n      {alertTanks.length > 0 && (\n        <Alert className=\"border-yellow-200 bg-yellow-50 dark:border-yellow-800 dark:bg-yellow-900/20\">\n          <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />\n          <AlertDescription>\n            <span className=\"font-semibold text-yellow-800 dark:text-yellow-200\">\n              {alertTanks.length} tank{alertTanks.length > 1 ? 's' : ''} require{alertTanks.length === 1 ? 's' : ''} attention:\n            </span>\n            <span className=\"text-yellow-700 dark:text-yellow-300 ml-2\" data-testid=\"alert-tanks\">\n              {alertTanks.map(tank => tank.name).join(', ')}\n            </span>\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Tanks</p>\n                <p className=\"text-3xl font-bold\" data-testid=\"total-tanks\">{tanks.length}</p>\n              </div>\n              <Droplets className=\"w-8 h-8 text-blue-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Capacity</p>\n                <p className=\"text-3xl font-bold\" data-testid=\"total-capacity\">\n                  {totalCapacity.toLocaleString()}L\n                </p>\n              </div>\n              <Gauge className=\"w-8 h-8 text-green-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Current Stock</p>\n                <p className=\"text-3xl font-bold\" data-testid=\"total-stock\">\n                  {totalStock.toLocaleString()}L\n                </p>\n                <p className=\"text-sm text-muted-foreground\">({totalStockPercentage}% full)</p>\n              </div>\n              <TrendingUp className=\"w-8 h-8 text-purple-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Alerts</p>\n                <p className=\"text-3xl font-bold text-red-500\" data-testid=\"alert-count\">{alertTanks.length}</p>\n                <p className=\"text-sm text-muted-foreground\">Require attention</p>\n              </div>\n              <AlertTriangle className=\"w-8 h-8 text-red-500\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Tank Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n        {tanks.map((tank) => {\n          const percentage = getStockPercentage(tank);\n          const stockStatus = getStockStatus(tank);\n          const isLowStock = stockStatus === 'critical' || stockStatus === 'low';\n          \n          return (\n            <Card \n              key={tank.id} \n              className={`relative transition-all duration-200 hover:shadow-lg ${\n                isLowStock ? 'border-l-4 border-l-red-500' : \n                tank.status === 'maintenance' ? 'border-l-4 border-l-yellow-500' : \n                'border-l-4 border-l-green-500'\n              }`}\n              data-testid={`tank-card-${tank.name.toLowerCase().replace(/\\s+/g, '-')}`}\n            >\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-lg\" data-testid={`tank-name-${tank.name.toLowerCase().replace(/\\s+/g, '-')}`}>\n                    {tank.name}\n                  </CardTitle>\n                  <div className=\"flex items-center gap-2\">\n                    {getStatusIcon(tank.status || 'normal')}\n                    <Badge variant={getStatusColor(stockStatus)} data-testid={`tank-status-${tank.name.toLowerCase().replace(/\\s+/g, '-')}`}>\n                      {stockStatus.toUpperCase()}\n                    </Badge>\n                  </div>\n                </div>\n                <p className=\"text-sm text-muted-foreground\" data-testid={`tank-product-${tank.name.toLowerCase().replace(/\\s+/g, '-')}`}>\n                  {tank.product?.name || 'Unknown Product'}\n                </p>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Stock Level Progress */}\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Stock Level</span>\n                    <span className=\"font-medium\" data-testid={`tank-percentage-${tank.name.toLowerCase().replace(/\\s+/g, '-')}`}>\n                      {percentage}%\n                    </span>\n                  </div>\n                  <Progress \n                    value={percentage} \n                    className={`h-2 ${getProgressColor(percentage, stockStatus)}`}\n                    data-testid={`tank-progress-${tank.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                  />\n                  <div className=\"flex justify-between text-xs text-muted-foreground\">\n                    <span data-testid={`tank-current-stock-${tank.name.toLowerCase().replace(/\\s+/g, '-')}`}>\n                      {parseFloat(tank.currentStock || '0').toLocaleString()}L\n                    </span>\n                    <span data-testid={`tank-capacity-${tank.name.toLowerCase().replace(/\\s+/g, '-')}`}>\n                      {parseFloat(tank.capacity || '0').toLocaleString()}L\n                    </span>\n                  </div>\n                </div>\n\n                {/* Stock Metrics */}\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <p className=\"text-muted-foreground\">Min Level</p>\n                    <p className=\"font-medium\" data-testid={`tank-min-level-${tank.name.toLowerCase().replace(/\\s+/g, '-')}`}>\n                      {parseFloat(tank.minimumLevel || '0').toLocaleString()}L\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-muted-foreground\">Last Refill</p>\n                    <p className=\"font-medium\" data-testid={`tank-last-refill-${tank.name.toLowerCase().replace(/\\s+/g, '-')}`}>\n                      {tank.lastRefillDate ? \n                        new Date(tank.lastRefillDate).toLocaleDateString() : \n                        'Never'\n                      }\n                    </p>\n                  </div>\n                </div>\n\n                {/* Stock Value */}\n                <div className=\"pt-2 border-t\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-muted-foreground\">Stock Value</span>\n                    <span className=\"font-semibold\" data-testid={`tank-stock-value-${tank.name.toLowerCase().replace(/\\s+/g, '-')}`}>\n                      {formatAmount(\n                        parseFloat(tank.currentStock ?? '0') * parseFloat(tank.product?.currentPrice ?? '0')\n                      )}\n                    </span>\n                  </div>\n                </div>\n\n                {/* Action Buttons */}\n                <div className=\"flex gap-2 pt-2\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    className=\"flex-1\"\n                    onClick={() => setSelectedTank(selectedTank === tank.id ? null : tank.id)}\n                    data-testid={`button-view-details-${tank.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    <Calendar className=\"w-4 h-4 mr-2\" />\n                    {selectedTank === tank.id ? 'Hide' : 'View'} History\n                  </Button>\n                  {tank.status === 'maintenance' && (\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => handleMaintenance(tank)}\n                      data-testid={`button-maintenance-${tank.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                    >\n                      <Wrench className=\"w-4 h-4\" />\n                    </Button>\n                  )}\n                </div>\n\n                {/* Stock Movements (if selected) */}\n                {selectedTank === tank.id && (\n                  <div className=\"pt-4 border-t space-y-2\">\n                    <h4 className=\"font-medium text-sm flex items-center\">\n                      <TrendingDown className=\"w-4 h-4 mr-2\" />\n                      Recent Activity\n                    </h4>\n                    {stockMovements.length > 0 ? (\n                      <div className=\"space-y-1 max-h-32 overflow-y-auto\">\n                        {stockMovements.slice(0, 5).map((movement, index) => (\n                          <div \n                            key={movement.id || index} \n                            className=\"flex justify-between items-center text-xs p-2 rounded bg-muted/50\"\n                            data-testid={`stock-movement-${index}`}\n                          >\n                            <div className=\"flex items-center gap-2\">\n                              <span className={`w-2 h-2 rounded-full ${\n                                movement.movementType === 'in' ? 'bg-green-500' : 'bg-red-500'\n                              }`}></span>\n                              <span>{movement.movementType === 'in' ? 'Refill' : 'Sale'}</span>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className=\"font-medium\">\n                                {movement.movementType === 'in' ? '+' : '-'}{parseFloat(movement.quantity || '0').toFixed(1)}L\n                              </div>\n                              <div className=\"text-muted-foreground\">\n                                {new Date(movement.movementDate || new Date()).toLocaleDateString()}\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <p className=\"text-xs text-muted-foreground\">No recent activity</p>\n                    )}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {tanks.length === 0 && (\n        <Card>\n          <CardContent className=\"text-center py-12\">\n            <Droplets className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No Tanks Found</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              No fuel tanks are configured for this station.\n            </p>\n            <Button onClick={handleAddTank} data-testid=\"button-add-tank\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Tank\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Add Tank Dialog */}\n      <Dialog open={addTankDialogOpen} onOpenChange={setAddTankDialogOpen}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>Add New Tank</DialogTitle>\n          </DialogHeader>\n          <div className=\"p-4\">\n            <p className=\"text-muted-foreground\">Tank creation functionality will be implemented soon.</p>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Maintenance Dialog */}\n      <Dialog open={maintenanceDialogOpen} onOpenChange={setMaintenanceDialogOpen}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>Tank Maintenance</DialogTitle>\n          </DialogHeader>\n          {selectedTankForMaintenance && (\n            <div className=\"p-4\">\n              <p className=\"mb-4\">Tank: {selectedTankForMaintenance.name}</p>\n              <p className=\"text-muted-foreground\">Maintenance scheduling functionality will be implemented soon.</p>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":17591},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/auth/LoginForm.tsx":{"content":"import { useState, useEffect } from \"react\"; // Import useEffect\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isFirebaseConfigured } from \"@/lib/firebase\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Fuel } from \"lucide-react\";\nimport SignupForm from \"./SignupForm\";\nimport { useLocation } from \"wouter\"; // Assuming you are using Wouter for routing\n\nexport default function LoginForm() {\n  const [showSignup, setShowSignup] = useState(false);\n  const [username, setUsername] = useState(\"admin\");\n  const [password, setPassword] = useState(\"admin123\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { login, loginWithGoogle, user, userStatus } = useAuth(); // Assuming useAuth provides user and userStatus\n  const { toast } = useToast();\n  const setLocation = useLocation()[1]; // Get the setLocation function from Wouter\n\n  // Effect to handle redirection based on user status\n  useEffect(() => { // Correctly use useEffect\n    if (user) {\n      if (userStatus === \"pending\") {\n        setLocation(\"/approval-pending\"); // Redirect to pending approval page\n      } else if (userStatus === \"verified\") {\n        setLocation(\"/dashboard\"); // Redirect to dashboard if verified\n      }\n    }\n  }, [user, userStatus, setLocation]); // Include setLocation in dependencies\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const loginSuccess = await login(username, password);\n      if (!loginSuccess) {\n        // This block will handle cases where login function itself returns false or throws an error\n        // The error handling within login() should ideally toast the specific message\n        // But we add a generic fallback here if needed.\n        toast({\n          title: \"Login failed\",\n          description: \"An unexpected error occurred during login.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error: any) {\n      if (error.message.includes(\"pending approval\")) {\n        setLocation(\"/approval-pending\");\n        return;\n      }\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid credentials. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleGoogleSignIn = async () => {\n    setIsLoading(true);\n    try {\n      await loginWithGoogle();\n      // The effect hook above will handle redirection based on userStatus after google sign-in\n    } catch (error: any) {\n      if (error.message?.includes(\"approval\") || error.message?.includes(\"pending\")) {\n        toast({\n          title: \"Account Pending Approval\",\n          description: \"Your account is waiting for administrator approval. Please contact your administrator.\",\n          variant: \"destructive\",\n        });\n        setLocation(\"/approval-pending\"); // Redirect to pending approval page\n      } else {\n        toast({\n          title: \"Google sign-in failed\",\n          description: error.message || \"Please try again or use username/password.\",\n          variant: \"destructive\",\n        });\n      }\n      setIsLoading(false);\n    }\n  };\n\n  // If user is already logged in and approved, redirect them\n  if (user && userStatus === \"verified\") {\n    // This might cause a redirect loop if not handled carefully.\n    // The useEffect should be sufficient, but this is an extra safeguard.\n    // Consider removing this if useEffect handles it perfectly.\n    // setLocation('/dashboard');\n    // return null; // Or a loading spinner\n  }\n\n  // If user is pending approval, show the pending page\n  if (userStatus === \"pending\") {\n    setLocation(\"/approval-pending\");\n    return null; // Render nothing while redirecting\n  }\n\n  // If user is logged in but status is not yet determined or null, show loading\n  if (isLoading) {\n    return (\n      <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n        <div className=\"text-center text-white\">Loading and verifying status...</div>\n      </div>\n    );\n  }\n\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n      <Card className=\"w-full max-w-sm border shadow-xl\">\n        <CardContent className=\"pt-6\">\n          <div className=\"text-center mb-6\">\n            <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Fuel className=\"w-8 h-8 text-primary-foreground\" />\n            </div>\n            <h2 className=\"text-2xl font-bold text-card-foreground\" data-testid=\"login-title\">FuelFlow Login</h2>\n            <p className=\"text-muted-foreground\">Petrol Pump Accounting System</p>\n          </div>\n\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"username\" className=\"block text-sm font-medium text-card-foreground mb-2\">\n                Username\n              </Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                placeholder=\"Enter username\"\n                className=\"w-full\"\n                data-testid=\"input-username\"\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"password\" className=\"block text-sm font-medium text-card-foreground mb-2\">\n                Password\n              </Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"Enter password\"\n                className=\"w-full\"\n                data-testid=\"input-password\"\n                required\n              />\n            </div>\n\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={isLoading}\n              data-testid=\"button-login\"\n            >\n              {isLoading ? \"Logging in...\" : \"Login to System\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-4\">\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <span className=\"w-full border-t\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-background px-2 text-muted-foreground\">\n                  Or continue with\n                </span>\n              </div>\n            </div>\n\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              className=\"w-full mt-4\"\n              onClick={handleGoogleSignIn}\n              disabled={isLoading || !isFirebaseConfigured}\n              data-testid=\"google-signin-button\"\n            >\n              <svg className=\"mr-2 h-4 w-4\" viewBox=\"0 0 24 24\">\n                <path\n                  d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n                  fill=\"#4285F4\"\n                />\n                <path\n                  d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n                  fill=\"#34A853\"\n                />\n                <path\n                  d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n                  fill=\"#FBBC05\"\n                />\n                <path\n                  d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n                  fill=\"#EA4335\"\n                />\n              </svg>\n              Sign in with Google\n            </Button>\n          </div>\n\n\n\n          <div className=\"mt-4 text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Don't have an account?{\" \"}\n              <button\n                type=\"button\"\n                onClick={() => setShowSignup(true)}\n                className=\"text-primary hover:underline font-medium\"\n              >\n                Sign up here\n              </button>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {showSignup && <SignupForm onBack={() => setShowSignup(false)} />}\n    </div>\n  );\n}","size_bytes":8679},"client/src/components/layout/AuthGuard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport LoginForm from \"@/components/auth/LoginForm\";\nimport Sidebar from \"@/components/layout/Sidebar\";\nimport Header from \"@/components/layout/Header\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Menu } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\nimport ApprovalPending from \"@/pages/ApprovalPending\";\n\ninterface AuthGuardProps {\n  children: React.ReactNode;\n}\n\nexport default function AuthGuard({ children }: AuthGuardProps) {\n  const { user, isLoading } = useAuth();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [location] = useLocation();\n\n  // Check if current route is public (doesn't require authentication)\n  const isPublicRoute = ['/login', '/signup', '/approval-pending'].includes(location);\n\n  // Show loading state while checking authentication\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-pulse text-center\">\n          <div className=\"text-lg font-medium text-gray-600\">Loading...</div>\n        </div>\n      </div>\n    );\n  }\n\n  // If no user and not on a public route, show login\n  if (!user && !isPublicRoute) {\n    return <LoginForm />;\n  }\n\n  // If user exists but not approved (and not admin), show approval pending\n  if (user && !user.isActive && user.role !== 'admin' && !isPublicRoute) {\n    return <ApprovalPending userEmail={user.username} userName={user.fullName} />;\n  }\n\n  // If on public routes, render them directly\n  if (isPublicRoute) {\n    return <>{children}</>;\n  }\n\n  // Main authenticated layout with proper sidebar\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      {/* Sidebar */}\n      <div className={`transition-all duration-300 ease-in-out ${sidebarCollapsed ? 'w-16' : 'w-64'} flex-shrink-0`}>\n        <Sidebar\n          isCollapsed={sidebarCollapsed}\n          onToggleCollapse={() => setSidebarCollapsed(!sidebarCollapsed)}\n        />\n      </div>\n\n      {/* Main content area */}\n      <div className=\"flex-1 flex flex-col min-w-0 overflow-hidden\">\n        {/* Header */}\n        <div className=\"flex-shrink-0 border-b border-border\">\n          <Header />\n          {/* Mobile menu button */}\n          <div className=\"lg:hidden absolute top-4 left-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setSidebarOpen(true)}\n              className=\"h-8 w-8\"\n            >\n              <Menu className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Page content */}\n        <main className=\"flex-1 overflow-auto p-6\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":2844},"client/src/components/layout/Header.tsx":{"content":"import { useLocation } from \"wouter\";\n\nconst pageTitles: Record<string, string> = {\n  \"/\": \"Dashboard\",\n  \"/pos\": \"Point of Sale\",\n  \"/sales-history\": \"Sales History\",\n  \"/customers\": \"Customer Account Management\",\n  \"/stock\": \"Stock & Inventory Management\",\n  \"/purchase-orders\": \"Purchase Orders\",\n  \"/accounts-receivable\": \"Accounts Receivable\",\n  \"/accounts-payable\": \"Accounts Payable\",\n  \"/cash-reconciliation\": \"Cash Reconciliation\",\n  \"/expenses\": \"Expense Management\",\n  \"/suppliers\": \"Supplier Management\",\n  \"/pricing\": \"Price Management\",\n  \"/financial-reports\": \"Financial Reports\",\n  \"/pumps\": \"Pump Management\",\n  \"/tanks\": \"Tank Monitoring\",\n};\n\nexport default function Header() {\n  const [location] = useLocation();\n  const currentDate = new Date().toLocaleDateString('en-IN', { \n    day: 'numeric', \n    month: 'short', \n    year: 'numeric' \n  });\n\n  // Determine current shift based on time\n  const getCurrentShift = () => {\n    const currentHour = new Date().getHours();\n    if (currentHour >= 6 && currentHour < 18) {\n      return \"Day Shift\";\n    } else {\n      return \"Night Shift\";\n    }\n  };\n\n  return (\n    <header className=\"bg-card shadow-sm border-b border-border px-4 md:px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4 min-w-0 flex-1\">\n          {/* Add space for mobile menu button */}\n          <div className=\"w-12 lg:hidden flex-shrink-0\"></div>\n          <div className=\"min-w-0\">\n            <h2 className=\"text-lg md:text-xl font-semibold text-card-foreground truncate\" data-testid=\"page-title\">\n              {pageTitles[location] || \"Dashboard\"}\n            </h2>\n            <p className=\"text-xs md:text-sm text-muted-foreground hidden sm:block\">Comprehensive Petrol Pump Management</p>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-2 md:space-x-6 flex-shrink-0\">\n          <div className=\"text-right hidden lg:block\">\n            <div className=\"text-xs text-muted-foreground\">Current Date</div>\n            <div className=\"font-medium text-card-foreground text-sm\" data-testid=\"current-date\">{currentDate}</div>\n          </div>\n          <div className=\"text-right hidden md:block\">\n            <div className=\"text-xs text-muted-foreground\">Shift</div>\n            <div className=\"font-medium text-card-foreground text-sm\" data-testid=\"current-shift\">{getCurrentShift()}</div>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"text-xs text-muted-foreground\">Status</div>\n            <div className=\"font-medium text-green-600 text-sm\" data-testid=\"till-status\">Open</div>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2727},"client/src/components/layout/Sidebar.tsx":{"content":"\nimport { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { \n  BarChart3, \n  ShoppingCart, \n  ClipboardList, \n  Fuel, \n  Package, \n  TrendingUp, \n  TrendingDown, \n  RefreshCw, \n  CreditCard, \n  Users, \n  Building2, \n  Tag, \n  Calendar, \n  Clock, \n  Settings, \n  LogOut,\n  Menu,\n  Shield,\n  X\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\n// Define a reusable SidebarNavItem component\nfunction SidebarNavItem({ icon, label, to, isActive, isCollapsed }) {\n  return (\n    <Link\n      href={to}\n      className={cn(\n        \"flex items-center text-muted-foreground hover:bg-accent hover:text-accent-foreground rounded-md transition-colors relative\",\n        isCollapsed \n          ? \"px-3 py-3 mx-1 mb-1 justify-center\" \n          : \"px-4 py-2.5 mx-2 mb-1\",\n        isActive && \"bg-accent text-accent-foreground\"\n      )}\n      title={isCollapsed ? label : undefined}\n    >\n      {icon}\n      {!isCollapsed && (\n        <span className=\"ml-3\">{label}</span>\n      )}\n    </Link>\n  );\n}\n\nconst navigationItems = [\n  {\n    label: \"Overview\",\n    items: [\n      { name: \"Dashboard\", path: \"/\", icon: BarChart3 },\n    ]\n  },\n  {\n    label: \"Sales & Transactions\",\n    items: [\n      { name: \"Point of Sale\", path: \"/pos\", icon: ShoppingCart },\n      { name: \"Sales History & Receipts\", path: \"/sales-history\", icon: ClipboardList },\n    ]\n  },\n  {\n    label: \"Inventory\",\n    items: [\n      { name: \"Stock Management\", path: \"/stock\", icon: Package },\n      { name: \"Tank Monitoring\", path: \"/tanks\", icon: Fuel },\n      { name: \"Pump Management\", path: \"/pumps\", icon: Fuel },\n      { name: \"Purchase Orders\", path: \"/purchase-orders\", icon: Package },\n    ]\n  },\n  {\n    label: \"Accounting\",\n    items: [\n      { name: \"Accounts Receivable\", path: \"/accounts-receivable\", icon: TrendingUp },\n      { name: \"Accounts Payable\", path: \"/accounts-payable\", icon: TrendingDown },\n      { name: \"Cash Reconciliation\", path: \"/cash-reconciliation\", icon: RefreshCw },\n      { name: \"Expense Management\", path: \"/expenses\", icon: CreditCard },\n    ]\n  },\n  {\n    label: \"Relationships\",\n    items: [\n      { name: \"Customer Accounts\", path: \"/customers\", icon: Users },\n      { name: \"Supplier Management\", path: \"/suppliers\", icon: Building2 },\n      { name: \"Price Management\", path: \"/pricing\", icon: Tag },\n    ]\n  },\n  {\n    label: \"Financial Reports\",\n    items: [\n      { name: \"Financial Statements\", path: \"/financial-reports\", icon: BarChart3 },\n      { name: \"Daily Reports\", path: \"/daily-reports\", icon: Calendar },\n      { name: \"Aging Reports\", path: \"/aging-reports\", icon: Clock },\n    ]\n  },\n  {\n    label: \"System\",\n    items: [\n      { name: \"Settings\", path: \"/settings\", icon: Settings },\n    ]\n  }\n];\n\ninterface SidebarProps {\n  isCollapsed?: boolean;\n  onToggleCollapse?: () => void;\n}\n\nexport default function Sidebar({ isCollapsed = false, onToggleCollapse }: SidebarProps) {\n  const [location] = useLocation();\n  const { user, logout } = useAuth();\n\n  return (\n    <div \n      className={cn(\n        \"sidebar-transition h-full bg-card border-r border-border flex flex-col\",\n        isCollapsed ? \"w-16\" : \"w-64\"\n      )}\n      data-sidebar\n    >\n      {/* Header */}\n      <div className={cn(\n        \"border-b border-border flex-shrink-0\",\n        isCollapsed ? \"p-3\" : \"p-6\"\n      )}>\n        <div className=\"flex items-center\">\n          <div className=\"flex items-center space-x-3 min-w-0 flex-1\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center text-primary-foreground flex-shrink-0\">\n              <Fuel className=\"w-5 h-5\" />\n            </div>\n            {!isCollapsed && (\n              <div className=\"min-w-0\">\n                <h1 className=\"text-lg font-bold text-card-foreground truncate\" data-testid=\"app-title\">FuelFlow</h1>\n                <p className=\"text-xs text-muted-foreground truncate\" data-testid=\"current-station\">Main Station</p>\n              </div>\n            )}\n          </div>\n\n          {/* Mobile close button */}\n          <div className=\"lg:hidden\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onToggleCollapse}\n              className=\"h-8 w-8 hover:bg-accent flex-shrink-0\"\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 overflow-y-auto py-4\">\n        {/* Menu/Collapse Button before navigation */}\n        <div className={cn(\n          \"flex mb-2\",\n          isCollapsed ? \"justify-center px-2\" : \"justify-start px-4\"\n        )}>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onToggleCollapse}\n            className=\"h-8 w-8 hover:bg-accent lg:flex hidden\"\n            data-testid=\"sidebar-toggle\"\n            title={isCollapsed ? \"Expand sidebar\" : \"Collapse sidebar\"}\n          >\n            <Menu className=\"w-4 h-4\" />\n          </Button>\n        </div>\n\n        {navigationItems.map((section, sectionIndex) => (\n          <div key={section.label}>\n            {!isCollapsed && (\n              <div className=\"px-4 mb-3 mt-6 first:mt-0\">\n                <div className=\"text-xs text-muted-foreground uppercase tracking-wider font-medium\">\n                  {section.label}\n                </div>\n              </div>\n            )}\n            {section.items.map((item, itemIndex) => (\n              <div key={item.path}>\n                <SidebarNavItem \n                  icon={<item.icon className=\"w-5 h-5\" />} \n                  label={item.name} \n                  to={item.path} \n                  isActive={location === item.path}\n                  isCollapsed={isCollapsed}\n                />\n              </div>\n            ))}\n          </div>\n        ))}\n\n        {/* Admin specific navigation */}\n        {user?.role === \"admin\" && (\n          <>\n            {!isCollapsed && (\n              <div className=\"px-4 mb-3 mt-6\">\n                <div className=\"text-xs text-muted-foreground uppercase tracking-wider font-medium\">\n                  Admin\n                </div>\n              </div>\n            )}\n            <SidebarNavItem \n              icon={<Shield className=\"w-5 h-5\" />} \n              label=\"Admin Panel\" \n              to=\"/admin\" \n              isActive={location === \"/admin\"}\n              isCollapsed={isCollapsed}\n            />\n          </>\n        )}\n      </nav>\n\n      {/* Footer with User Profile */}\n      <div className=\"border-t border-border bg-card flex-shrink-0 p-4\">\n        <div className=\"flex items-center justify-between\">\n          {/* User Avatar and Info */}\n          <div className=\"flex items-center space-x-3 flex-1 min-w-0\">\n            <div className={cn(\n              \"bg-primary rounded-full flex items-center justify-center text-sm font-bold text-primary-foreground flex-shrink-0\",\n              isCollapsed ? \"w-8 h-8\" : \"w-10 h-10\"\n            )}>\n              <span data-testid=\"user-initials\">{user?.fullName?.charAt(0) || \"U\"}</span>\n            </div>\n            {!isCollapsed && (\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"text-sm font-medium text-card-foreground truncate\" data-testid=\"current-user\">\n                  {user?.fullName || \"User\"}\n                </div>\n                <div className=\"text-xs text-muted-foreground\" data-testid=\"current-role\">\n                  {user?.role || \"User\"}\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Logout Button */}\n          {!isCollapsed && (\n            <div className=\"flex items-center\">\n              <button \n                onClick={logout} \n                className=\"text-muted-foreground hover:text-destructive transition-colors p-1 flex-shrink-0\"\n                data-testid=\"button-logout\"\n                title=\"Logout\"\n              >\n                <LogOut className=\"w-4 h-4\" />\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8173},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100 dark:text-white\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100 dark:text-white dark:hover:bg-muted\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2747},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/combobox.tsx":{"content":"import { useState } from \"react\"\nimport { Check, ChevronsUpDown, Search } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\n\nexport interface ComboboxOption {\n  value: string\n  label: string\n  searchTerms?: string[]\n}\n\ninterface ComboboxProps {\n  options: ComboboxOption[]\n  value?: string\n  onValueChange: (value: string) => void\n  placeholder?: string\n  searchPlaceholder?: string\n  emptyMessage?: string\n  className?: string\n  disabled?: boolean\n  \"data-testid\"?: string\n}\n\nexport function Combobox({\n  options,\n  value,\n  onValueChange,\n  placeholder = \"Select option...\",\n  searchPlaceholder = \"Search...\",\n  emptyMessage = \"No option found.\",\n  className,\n  disabled,\n  \"data-testid\": testId,\n}: ComboboxProps) {\n  const [open, setOpen] = useState(false)\n  const [searchValue, setSearchValue] = useState(\"\")\n\n  const selectedOption = options.find((option) => option.value === value)\n\n  const filteredOptions = options.filter((option) => {\n    const searchTerm = searchValue.toLowerCase()\n    return (\n      option.label.toLowerCase().includes(searchTerm) ||\n      option.value.toLowerCase().includes(searchTerm) ||\n      (option.searchTerms && option.searchTerms.some(term => \n        term.toLowerCase().includes(searchTerm)\n      ))\n    )\n  })\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className={cn(\"w-full justify-between\", className)}\n          disabled={disabled}\n          data-testid={testId}\n        >\n          {selectedOption ? selectedOption.label : placeholder}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-full p-0\" align=\"start\">\n        <Command>\n          <div className=\"flex items-center border-b px-3\">\n            <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n            <CommandInput\n              placeholder={searchPlaceholder}\n              value={searchValue}\n              onValueChange={setSearchValue}\n              className=\"flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\"\n            />\n          </div>\n          <CommandList>\n            <CommandEmpty>{emptyMessage}</CommandEmpty>\n            <CommandGroup>\n              {filteredOptions.map((option) => (\n                <CommandItem\n                  key={option.value}\n                  value={option.value}\n                  onSelect={(currentValue) => {\n                    onValueChange(currentValue === value ? \"\" : currentValue)\n                    setOpen(false)\n                    setSearchValue(\"\")\n                  }}\n                  className=\"cursor-pointer\"\n                >\n                  <Check\n                    className={cn(\n                      \"mr-2 h-4 w-4\",\n                      value === option.value ? \"opacity-100\" : \"opacity-0\"\n                    )}\n                  />\n                  {option.label}\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  )\n}","size_bytes":3554},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/seed.ts":{"content":"import { storage } from \"./storage\";\nimport bcrypt from \"bcrypt\";\nimport { db } from \"./db\";\nimport { users, stations, products, tanks, customers } from \"@shared/schema\";\nimport { sql } from \"drizzle-orm\";\n\nexport async function seedInitialData() {\n  try {\n    // Check if database already has data\n    const [userCount] = await db.select({ count: sql<number>`count(*)` }).from(users);\n    if (userCount.count > 0) {\n      console.log(\"Database already seeded, skipping initial data creation\");\n      console.log(\"Adding comprehensive sample data for testing...\");\n      await seedSampleData(); // Add sample data even if users exist\n      return;\n    }\n\n    console.log(\"Seeding initial data...\");\n\n    // 1. Create a station\n    const station = await storage.createStation({\n      name: \"FuelFlow Station 1\",\n      address: \"123 Main Street, Demo City\",\n      gstNumber: \"GST123456789\",\n      licenseNumber: \"LIC123456\",\n      contactPhone: \"+1-234-567-8900\",\n      contactEmail: \"station@fuelflow.com\",\n      defaultCurrency: \"PKR\",\n      isActive: true\n    });\n\n    console.log(\"Created station:\", station.name);\n\n    // 2. Create products (fuel types)\n    const petrolProduct = await storage.createProduct({\n      name: \"Petrol\",\n      category: \"fuel\",\n      unit: \"litre\",\n      currentPrice: \"290.00\",\n      density: \"0.740\",\n      hsnCode: \"27101990\",\n      taxRate: \"0.00\",\n      isActive: true\n    });\n\n    const dieselProduct = await storage.createProduct({\n      name: \"Diesel\",\n      category: \"fuel\", \n      unit: \"litre\",\n      currentPrice: \"280.00\",\n      density: \"0.830\",\n      hsnCode: \"27101110\",\n      taxRate: \"0.00\",\n      isActive: true\n    });\n\n    console.log(\"Created products:\", petrolProduct.name, dieselProduct.name);\n\n    // 3. Create tanks\n    const petrolTank = await storage.createTank({\n      stationId: station.id,\n      name: \"Tank 1 - Petrol\",\n      productId: petrolProduct.id,\n      capacity: \"20000.00\",\n      currentStock: \"12000.00\",\n      minimumLevel: \"3000.00\",\n      status: \"normal\",\n      lastRefillDate: new Date()\n    });\n\n    const dieselTank = await storage.createTank({\n      stationId: station.id,\n      name: \"Tank 2 - Diesel\", \n      productId: dieselProduct.id,\n      capacity: \"20000.00\",\n      currentStock: \"4000.00\", // Low stock to show alert\n      minimumLevel: \"3000.00\",\n      status: \"low\",\n      lastRefillDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000) // 3 days ago\n    });\n\n    console.log(\"Created tanks:\", petrolTank.name, dieselTank.name);\n\n    // 4. Create demo users with hashed passwords\n    const saltRounds = 10;\n\n    const adminUser = await storage.createUser({\n      username: \"admin\",\n      password: await bcrypt.hash(\"admin123\", saltRounds),\n      fullName: \"Admin User\",\n      role: \"admin\",\n      stationId: station.id,\n      isActive: true\n    });\n\n    const managerUser = await storage.createUser({\n      username: \"manager\", \n      password: await bcrypt.hash(\"manager123\", saltRounds),\n      fullName: \"Manager User\",\n      role: \"manager\",\n      stationId: station.id,\n      isActive: true\n    });\n\n    const cashierUser = await storage.createUser({\n      username: \"cashier\",\n      password: await bcrypt.hash(\"cashier123\", saltRounds), \n      fullName: \"Cashier User\",\n      role: \"cashier\",\n      stationId: station.id,\n      isActive: true\n    });\n\n    console.log(\"Created users:\", adminUser.username, managerUser.username, cashierUser.username);\n\n    // 5. Create some stock movements for realistic data\n    await storage.createStockMovement({\n      tankId: petrolTank.id,\n      stationId: station.id,\n      userId: adminUser.id,\n      movementType: \"in\",\n      quantity: \"8000.00\",\n      previousStock: \"4000.00\",\n      newStock: \"12000.00\",\n      referenceType: \"adjustment\",\n      notes: \"Initial stock refill\"\n    });\n\n    await storage.createStockMovement({\n      tankId: dieselTank.id,\n      stationId: station.id,\n      userId: adminUser.id,\n      movementType: \"in\", \n      quantity: \"3000.00\",\n      previousStock: \"1000.00\",\n      newStock: \"4000.00\",\n      referenceType: \"adjustment\",\n      notes: \"Initial stock refill\"\n    });\n\n    console.log(\"Created initial stock movements\");\n\n    // 6. Create sample customers for testing\n    const customers = await Promise.all([\n      storage.createCustomer({\n        name: \"Ahmed Transport Co.\",\n        contactPhone: \"+92-300-1234567\",\n        contactEmail: \"ahmed@transport.com\",\n        address: \"123 Transport Street, Karachi\",\n        creditLimit: \"50000.00\",\n        outstandingAmount: \"15000.00\",\n        isActive: true\n      }),\n      storage.createCustomer({\n        name: \"Khan Logistics\",\n        contactPerson: \"Muhammad Khan\", \n        phone: \"+92-321-7654321\",\n        email: \"khan@logistics.com\",\n        address: \"456 Logistics Avenue, Lahore\",\n        creditLimit: \"75000.00\",\n        outstandingBalance: \"8500.00\",\n        isActive: true\n      }),\n      storage.createCustomer({\n        name: \"City Bus Service\",\n        contactPerson: \"Fatima Sheikh\",\n        phone: \"+92-333-9876543\", \n        email: \"fatima@citybus.com\",\n        address: \"789 Bus Terminal Road, Islamabad\",\n        creditLimit: \"100000.00\",\n        outstandingBalance: \"0.00\",\n        isActive: true\n      }),\n      storage.createCustomer({\n        name: \"Delivery Express\",\n        contactPerson: \"Hassan Ahmed\",\n        phone: \"+92-345-1122334\",\n        email: \"hassan@delivery.com\", \n        address: \"321 Delivery Lane, Faisalabad\",\n        creditLimit: \"25000.00\",\n        outstandingBalance: \"5200.00\",\n        isActive: true\n      })\n    ]);\n    console.log(\"Created customers:\", customers.map(c => c.name).join(\", \"));\n\n    // 7. Create sample suppliers\n    const suppliers = await Promise.all([\n      storage.createSupplier({\n        name: \"Pakistan State Oil (PSO)\",\n        contactPerson: \"Ali Rahman\",\n        contactPhone: \"+92-21-111222333\",\n        contactEmail: \"ali@pso.com.pk\",\n        address: \"PSO House, Clifton, Karachi\",\n        gstNumber: \"PSO123456789\",\n        paymentTerms: \"Net 30\",\n        isActive: true\n      }),\n      storage.createSupplier({\n        name: \"Shell Pakistan Limited\",\n        contactPerson: \"Sara Khan\", \n        contactPhone: \"+92-21-444555666\",\n        contactEmail: \"sara@shell.com.pk\",\n        address: \"Shell Building, I.I. Chundrigar Road, Karachi\",\n        gstNumber: \"SHELL987654321\",\n        paymentTerms: \"Net 15\",\n        isActive: true\n      }),\n      storage.createSupplier({\n        name: \"Total PARCO Pakistan Ltd\",\n        contactPerson: \"Omar Malik\",\n        contactPhone: \"+92-21-777888999\",\n        contactEmail: \"omar@totalparco.com.pk\", \n        address: \"PARCO Head Office, Karachi\",\n        gstNumber: \"PARCO555444333\",\n        paymentTerms: \"Net 45\",\n        isActive: true\n      })\n    ]);\n    console.log(\"Created suppliers:\", suppliers.map(s => s.name).join(\", \"));\n\n    // 8. Create additional products\n    const lubricantProduct = await storage.createProduct({\n      name: \"Engine Oil 10W-40\",\n      category: \"lubricant\", \n      unit: \"litre\",\n      currentPrice: \"1200.00\",\n      density: \"0.850\",\n      hsnCode: \"27101990\",\n      taxRate: \"0.00\",\n      isActive: true\n    });\n\n    const additiveProduct = await storage.createProduct({\n      name: \"Fuel Additive\",\n      category: \"additive\",\n      unit: \"bottle\",\n      currentPrice: \"350.00\",\n      hsnCode: \"38112100\",\n      taxRate: \"0.00\",\n      isActive: true\n    });\n    console.log(\"Created additional products:\", lubricantProduct.name, additiveProduct.name);\n\n    // 9. Create sample sales transactions with realistic data\n    const salesTransactions = [];\n    for (let i = 0; i < 15; i++) {\n      const randomCustomer = customers[Math.floor(Math.random() * customers.length)];\n      const randomCashier = Math.random() > 0.5 ? cashierUser : managerUser;\n      const daysAgo = Math.floor(Math.random() * 30); // Random date in last 30 days\n      const transactionDate = new Date(Date.now() - daysAgo * 24 * 60 * 60 * 1000);\n      \n      // Random fuel quantities between 50-500 liters\n      const petrolQty = Math.random() > 0.5 ? (50 + Math.random() * 450).toFixed(2) : \"0\";\n      const dieselQty = Math.random() > 0.5 ? (50 + Math.random() * 450).toFixed(2) : \"0\";\n      \n      const petrolAmount = parseFloat(petrolQty) * 290;\n      const dieselAmount = parseFloat(dieselQty) * 280; \n      const subtotal = petrolAmount + dieselAmount;\n      \n      if (subtotal > 0) {\n        const paymentMethods = [\"cash\", \"card\", \"credit\"];\n        const paymentMethod = paymentMethods[Math.floor(Math.random() * paymentMethods.length)];\n        \n        const transaction = await storage.createSalesTransaction({\n          stationId: station.id,\n          customerId: randomCustomer.id,\n          userId: randomCashier.id,\n          invoiceNumber: `INV-2024-${String(1000 + i).padStart(4, '0')}`,\n          transactionDate: transactionDate,\n          paymentMethod: paymentMethod as any,\n          subtotal: subtotal.toFixed(2),\n          taxAmount: \"0.00\",\n          totalAmount: subtotal.toFixed(2),\n          paidAmount: paymentMethod === \"credit\" ? \"0.00\" : subtotal.toFixed(2),\n          outstandingAmount: paymentMethod === \"credit\" ? subtotal.toFixed(2) : \"0.00\",\n          notes: `Fuel transaction - ${paymentMethod} payment`,\n          currencyCode: \"PKR\"\n        });\n        \n        // Create transaction items\n        if (parseFloat(petrolQty) > 0) {\n          await storage.createSalesTransactionItem({\n            transactionId: transaction.id,\n            productId: petrolProduct.id,\n            tankId: petrolTank.id,\n            quantity: petrolQty,\n            unitPrice: \"290.00\",\n            totalPrice: petrolAmount.toFixed(2)\n          });\n          \n          // Create stock movement\n          await storage.createStockMovement({\n            tankId: petrolTank.id,\n            stationId: station.id,\n            userId: randomCashier.id,\n            movementType: \"out\",\n            quantity: petrolQty,\n            previousStock: \"0\", // Will be calculated\n            newStock: \"0\", // Will be calculated  \n            referenceId: transaction.id,\n            referenceType: \"sale\",\n            notes: `Sale - Invoice ${transaction.invoiceNumber}`,\n            movementDate: transactionDate\n          });\n        }\n        \n        if (parseFloat(dieselQty) > 0) {\n          await storage.createSalesTransactionItem({\n            transactionId: transaction.id,\n            productId: dieselProduct.id,\n            tankId: dieselTank.id,\n            quantity: dieselQty,\n            unitPrice: \"280.00\", \n            totalPrice: dieselAmount.toFixed(2)\n          });\n          \n          // Create stock movement\n          await storage.createStockMovement({\n            tankId: dieselTank.id,\n            stationId: station.id,\n            userId: randomCashier.id,\n            movementType: \"out\",\n            quantity: dieselQty,\n            previousStock: \"0\", // Will be calculated\n            newStock: \"0\", // Will be calculated\n            referenceId: transaction.id,\n            referenceType: \"sale\", \n            notes: `Sale - Invoice ${transaction.invoiceNumber}`,\n            movementDate: transactionDate\n          });\n        }\n        \n        salesTransactions.push(transaction);\n      }\n    }\n    console.log(`Created ${salesTransactions.length} sample sales transactions`);\n\n    // 10. Create sample purchase orders\n    for (let i = 0; i < 8; i++) {\n      const randomSupplier = suppliers[Math.floor(Math.random() * suppliers.length)];\n      const daysAgo = Math.floor(Math.random() * 60); // Random date in last 60 days\n      const orderDate = new Date(Date.now() - daysAgo * 24 * 60 * 60 * 1000);\n      const expectedDate = new Date(orderDate.getTime() + 7 * 24 * 60 * 60 * 1000);\n      \n      const quantity = (5000 + Math.random() * 10000).toFixed(2);\n      const unitPrice = Math.random() > 0.5 ? \"275.00\" : \"265.00\"; // Wholesale prices\n      const totalAmount = (parseFloat(quantity) * parseFloat(unitPrice)).toFixed(2);\n      \n      const statuses = [\"pending\", \"approved\", \"delivered\", \"cancelled\"];\n      const status = statuses[Math.floor(Math.random() * statuses.length)];\n      \n      await storage.createPurchaseOrder({\n        stationId: station.id,\n        supplierId: randomSupplier.id,\n        userId: adminUser.id,\n        orderNumber: `PO-2024-${String(2000 + i).padStart(4, '0')}`,\n        orderDate: orderDate,\n        expectedDeliveryDate: expectedDate,\n        subtotal: totalAmount,\n        taxAmount: \"0.00\",\n        totalAmount: totalAmount,\n        status: status as any,\n        notes: `Bulk fuel order from ${randomSupplier.name}`,\n        currencyCode: \"PKR\"\n      });\n    }\n    console.log(\"Created 8 sample purchase orders\");\n\n    // 11. Create sample expenses\n    const expenseCategories = [\"maintenance\", \"utilities\", \"supplies\", \"insurance\", \"rent\"];\n    for (let i = 0; i < 12; i++) {\n      const daysAgo = Math.floor(Math.random() * 90); // Random date in last 90 days\n      const expenseDate = new Date(Date.now() - daysAgo * 24 * 60 * 60 * 1000);\n      const category = expenseCategories[Math.floor(Math.random() * expenseCategories.length)];\n      const amount = (1000 + Math.random() * 15000).toFixed(2);\n      \n      await storage.createExpense({\n        stationId: station.id,\n        userId: adminUser.id,\n        description: getExpenseDescription(category),\n        category: category,\n        amount: amount,\n        expenseDate: expenseDate,\n        paymentMethod: Math.random() > 0.5 ? \"cash\" : \"card\",\n        receiptNumber: `RCP-${Date.now()}-${i}`\n      });\n    }\n    console.log(\"Created 12 sample expense records\");\n\n    // 12. Create more stock movements for testing\n    const movementTypes = [\"in\", \"out\", \"adjustment\", \"audit\"];\n    for (let i = 0; i < 10; i++) {\n      const randomTank = Math.random() > 0.5 ? petrolTank : dieselTank;\n      const movementType = movementTypes[Math.floor(Math.random() * movementTypes.length)];\n      const daysAgo = Math.floor(Math.random() * 45);\n      const movementDate = new Date(Date.now() - daysAgo * 24 * 60 * 60 * 1000);\n      \n      let quantity = \"0\";\n      if (movementType === \"in\") {\n        quantity = (1000 + Math.random() * 5000).toFixed(2);\n      } else if (movementType === \"out\") {\n        quantity = (100 + Math.random() * 1000).toFixed(2);\n      } else if (movementType === \"adjustment\") {\n        quantity = ((Math.random() - 0.5) * 500).toFixed(2); // Can be negative\n      } else if (movementType === \"audit\") {\n        quantity = (3000 + Math.random() * 10000).toFixed(2);\n      }\n      \n      await storage.createStockMovement({\n        tankId: randomTank.id,\n        stationId: station.id, \n        userId: adminUser.id,\n        movementType: movementType as any,\n        quantity: quantity,\n        previousStock: \"0\", // Will be calculated\n        newStock: \"0\", // Will be calculated\n        referenceType: \"manual\",\n        notes: `${movementType.charAt(0).toUpperCase() + movementType.slice(1)} - Sample data`,\n        movementDate: movementDate\n      });\n    }\n    console.log(\"Created 10 additional stock movements\");\n\n    console.log(\"‚úÖ Comprehensive sample data seeding completed!\");\n    console.log(\"üìä Sample data includes:\");\n    console.log(\"- 4 customers with various credit balances\");\n    console.log(\"- 3 suppliers (PSO, Shell, Total PARCO)\");\n    console.log(\"- 15+ sales transactions over last 30 days\");\n    console.log(\"- 8 purchase orders with different statuses\");\n    console.log(\"- 12 expense records across different categories\");\n    console.log(\"- 10+ additional stock movements\");\n    console.log(\"- Additional products (lubricants, additives)\");\n    console.log(\"\");\n    console.log(\"üîê Demo login credentials:\");\n    console.log(\"- Admin: admin / admin123\");\n    console.log(\"- Manager: manager / manager123\");\n    console.log(\"- Cashier: cashier / cashier123\");\n\n  } catch (error) {\n    console.error(\"Error seeding sample data:\", error);\n    throw error;\n  }\n}\n\nasync function seedSampleData() {\n  try {\n    // Get existing entities\n    const [station] = await db.select().from(stations);\n    if (!station) {\n      console.log(\"No station found, skipping sample data creation\");\n      return;\n    }\n    \n    console.log(\"Adding sample data to existing station:\", station.name);\n\n    // Get existing users and products\n    const allUsers = await db.select().from(users);\n    const adminUser = allUsers.find(u => u.role === 'admin');\n    const managerUser = allUsers.find(u => u.role === 'manager');  \n    const cashierUser = allUsers.find(u => u.role === 'cashier');\n    \n    if (!adminUser || !managerUser || !cashierUser) {\n      console.log(\"Required users not found, skipping sample data creation\");\n      return;\n    }\n\n    // Check if sample data already exists (to avoid duplicates)\n    const existingCustomers = await db.select().from(customers);\n    if (existingCustomers.length > 0) {\n      console.log(\"Sample data already exists, skipping creation\");\n      return;\n    }\n\n    // Get existing products\n    const allProducts = await db.select().from(products);\n    const petrolProduct = allProducts.find(p => p.name === 'Petrol');\n    const dieselProduct = allProducts.find(p => p.name === 'Diesel');\n    \n    if (!petrolProduct || !dieselProduct) {\n      console.log(\"Required products not found, skipping sample data creation\");\n      return;\n    }\n\n    // Get existing tanks\n    const allTanks = await db.select().from(tanks);\n    const petrolTank = allTanks.find(t => t.productId === petrolProduct.id);\n    const dieselTank = allTanks.find(t => t.productId === dieselProduct.id);\n    \n    if (!petrolTank || !dieselTank) {\n      console.log(\"Required tanks not found, skipping sample data creation\");\n      return;\n    }\n\n    console.log(\"Creating comprehensive sample data...\");\n\n    // Create sample customers\n    const testCustomers = await Promise.all([\n      storage.createCustomer({\n        name: \"Ahmed Transport Co.\",\n        contactPerson: \"Ahmed Ali\",\n        phone: \"+92-300-1234567\",\n        email: \"ahmed@transport.com\",\n        address: \"123 Transport Street, Karachi\",\n        creditLimit: \"50000.00\",\n        outstandingBalance: \"15000.00\",\n        isActive: true\n      }),\n      storage.createCustomer({\n        name: \"Khan Logistics\",\n        contactPerson: \"Muhammad Khan\", \n        phone: \"+92-321-7654321\",\n        email: \"khan@logistics.com\",\n        address: \"456 Logistics Avenue, Lahore\",\n        creditLimit: \"75000.00\",\n        outstandingBalance: \"8500.00\",\n        isActive: true\n      }),\n      storage.createCustomer({\n        name: \"City Bus Service\",\n        contactPerson: \"Fatima Sheikh\",\n        phone: \"+92-333-9876543\", \n        email: \"fatima@citybus.com\",\n        address: \"789 Bus Terminal Road, Islamabad\",\n        creditLimit: \"100000.00\",\n        outstandingBalance: \"0.00\",\n        isActive: true\n      })\n    ]);\n    console.log(\"‚úÖ Created\", testCustomers.length, \"sample customers\");\n\n    // Create sample suppliers\n    const testSuppliers = await Promise.all([\n      storage.createSupplier({\n        name: \"Pakistan State Oil (PSO)\",\n        contactPerson: \"Ali Rahman\",\n        phone: \"+92-21-111222333\",\n        email: \"ali@pso.com.pk\",\n        address: \"PSO House, Clifton, Karachi\",\n        taxId: \"PSO123456789\",\n        paymentTerms: \"Net 30\",\n        isActive: true\n      }),\n      storage.createSupplier({\n        name: \"Shell Pakistan Limited\",\n        contactPerson: \"Sara Khan\", \n        phone: \"+92-21-444555666\",\n        email: \"sara@shell.com.pk\",\n        address: \"Shell Building, I.I. Chundrigar Road, Karachi\",\n        taxId: \"SHELL987654321\", \n        paymentTerms: \"Net 15\",\n        isActive: true\n      })\n    ]);\n    console.log(\"‚úÖ Created\", testSuppliers.length, \"sample suppliers\");\n\n    // Create sample sales transactions\n    let transactionCount = 0;\n    for (let i = 0; i < 10; i++) {\n      const randomCustomer = testCustomers[Math.floor(Math.random() * testCustomers.length)];\n      const randomCashier = Math.random() > 0.5 ? cashierUser : managerUser;\n      const daysAgo = Math.floor(Math.random() * 20);\n      const transactionDate = new Date(Date.now() - daysAgo * 24 * 60 * 60 * 1000);\n      \n      const fuelQty = (50 + Math.random() * 300).toFixed(2);\n      const product = Math.random() > 0.5 ? petrolProduct : dieselProduct;\n      const tank = product.id === petrolProduct.id ? petrolTank : dieselTank;\n      const unitPrice = product.id === petrolProduct.id ? \"290.00\" : \"280.00\";\n      const totalAmount = parseFloat(fuelQty) * parseFloat(unitPrice);\n      \n      const paymentMethod = [\"cash\", \"card\", \"credit\"][Math.floor(Math.random() * 3)];\n      \n      const transaction = await storage.createSalesTransaction({\n        stationId: station.id,\n        customerId: randomCustomer.id,\n        userId: randomCashier.id,\n        invoiceNumber: `INV-TEST-${String(1000 + i).padStart(4, '0')}`,\n        transactionDate: transactionDate,\n        paymentMethod: paymentMethod as any,\n        subtotal: totalAmount.toFixed(2),\n        taxAmount: \"0.00\",\n        totalAmount: totalAmount.toFixed(2),\n        paidAmount: paymentMethod === \"credit\" ? \"0.00\" : totalAmount.toFixed(2),\n        outstandingAmount: paymentMethod === \"credit\" ? totalAmount.toFixed(2) : \"0.00\",\n        paymentStatus: paymentMethod === \"credit\" ? \"pending\" : \"paid\",\n        notes: `Sample fuel transaction - ${paymentMethod} payment`,\n        currencyCode: \"PKR\"\n      });\n      \n      await storage.createSalesTransactionItem({\n        transactionId: transaction.id,\n        productId: product.id,\n        tankId: tank.id,\n        quantity: fuelQty,\n        unitPrice: unitPrice,\n        totalPrice: totalAmount.toFixed(2)\n      });\n      \n      transactionCount++;\n    }\n    console.log(\"‚úÖ Created\", transactionCount, \"sample sales transactions\");\n\n    // Create sample expenses\n    const expenseCategories = [\"maintenance\", \"utilities\", \"supplies\"];\n    for (let i = 0; i < 6; i++) {\n      const daysAgo = Math.floor(Math.random() * 30);\n      const expenseDate = new Date(Date.now() - daysAgo * 24 * 60 * 60 * 1000);\n      const category = expenseCategories[Math.floor(Math.random() * expenseCategories.length)];\n      const amount = (2000 + Math.random() * 8000).toFixed(2);\n      \n      await storage.createExpense({\n        stationId: station.id,\n        userId: managerUser.id, // Add required userId field\n        description: getExpenseDescription(category),\n        category: category,\n        amount: amount,\n        expenseDate: expenseDate,\n        paymentMethod: Math.random() > 0.5 ? \"cash\" : \"card\",\n        receiptNumber: `RCP-TEST-${Date.now()}-${i}`,\n        notes: `Sample ${category} expense`\n      });\n    }\n    console.log(\"‚úÖ Created 6 sample expense records\");\n\n    // Create sample purchase orders\n    for (let i = 0; i < 4; i++) {\n      const randomSupplier = testSuppliers[Math.floor(Math.random() * testSuppliers.length)];\n      const daysAgo = Math.floor(Math.random() * 40);\n      const orderDate = new Date(Date.now() - daysAgo * 24 * 60 * 60 * 1000);\n      const expectedDate = new Date(orderDate.getTime() + 7 * 24 * 60 * 60 * 1000);\n      \n      const quantity = (3000 + Math.random() * 7000).toFixed(2);\n      const unitPrice = \"275.00\";\n      const totalAmount = (parseFloat(quantity) * parseFloat(unitPrice)).toFixed(2);\n      \n      const status = [\"pending\", \"approved\", \"delivered\"][Math.floor(Math.random() * 3)];\n      \n      await storage.createPurchaseOrder({\n        stationId: station.id,\n        supplierId: randomSupplier.id,\n        userId: adminUser.id,\n        orderNumber: `PO-TEST-${String(3000 + i).padStart(4, '0')}`,\n        orderDate: orderDate,\n        expectedDeliveryDate: expectedDate,\n        productId: Math.random() > 0.5 ? petrolProduct.id : dieselProduct.id,\n        quantity: quantity,\n        unitPrice: unitPrice,\n        subtotal: totalAmount,\n        taxAmount: \"0.00\",\n        totalAmount: totalAmount,\n        status: status as any,\n        notes: `Sample bulk fuel order from ${randomSupplier.name}`,\n        currencyCode: \"PKR\"\n      });\n    }\n    console.log(\"‚úÖ Created 4 sample purchase orders\");\n    \n    console.log(\"üéâ Comprehensive sample data added successfully!\");\n    console.log(\"üìä Sample data includes customers, suppliers, sales, expenses, and purchase orders\");\n    console.log(\"üß™ Perfect for testing all application features!\");\n  } catch (error) {\n    console.error(\"Error adding sample data:\", error);\n  }\n}\n\nfunction getExpenseDescription(category: string): string {\n  const descriptions = {\n    maintenance: [\"Pump servicing\", \"Tank cleaning\", \"Equipment repair\", \"Preventive maintenance\"],\n    utilities: [\"Electricity bill\", \"Water bill\", \"Internet charges\", \"Phone bill\"],\n    supplies: [\"Office supplies\", \"Cleaning materials\", \"Safety equipment\", \"Stationery\"],\n    insurance: [\"Vehicle insurance\", \"Property insurance\", \"Liability coverage\", \"Equipment insurance\"],\n    rent: [\"Office rent\", \"Equipment lease\", \"Land rent\", \"Storage rent\"]\n  };\n  \n  const categoryDescriptions = descriptions[category as keyof typeof descriptions] || [\"General expense\"];\n  return categoryDescriptions[Math.floor(Math.random() * categoryDescriptions.length)];\n}","size_bytes":25316},"USER_GUIDE.md":{"content":"# FuelFlow Petrol Pump Management System - User Guide\n\n## Table of Contents\n1. [Getting Started](#getting-started)\n2. [Dashboard Overview](#dashboard-overview)\n3. [Point of Sale (POS)](#point-of-sale-pos)\n4. [Sales History & Receipts](#sales-history--receipts)\n5. [Customer Management](#customer-management)\n6. [Stock Management](#stock-management)\n7. [Tank Monitoring](#tank-monitoring)\n8. [Purchase Orders](#purchase-orders)\n9. [Financial Management](#financial-management)\n10. [Supplier Management](#supplier-management)\n11. [Price Management](#price-management)\n12. [Reports](#reports)\n13. [Settings](#settings)\n14. [User Roles & Permissions](#user-roles--permissions)\n15. [Troubleshooting](#troubleshooting)\n\n---\n\n## Getting Started\n\n### First Login\nWhen you first access FuelFlow, you'll be presented with a login screen. The system comes with default user accounts:\n\n- **Admin User**: `admin` / `admin123`\n- **Manager User**: `manager` / `manager123`\n- **Cashier User**: `cashier` / `cashier123`\n\n### System Requirements\n- Modern web browser (Chrome, Firefox, Safari, Edge)\n- Stable internet connection\n- No additional software installation required\n\n---\n\n## Dashboard Overview\n\nThe Dashboard is your central hub that provides a quick overview of your petrol station's performance.\n\n### Key Metrics Displayed:\n- **Today's Sales**: Total revenue and transaction count for the current day\n- **Monthly Sales**: Total revenue and transaction count for the current month\n- **Outstanding Amount**: Total credit sales pending payment\n- **Tank Status**: Current fuel levels and alerts\n\n### Quick Actions:\nThe dashboard provides quick access buttons for frequently used functions:\n- **New Sale**: Go directly to Point of Sale\n- **Sales History**: View transaction history\n- **Tank Monitoring**: Check fuel levels and tank status\n- **Quick Reports**: Access daily and financial reports\n\n---\n\n## Point of Sale (POS)\n\nThe POS system is the heart of your daily operations, allowing you to process fuel sales quickly and efficiently.\n\n### Starting a New Sale\n\n1. **Select Customer**:\n   - Choose from existing customers using the dropdown\n   - For walk-in customers, the system automatically defaults to \"Walk-in Customer\"\n   - Add new customers on-the-fly using the \"+ Add\" button\n\n2. **Add Products**:\n   - Browse available fuel products (Petrol, Diesel, etc.)\n   - Click on a product to add it to the transaction\n   - Adjust the quantity using the quick quantity buttons (25L, 50L, etc.) or enter manually\n\n3. **Set Payment Method**:\n   - **Cash**: Immediate payment\n   - **Card**: Credit/debit card payment\n   - **Credit**: For registered credit customers\n   - **Fleet**: For fleet account customers\n\n4. **Complete the Sale**:\n   - Review the transaction details\n   - Verify the total amount\n   - Click \"Complete Sale\" to finalize\n\n### Working with Drafts\n\n- **Save as Draft**: Save incomplete transactions to complete later\n- **Continue Draft**: Resume working on saved drafts\n- **Delete Draft**: Remove unwanted draft transactions\n\n### Editing Transactions\n\n- Edit completed transactions by accessing them from Sales History\n- Make corrections to quantities, products, or customer information\n- System maintains audit trail of changes\n\n### Printing Receipts\n\n- Automatic receipt generation after sale completion\n- Print additional copies using \"Print Last Receipt\"\n- Professional invoice format with station details\n\n---\n\n## Sales History & Receipts\n\nTrack and manage all your completed and draft transactions.\n\n### Viewing Sales History\n\n- **Transaction List**: Chronological view of all sales\n- **Draft Sales**: View and manage incomplete transactions\n- **Transaction Details**: Click on any transaction to view full details\n\n### Search and Filtering\n\n**Current Search Capabilities**:\n- Search by invoice number\n\n**Available Filters**:\n- **Date Range**: Today, Yesterday, This Week, This Month\n- **Payment Method**: Cash, Card, Credit, Fleet\n\n### Managing Transactions\n\n- **View Details**: Click the eye icon to see full transaction details\n- **Edit Transaction**: Click the edit icon to modify completed sales\n- **Delete Transaction**: Remove incorrect transactions (requires confirmation)\n- **Download Receipt**: Generate PDF or print receipt\n\n### Export Options\n\n- **Excel Export**: Download transaction data as CSV file\n- **PDF Report**: Generate printable sales summary\n\n---\n\n## Customer Management\n\nMaintain a comprehensive database of your customers.\n\n### Customer Types\n\n1. **Walk-in**: Casual customers, usually cash payments\n2. **Credit**: Registered customers with credit terms\n3. **Fleet**: Business customers with fleet accounts\n\n### Adding New Customers\n\n1. Navigate to Customer Management\n2. Click \"Add New Customer\"\n3. Fill in customer details:\n   - Name (required)\n   - Contact information\n   - Customer type\n   - Credit limit (for credit customers)\n   - GST number (if applicable)\n\n### Managing Customer Accounts\n\n- **View Customer Details**: Complete customer profile and transaction history\n- **Edit Information**: Update contact details, credit limits\n- **Outstanding Balance**: Track credit customer payments\n- **Transaction History**: View all purchases by customer\n\n### Credit Management\n\n- Set credit limits for registered customers\n- Track outstanding amounts\n- Generate aging reports for overdue accounts\n- Payment recording and reconciliation\n\n---\n\n## Stock Management\n\nKeep track of your fuel inventory and product availability.\n\n### Current Stock Levels\n\n- View real-time stock quantities\n- Monitor stock movements (in/out)\n- Track product availability\n\n### Stock Movements\n\n- **Stock In**: Record fuel deliveries and purchases\n- **Stock Out**: Track sales and consumption\n- **Adjustments**: Correct inventory discrepancies\n- **Audit**: Periodic stock verification\n\n### Low Stock Alerts\n\n- Automatic alerts when stock falls below minimum levels\n- Customizable threshold settings\n- Integration with purchase order system\n\n---\n\n## Tank Monitoring\n\nReal-time monitoring of your fuel storage tanks.\n\n### Tank Status Overview\n\n- **Current Stock Levels**: Real-time fuel quantities\n- **Tank Capacity**: Maximum storage capacity\n- **Minimum Levels**: Alert thresholds\n- **Last Refill Date**: Track delivery schedules\n\n### Status Indicators\n\n- **Normal**: Tank operating within normal parameters\n- **Low**: Stock below minimum threshold\n- **Critical**: Immediate attention required\n- **Maintenance**: Tank under maintenance\n\n### Tank Management\n\n- Monitor multiple tanks simultaneously\n- Track different fuel types (Petrol, Diesel, etc.)\n- Maintenance scheduling and records\n- Capacity planning and optimization\n\n---\n\n## Purchase Orders\n\nManage fuel procurement and supplier orders.\n\n### Creating Purchase Orders\n\n1. Navigate to Purchase Orders\n2. Click \"Create New Order\"\n3. Select supplier\n4. Choose products and quantities\n5. Set delivery dates\n6. Generate and track order\n\n### Order Status Tracking\n\n- **Pending**: Order created, awaiting approval\n- **Approved**: Order confirmed with supplier\n- **Delivered**: Goods received\n- **Cancelled**: Order cancelled\n\n### Supplier Integration\n\n- Link orders to specific suppliers\n- Track supplier performance\n- Manage delivery schedules\n- Cost analysis and comparison\n\n---\n\n## Financial Management\n\nComprehensive financial tracking and management tools.\n\n### Accounts Receivable\n\n- Track customer credit sales\n- Monitor outstanding payments\n- Payment recording and allocation\n- Credit limit management\n\n### Accounts Payable\n\n- Supplier payment tracking\n- Invoice management\n- Payment scheduling\n- Cash flow planning\n\n### Cash Reconciliation\n\n- Daily cash counting and verification\n- Bank deposit reconciliation\n- Variance analysis and reporting\n- Audit trail maintenance\n\n### Expense Management\n\n- Record operational expenses\n- Categorize expenses (utilities, maintenance, supplies, etc.)\n- Expense approval workflow\n- Budget tracking and analysis\n\n---\n\n## Supplier Management\n\nMaintain relationships with fuel suppliers and vendors.\n\n### Supplier Database\n\n- Complete supplier contact information\n- Credit terms and payment conditions\n- Performance tracking\n- Contract management\n\n### Supplier Performance\n\n- Delivery reliability tracking\n- Quality assessment\n- Cost comparison\n- Relationship management\n\n---\n\n## Price Management\n\nControl fuel pricing and profit margins.\n\n### Current Pricing\n\n- Real-time fuel prices\n- Product-wise pricing structure\n- Tax and margin calculations\n- Competitive pricing analysis\n\n### Price Updates\n\n- Regular price adjustments\n- Historical price tracking\n- Margin analysis\n- Profit optimization\n\n---\n\n## Reports\n\nComprehensive reporting for business intelligence.\n\n### Daily Reports\n\n- Daily sales summary\n- Cash collection report\n- Product-wise sales analysis\n- Transaction summary\n\n### Financial Reports\n\n- Profit and loss statements\n- Cash flow analysis\n- Revenue tracking\n- Expense analysis\n\n### Aging Reports\n\n- Customer outstanding analysis\n- Payment pattern tracking\n- Credit risk assessment\n- Collection management\n\n### Custom Reports\n\n- Date range selection\n- Product filtering\n- Customer segmentation\n- Export capabilities\n\n---\n\n## Settings\n\nConfigure system preferences and operational parameters.\n\n### Station Settings\n\n- Station information and contact details\n- Operating hours and schedules\n- Tax configuration\n- Currency settings\n\n### User Management\n\n- Create and manage user accounts\n- Assign roles and permissions\n- Password management\n- Activity tracking\n\n### System Preferences\n\n- Default payment methods\n- Print settings\n- Backup configuration\n- Security settings\n\n---\n\n## User Roles & Permissions\n\n### Admin Role\n- Full system access\n- User management\n- System configuration\n- All financial operations\n\n### Manager Role\n- Sales and customer management\n- Inventory and purchase orders\n- Financial reports\n- Staff supervision\n\n### Cashier Role\n- Point of sale operations\n- Customer transactions\n- Basic reporting\n- Cash handling\n\n---\n\n## Troubleshooting\n\n### Common Issues\n\n**Login Problems**:\n- Verify username and password\n- Check internet connection\n- Clear browser cache\n\n**Transaction Issues**:\n- Ensure customer selection\n- Verify product availability\n- Check payment method\n\n**Print Problems**:\n- Enable browser popups\n- Check printer connection\n- Verify print settings\n\n**Performance Issues**:\n- Close unnecessary browser tabs\n- Check internet speed\n- Refresh the application\n\n### Getting Help\n\n- Contact system administrator\n- Check user manual\n- Review transaction logs\n- Escalate technical issues\n\n---\n\n## Best Practices\n\n### Daily Operations\n\n1. **Start of Day**:\n   - Check tank levels\n   - Verify cash drawer\n   - Review pending orders\n\n2. **During Operations**:\n   - Process sales promptly\n   - Monitor stock levels\n   - Maintain customer records\n\n3. **End of Day**:\n   - Complete cash reconciliation\n   - Review daily reports\n   - Backup important data\n\n### Data Management\n\n- Regular backups\n- Accurate transaction recording\n- Timely payment processing\n- Consistent pricing updates\n\n### Security\n\n- Secure login credentials\n- Regular password changes\n- Limited user access\n- Transaction verification\n\n---\n\n## Contact & Support\n\nFor technical support or questions about using FuelFlow:\n\n- System Administrator: Contact your IT department\n- User Training: Request additional training sessions\n- Feature Requests: Submit enhancement suggestions\n- Bug Reports: Report system issues promptly\n\n---\n\n*This guide covers the core functionality of FuelFlow Petrol Pump Management System. For specific operational procedures, consult with your system administrator or refer to your organization's standard operating procedures.*","size_bytes":11658},"client/src/contexts/StationContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\nimport { apiRequest } from '@/lib/api';\n\nexport interface StationProfile {\n  id: string;\n  name: string;\n  address: string;\n  phone: string;\n  email: string;\n  registrationNumber: string;\n  taxNumber: string;\n  logo?: string;\n}\n\nexport interface StationSettings {\n  stationName: string;\n  contactNumber: string;\n  email: string;\n  gstNumber: string;\n  address: string;\n  registrationNumber: string;\n  logo?: string;\n}\n\ninterface StationContextType {\n  station: StationProfile | null;\n  updateStation: (station: Partial<StationProfile>) => Promise<void>;\n  stationSettings: StationSettings | null;\n  updateStationSettings: (settings: Partial<StationSettings>) => Promise<void>;\n  loadSettings: (stationId: string) => Promise<void>;\n  isLoading: boolean;\n}\n\nconst StationContext = createContext<StationContextType>({\n  station: null,\n  updateStation: async () => {},\n  stationSettings: null,\n  updateStationSettings: async () => {},\n  isLoading: true,\n});\n\nexport const useStation = () => {\n  const context = useContext(StationContext);\n  if (!context) {\n    throw new Error('useStation must be used within a StationProvider');\n  }\n  return context;\n};\n\ninterface StationProviderProps {\n  children: ReactNode;\n}\n\nexport const StationProvider: React.FC<StationProviderProps> = ({ children }) => {\n  const { user } = useAuth();\n  const [station, setStation] = useState<StationProfile | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Convert station to stationSettings format\n  const stationSettings: StationSettings | null = station ? {\n    stationName: station.name,\n    contactNumber: station.phone,\n    email: station.email,\n    gstNumber: station.taxNumber,\n    address: station.address,\n    registrationNumber: station.registrationNumber,\n    logo: station.logo,\n  } : null;\n\n  useEffect(() => {\n    const fetchStationDetails = async () => {\n      if (user?.stationId) {\n        try {\n          const response = await apiRequest('GET', `/api/stations/${user.stationId}`);\n          if (response.ok) {\n            const stationData = await response.json();\n            setStation({\n              id: stationData.id,\n              name: stationData.name,\n              address: stationData.address || 'Station Address',\n              phone: stationData.phone || '+92-XXX-XXXXXXX',\n              email: stationData.email || 'station@fuelflow.com',\n              registrationNumber: stationData.registrationNumber || 'REG-001',\n              taxNumber: stationData.taxNumber || 'TAX-001',\n              logo: stationData.logo,\n            });\n          }\n        } catch (error) {\n          console.error('Failed to fetch station details:', error);\n          // Set default station details if fetch fails\n          setStation({\n            id: user.stationId,\n            name: 'FuelFlow Station',\n            address: 'Station Address',\n            phone: '+92-XXX-XXXXXXX',\n            email: 'station@fuelflow.com',\n            registrationNumber: 'REG-001',\n            taxNumber: 'TAX-001',\n          });\n        }\n      }\n      setIsLoading(false);\n    };\n\n    fetchStationDetails();\n  }, [user?.stationId]);\n\n  const updateStation = async (updates: Partial<StationProfile>) => {\n    if (!station || !user?.stationId) return;\n\n    try {\n      const response = await apiRequest(\"PUT\", `/api/stations/${user.stationId}`, updates);\n      if (response.ok) {\n        const updatedStation = await response.json();\n        setStation(prev => prev ? { ...prev, ...updatedStation } : null);\n      } else {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n    } catch (error) {\n      console.error('Failed to update station:', error);\n      throw error;\n    }\n  };\n\n  const updateStationSettings = async (settings: Partial<StationSettings>) => {\n    if (!station || !user?.stationId) return;\n\n    // Convert stationSettings format to station format\n    const updates: Partial<StationProfile> = {};\n    if (settings.stationName !== undefined) updates.name = settings.stationName;\n    if (settings.contactNumber !== undefined) updates.phone = settings.contactNumber;\n    if (settings.email !== undefined) updates.email = settings.email;\n    if (settings.gstNumber !== undefined) updates.taxNumber = settings.gstNumber;\n    if (settings.address !== undefined) updates.address = settings.address;\n    if (settings.registrationNumber !== undefined) updates.registrationNumber = settings.registrationNumber;\n    if (settings.logo !== undefined) updates.logo = settings.logo;\n\n    await updateStation(updates);\n  };\n\n  const loadSettings = async (stationId: string) => {\n    try {\n      const response = await apiRequest('GET', `/api/stations/${stationId}`);\n      if (response.ok) {\n        const stationData = await response.json();\n        setStation({\n          id: stationData.id,\n          name: stationData.name,\n          address: stationData.address || 'Station Address',\n          phone: stationData.phone || '+92-XXX-XXXXXXX',\n          email: stationData.email || 'station@fuelflow.com',\n          registrationNumber: stationData.registrationNumber || 'REG-001',\n          taxNumber: stationData.taxNumber || 'TAX-001',\n          logo: stationData.logo,\n        });\n      }\n    } catch (error) {\n      console.error('Failed to load station settings:', error);\n    }\n  };\n\n  return (\n    <StationContext.Provider value={{ station, updateStation, stationSettings, updateStationSettings, loadSettings, isLoading }}>\n      {children}\n    </StationContext.Provider>\n  );\n};","size_bytes":5658},"client/src/pages/AdminPanel.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/api\";\nimport { Users, Settings, Building2, Shield, Plus, Edit, Trash2 } from \"lucide-react\";\n\ninterface User {\n  id: string;\n  username: string;\n  fullName: string;\n  role: string;\n  stationId?: string;\n  isActive: boolean;\n  createdAt: string;\n}\n\ninterface Station {\n  id: string;\n  name: string;\n  address: string;\n  contactPhone: string;\n  isActive: boolean;\n}\n\nexport default function AdminPanel() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  // Redirect if not admin\n  useEffect(() => {\n    if (user?.role !== 'admin') {\n      toast({\n        title: \"Access Denied\",\n        description: \"Only administrators can access this panel\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n  }, [user, toast]);\n\n  const [users, setUsers] = useState<User[]>([]);\n  const [stations, setStations] = useState<Station[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState<'users' | 'stations' | 'system'>('users');\n\n  // User form state\n  const [userForm, setUserForm] = useState({\n    username: '',\n    password: '',\n    fullName: '',\n    role: 'cashier' as const,\n    stationId: '',\n    isActive: true\n  });\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n  const [userDialogOpen, setUserDialogOpen] = useState(false);\n\n  // Station form state\n  const [stationForm, setStationForm] = useState({\n    name: '',\n    address: '',\n    contactPhone: '',\n    isActive: true\n  });\n  const [editingStation, setEditingStation] = useState<Station | null>(null);\n  const [stationDialogOpen, setStationDialogOpen] = useState(false);\n\n  // System settings\n  const [systemSettings, setSystemSettings] = useState({\n    maintenanceMode: false,\n    allowNewRegistrations: true,\n    sessionTimeout: 24,\n    backupFrequency: 'daily'\n  });\n\n  // Load data\n  useEffect(() => {\n    if (user?.role === 'admin') {\n      loadUsers();\n      loadStations();\n      loadSystemSettings();\n    }\n  }, [user]);\n\n  const loadUsers = async () => {\n    try {\n      const response = await apiRequest('GET', '/api/admin/users');\n      if (response.ok) {\n        const data = await response.json();\n        setUsers(data);\n      }\n    } catch (error) {\n      console.error('Error loading users:', error);\n    }\n  };\n\n  const loadStations = async () => {\n    try {\n      const response = await apiRequest('GET', '/api/stations');\n      if (response.ok) {\n        const data = await response.json();\n        setStations(data);\n      }\n    } catch (error) {\n      console.error('Error loading stations:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadSystemSettings = () => {\n    // Load from localStorage for now\n    const saved = localStorage.getItem('systemSettings');\n    if (saved) {\n      try {\n        setSystemSettings(JSON.parse(saved));\n      } catch (error) {\n        console.error('Error loading system settings:', error);\n      }\n    }\n  };\n\n  const handleCreateUser = async () => {\n    try {\n      const response = await apiRequest('POST', '/api/admin/users', userForm);\n      if (response.ok) {\n        const newUser = await response.json();\n        setUsers(prev => [...prev, newUser]);\n        setUserForm({ username: '', password: '', fullName: '', role: 'cashier', stationId: '', isActive: true });\n        setUserDialogOpen(false);\n        toast({ title: \"User created successfully\" });\n      }\n    } catch (error) {\n      toast({ title: \"Failed to create user\", variant: \"destructive\" });\n    }\n  };\n\n  const updateUser = async (userId: string, updates: any) => {\n    try {\n      await apiRequest(\"PUT\", `/api/admin/users/${userId}`, updates);\n      toast({\n        title: \"Success\",\n        description: \"User updated successfully\",\n      });\n\n      // If deactivating a user, notify them via a broadcast channel (for same-browser sessions)\n      if (updates.isActive === false) {\n        const broadcastChannel = new BroadcastChannel('user-status');\n        broadcastChannel.postMessage({ \n          type: 'USER_DEACTIVATED', \n          userId \n        });\n      }\n\n      // Refetch users\n      const response = await apiRequest(\"GET\", \"/api/admin/users\");\n      const updatedUsers = await response.json();\n      setUsers(updatedUsers);\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update user\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDeleteUser = async (userId: string) => {\n    if (!confirm('Are you sure you want to delete this user?')) return;\n\n    try {\n      const response = await apiRequest('DELETE', `/api/admin/users/${userId}`);\n      if (response.ok) {\n        setUsers(prev => prev.filter(u => u.id !== userId));\n        toast({ title: \"User deleted successfully\" });\n      }\n    } catch (error) {\n      toast({ title: \"Failed to delete user\", variant: \"destructive\" });\n    }\n  };\n\n  const handleApproveUser = async (userId: string) => {\n    updateUser(userId, { isActive: true });\n  };\n\n  const handleRejectUser = async (userId: string) => {\n    updateUser(userId, { isActive: false });\n  };\n\n  const handleCreateStation = async () => {\n    try {\n      const response = await apiRequest('POST', '/api/stations', stationForm);\n      if (response.ok) {\n        const newStation = await response.json();\n        setStations(prev => [...prev, newStation]);\n        setStationForm({ name: '', address: '', contactPhone: '', isActive: true });\n        setStationDialogOpen(false);\n        toast({ title: \"Station created successfully\" });\n      }\n    } catch (error) {\n      toast({ title: \"Failed to create station\", variant: \"destructive\" });\n    }\n  };\n\n  const saveSystemSettings = () => {\n    localStorage.setItem('systemSettings', JSON.stringify(systemSettings));\n    toast({ title: \"System settings saved\" });\n  };\n\n  if (user?.role !== 'admin') {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"text-center\">\n          <Shield className=\"w-16 h-16 mx-auto text-muted-foreground mb-4\" />\n          <h2 className=\"text-xl font-semibold mb-2\">Access Denied</h2>\n          <p className=\"text-muted-foreground\">Only administrators can access this panel</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (loading) {\n    return <div className=\"flex items-center justify-center h-96\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6 fade-in\">\n      <div className=\"mb-6\">\n        <h3 className=\"text-2xl font-semibold text-card-foreground mb-2\">Admin Panel</h3>\n        <p className=\"text-muted-foreground\">\n          Manage users, stations, and system settings\n        </p>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"flex space-x-1 bg-muted p-1 rounded-lg w-fit\">\n        <button\n          onClick={() => setActiveTab('users')}\n          className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n            activeTab === 'users' \n              ? 'bg-background text-foreground shadow-sm' \n              : 'text-muted-foreground hover:text-foreground'\n          }`}\n        >\n          <Users className=\"w-4 h-4 inline mr-2\" />\n          Users\n        </button>\n        <button\n          onClick={() => setActiveTab('stations')}\n          className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n            activeTab === 'stations' \n              ? 'bg-background text-foreground shadow-sm' \n              : 'text-muted-foreground hover:text-foreground'\n          }`}\n        >\n          <Building2 className=\"w-4 h-4 inline mr-2\" />\n          Stations\n        </button>\n        <button\n          onClick={() => setActiveTab('system')}\n          className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n            activeTab === 'system' \n              ? 'bg-background text-foreground shadow-sm' \n              : 'text-muted-foreground hover:text-foreground'\n          }`}\n        >\n          <Settings className=\"w-4 h-4 inline mr-2\" />\n          System\n        </button>\n      </div>\n\n      {/* Users Tab */}\n      {activeTab === 'users' && (\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between\">\n            <CardTitle>User Management</CardTitle>\n            <Dialog open={userDialogOpen} onOpenChange={setUserDialogOpen}>\n              <DialogTrigger asChild>\n                <Button onClick={() => {\n                  setEditingUser(null);\n                  setUserForm({ username: '', password: '', fullName: '', role: 'cashier', stationId: '', isActive: true });\n                }}>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add User\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>{editingUser ? 'Edit User' : 'Create New User'}</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label>Username</Label>\n                    <Input\n                      value={userForm.username}\n                      onChange={(e) => setUserForm(prev => ({ ...prev, username: e.target.value }))}\n                    />\n                  </div>\n                  <div>\n                    <Label>Password</Label>\n                    <Input\n                      type=\"password\"\n                      value={userForm.password}\n                      onChange={(e) => setUserForm(prev => ({ ...prev, password: e.target.value }))}\n                    />\n                  </div>\n                  <div>\n                    <Label>Full Name</Label>\n                    <Input\n                      value={userForm.fullName}\n                      onChange={(e) => setUserForm(prev => ({ ...prev, fullName: e.target.value }))}\n                    />\n                  </div>\n                  <div>\n                    <Label>Role</Label>\n                    <Select \n                      value={userForm.role} \n                      onValueChange={(value: 'admin' | 'manager' | 'cashier') => \n                        setUserForm(prev => ({ ...prev, role: value }))\n                      }\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"admin\">Admin</SelectItem>\n                        <SelectItem value=\"manager\">Manager</SelectItem>\n                        <SelectItem value=\"cashier\">Cashier</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label>Station</Label>\n                    <Select \n                      value={userForm.stationId} \n                      onValueChange={(value) => setUserForm(prev => ({ ...prev, stationId: value }))}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select station\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {stations.map(station => (\n                          <SelectItem key={station.id} value={station.id}>\n                            {station.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button variant=\"outline\" onClick={() => setUserDialogOpen(false)}>\n                      Cancel\n                    </Button>\n                    <Button onClick={editingUser ? () => updateUser(editingUser.id, userForm) : handleCreateUser}>\n                      {editingUser ? 'Update' : 'Create'}\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </CardHeader>\n          <CardContent>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Username</TableHead>\n                  <TableHead>Full Name</TableHead>\n                  <TableHead>Role</TableHead>\n                  <TableHead>Station</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {users.map(user => (\n                  <TableRow key={user.id}>\n                    <TableCell className=\"font-medium\">{user.username}</TableCell>\n                    <TableCell>{user.fullName}</TableCell>\n                    <TableCell>\n                      <Badge variant={user.role === 'admin' ? 'default' : 'secondary'}>\n                        {user.role}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      {stations.find(s => s.id === user.stationId)?.name || 'N/A'}\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant={user.isActive ? 'default' : 'destructive'}>\n                        {user.isActive ? 'Active' : 'Inactive'}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex space-x-2\">\n                        {!user.isActive && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"default\"\n                            onClick={() => handleApproveUser(user.id)}\n                            className=\"bg-green-600 hover:bg-green-700\"\n                          >\n                            Approve\n                          </Button>\n                        )}\n                        {user.isActive && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleRejectUser(user.id)}\n                            className=\"text-orange-600 border-orange-600 hover:bg-orange-50\"\n                          >\n                            Revoke\n                          </Button>\n                        )}\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => {\n                            setEditingUser(user);\n                            setUserForm({\n                              username: user.username,\n                              password: '',\n                              fullName: user.fullName,\n                              role: user.role as 'admin' | 'manager' | 'cashier',\n                              stationId: user.stationId || '',\n                              isActive: user.isActive\n                            });\n                            setUserDialogOpen(true);\n                          }}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          onClick={() => handleDeleteUser(user.id)}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Stations Tab */}\n      {activeTab === 'stations' && (\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between\">\n            <CardTitle>Station Management</CardTitle>\n            <Dialog open={stationDialogOpen} onOpenChange={setStationDialogOpen}>\n              <DialogTrigger asChild>\n                <Button onClick={() => {\n                  setEditingStation(null);\n                  setStationForm({ name: '', address: '', contactPhone: '', isActive: true });\n                }}>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Station\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Create New Station</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label>Station Name</Label>\n                    <Input\n                      value={stationForm.name}\n                      onChange={(e) => setStationForm(prev => ({ ...prev, name: e.target.value }))}\n                    />\n                  </div>\n                  <div>\n                    <Label>Address</Label>\n                    <Input\n                      value={stationForm.address}\n                      onChange={(e) => setStationForm(prev => ({ ...prev, address: e.target.value }))}\n                    />\n                  </div>\n                  <div>\n                    <Label>Contact Phone</Label>\n                    <Input\n                      value={stationForm.contactPhone}\n                      onChange={(e) => setStationForm(prev => ({ ...prev, contactPhone: e.target.value }))}\n                    />\n                  </div>\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button variant=\"outline\" onClick={() => setStationDialogOpen(false)}>\n                      Cancel\n                    </Button>\n                    <Button onClick={handleCreateStation}>\n                      Create Station\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </CardHeader>\n          <CardContent>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Name</TableHead>\n                  <TableHead>Address</TableHead>\n                  <TableHead>Phone</TableHead>\n                  <TableHead>Status</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {stations.map(station => (\n                  <TableRow key={station.id}>\n                    <TableCell className=\"font-medium\">{station.name}</TableCell>\n                    <TableCell>{station.address}</TableCell>\n                    <TableCell>{station.contactPhone}</TableCell>\n                    <TableCell>\n                      <Badge variant={station.isActive ? 'default' : 'destructive'}>\n                        {station.isActive ? 'Active' : 'Inactive'}\n                      </Badge>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* System Settings Tab */}\n      {activeTab === 'system' && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>System Configuration</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>Maintenance Mode</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Disable user access for system maintenance\n                  </p>\n                </div>\n                <Switch\n                  checked={systemSettings.maintenanceMode}\n                  onCheckedChange={(checked) => \n                    setSystemSettings(prev => ({ ...prev, maintenanceMode: checked }))\n                  }\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>Allow New Registrations</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Allow users to create new accounts\n                  </p>\n                </div>\n                <Switch\n                  checked={systemSettings.allowNewRegistrations}\n                  onCheckedChange={(checked) => \n                    setSystemSettings(prev => ({ ...prev, allowNewRegistrations: checked }))\n                  }\n                />\n              </div>\n\n              <div>\n                <Label>Session Timeout (hours)</Label>\n                <Input\n                  type=\"number\"\n                  value={systemSettings.sessionTimeout}\n                  onChange={(e) => \n                    setSystemSettings(prev => ({ ...prev, sessionTimeout: parseInt(e.target.value) }))\n                  }\n                  className=\"mt-2\"\n                />\n              </div>\n\n              <div>\n                <Label>Backup Frequency</Label>\n                <Select \n                  value={systemSettings.backupFrequency} \n                  onValueChange={(value) => \n                    setSystemSettings(prev => ({ ...prev, backupFrequency: value }))\n                  }\n                >\n                  <SelectTrigger className=\"mt-2\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"hourly\">Hourly</SelectItem>\n                    <SelectItem value=\"daily\">Daily</SelectItem>\n                    <SelectItem value=\"weekly\">Weekly</SelectItem>\n                    <SelectItem value=\"monthly\">Monthly</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <Button onClick={saveSystemSettings} className=\"w-full\">\n                Save System Settings\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>System Statistics</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center p-4 bg-muted rounded-lg\">\n                  <div className=\"text-2xl font-bold\">{users.length}</div>\n                  <div className=\"text-sm text-muted-foreground\">Total Users</div>\n                </div>\n                <div className=\"text-center p-4 bg-muted rounded-lg\">\n                  <div className=\"text-2xl font-bold\">{stations.length}</div>\n                  <div className=\"text-sm text-muted-foreground\">Active Stations</div>\n                </div>\n                <div className=\"text-center p-4 bg-muted rounded-lg\">\n                  <div className=\"text-2xl font-bold\">{users.filter(u => u.isActive).length}</div>\n                  <div className=\"text-sm text-muted-foreground\">Active Users</div>\n                </div>\n                <div className=\"text-center p-4 bg-muted rounded-lg\">\n                  <div className=\"text-2xl font-bold\">{users.filter(u => u.role === 'admin').length}</div>\n                  <div className=\"text-sm text-muted-foreground\">Admin Users</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":24033},"client/src/components/ui/confirm-delete.tsx":{"content":"import {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"./alert-dialog\";\nimport { Trash2 } from \"lucide-react\";\n\ninterface ConfirmDeleteProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onConfirm: () => void;\n  title?: string;\n  description?: string;\n  itemName?: string;\n  isLoading?: boolean;\n}\n\nexport function ConfirmDelete({\n  open,\n  onOpenChange,\n  onConfirm,\n  title,\n  description,\n  itemName,\n  isLoading = false\n}: ConfirmDeleteProps) {\n  return (\n    <AlertDialog open={open} onOpenChange={onOpenChange}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"flex h-10 w-10 items-center justify-center rounded-full bg-red-100 dark:bg-red-900/20\">\n              <Trash2 className=\"h-5 w-5 text-red-600 dark:text-red-400\" />\n            </div>\n            <AlertDialogTitle>\n              {title || `Delete ${itemName || 'Item'}`}\n            </AlertDialogTitle>\n          </div>\n          <AlertDialogDescription>\n            {description || `Are you sure you want to delete \"${itemName}\"? This action cannot be undone.`}\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel disabled={isLoading} data-testid=\"button-cancel-delete\">\n            Cancel\n          </AlertDialogCancel>\n          <AlertDialogAction\n            onClick={onConfirm}\n            disabled={isLoading}\n            className=\"bg-red-600 hover:bg-red-700 focus:ring-red-600\"\n            data-testid=\"button-confirm-delete\"\n          >\n            {isLoading ? \"Deleting...\" : \"Delete\"}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}","size_bytes":1878},"ICON_IMPLEMENTATION_REPORT.md":{"content":"\n# Icon Implementation Report\n\n## Overview\nThis report details the comprehensive implementation of outlined Lucide icons across all pages of the FuelFlow Petrol Pump Management System, replacing buttons with functional icon-based actions.\n\n## Changes Made\n\n### 1. Sidebar Improvements\n- **Collapse Button**: Changed from chevron icons to WhatsApp-style menu icon\n- **User Section**: Now hidden when sidebar is collapsed\n- **Logout Button**: Hidden when sidebar collapsed for cleaner design\n- **Scrollbar**: Updated to 1px ultra-thin scrollbars with hover effects\n\n### 2. Customer Management Page\n**Icons Implemented:**\n- üëÅÔ∏è **Eye Icon (View)**: Opens customer details in popup dialog\n- ‚úèÔ∏è **Edit Icon**: Opens edit customer form in dialog\n- üí≥ **CreditCard Icon**: Opens payment recording dialog for credit customers\n- üóëÔ∏è **Trash2 Icon**: Opens delete confirmation dialog\n\n**Functionality Added:**\n- View customer details in popup format (not toast notifications)\n- Edit customer information with pre-filled forms\n- Record payments for credit customers\n- Delete customers with outstanding amount validation\n\n### 3. Supplier Management Page\n**Icons Implemented:**\n- üëÅÔ∏è **Eye Icon (View)**: Shows supplier details in popup\n- ‚úèÔ∏è **Edit Icon**: Opens edit supplier form\n- üí≥ **CreditCard Icon**: Payment recording for suppliers with outstanding amounts\n- üóëÔ∏è **Trash2 Icon**: Delete supplier with validation\n\n**Functionality Added:**\n- Complete supplier CRUD operations\n- Payment tracking and recording\n- Outstanding amount management\n\n### 4. Accounts Payable Page\n**Icons Implemented:**\n- üëÅÔ∏è **Eye Icon (View)**: View supplier details\n- üíµ **DollarSign Icon**: Quick payment recording\n- üìã **History Icon**: Payment history viewer in popup dialog\n\n**Functionality Added:**\n- Payment history dialog shows complete payment records\n- Quick payment functionality with form validation\n- Supplier payment tracking\n\n### 5. Accounts Receivable Page\n**Icons Implemented:**\n- üëÅÔ∏è **Eye Icon (View)**: Customer details viewer\n- üíµ **DollarSign Icon**: Payment collection\n- üìã **History Icon**: Payment history in popup format\n\n**Functionality Added:**\n- Payment collection with proper validation\n- Customer payment history in dialog format\n- Outstanding balance tracking\n\n### 6. Purchase Orders Page\n**Icons Implemented:**\n- üëÅÔ∏è **Eye Icon (View)**: View purchase order details\n- ‚úèÔ∏è **Pencil Icon (Edit)**: Edit existing orders\n- üñ®Ô∏è **Printer Icon**: Print purchase orders\n- üóëÔ∏è **Trash2 Icon**: Delete orders with confirmation\n\n**Functionality Added:**\n- Complete purchase order lifecycle management\n- Print functionality for orders\n- Edit mode with form pre-population\n\n### 7. New Pump Management Page\n**Complete new module created with:**\n- ‚õΩ **Fuel Icons**: Pump status indicators\n- ‚ûï **Plus Icon**: Add new pumps\n- ‚úèÔ∏è **Edit Icon**: Edit pump configurations\n- üóëÔ∏è **Trash2 Icon**: Delete pumps\n- ‚öôÔ∏è **Settings Icon**: Pump configuration\n\n**Features Implemented:**\n- Pump configuration management\n- Daily pump readings with shift tracking\n- Operator assignment and tracking\n- Real-time pump status monitoring\n- Sales calculation based on readings\n\n### 8. Point of Sale Improvements\n**Enhanced for Mixed Products:**\n- Support for tank products (fuel) and non-tank products (lubricants)\n- Automatic quantity adjustment based on product type\n- Proper handling of products without tank assignments\n\n### 9. Backend Enhancements\n**New Database Tables:**\n- `pumps` table for pump configuration\n- `pump_readings` table for daily readings\n- Proper relations and constraints\n\n**API Endpoints Added:**\n- `GET /api/pumps/:stationId` - Get station pumps\n- `POST /api/pumps` - Create new pump\n- `PUT /api/pumps/:id` - Update pump\n- `DELETE /api/pumps/:id` - Delete pump\n- `GET /api/pump-readings/:stationId` - Get pump readings\n- `POST /api/pump-readings` - Record readings\n\n**Payment History API:**\n- Enhanced payment queries for history viewing\n- Proper filtering by customer/supplier\n- Detailed payment information retrieval\n\n## Form Validation Fixes\n\n### Issues Identified and Fixed:\n1. **Missing Required Fields**: Added proper validation schemas\n2. **Date Field Handling**: Fixed date parsing and formatting\n3. **Decimal Precision**: Proper handling of currency and quantity fields\n4. **Foreign Key Validation**: Ensured proper entity relationships\n\n### Validation Improvements:\n- All forms now use proper Zod schemas\n- Error messages are clear and actionable\n- Required field indicators added\n- Proper data type validation\n\n## Visual Design Updates\n\n### Scrollbar Styling:\n- Ultra-thin 1px scrollbars\n- Hover effects for better visibility\n- Theme-aware colors (dark/light mode)\n- Smooth transitions\n\n### Icon Hover Effects:\n- Color-coded hover states\n- Background color changes on hover\n- Consistent sizing (w-4 h-4)\n- Proper spacing and alignment\n\n### Responsive Design:\n- Icons maintain visibility on all screen sizes\n- Proper touch targets for mobile devices\n- Consistent spacing across different resolutions\n\n## Accessibility Improvements\n\n### Screen Reader Support:\n- All icons have proper `title` attributes\n- Semantic HTML structure maintained\n- ARIA labels where necessary\n\n### Keyboard Navigation:\n- All icon buttons are keyboard accessible\n- Proper focus indicators\n- Tab order optimization\n\n## Performance Optimizations\n\n### Code Efficiency:\n- Removed unnecessary Button components\n- Direct event handlers for better performance\n- Optimized re-renders with proper state management\n\n### Bundle Size:\n- Reduced component overhead\n- Tree-shaking friendly icon imports\n- Minimal CSS for hover effects\n\n## Testing Considerations\n\n### Manual Testing Performed:\n- All icon interactions tested\n- Form submissions validated\n- Error handling verified\n- Cross-browser compatibility checked\n\n### Recommended Automated Tests:\n- Unit tests for icon click handlers\n- Integration tests for form submissions\n- E2E tests for complete workflows\n\n## Future Enhancements\n\n### Planned Improvements:\n1. **Icon Tooltips**: Enhanced tooltip system\n2. **Animation Effects**: Subtle hover animations\n3. **Icon Themes**: Customizable icon sets\n4. **Bulk Actions**: Multi-select with batch operations\n\n### Scalability Considerations:\n- Icon component abstraction for reusability\n- Centralized icon configuration\n- Theme-based icon switching\n\n## Conclusion\n\nThe icon implementation provides a modern, intuitive interface that:\n- Reduces visual clutter\n- Improves user experience\n- Maintains full functionality\n- Ensures accessibility compliance\n- Supports future scalability\n\nAll requested changes have been implemented with proper error handling, validation, and user feedback mechanisms. The system now provides a comprehensive pump management solution alongside enhanced usability across all modules.\n","size_bytes":6849},"client/src/pages/PaymentHistory.tsx":{"content":"\nimport { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useCurrency } from \"@/contexts/CurrencyContext\";\nimport { useStation } from \"@/contexts/StationContext\";\nimport { apiRequest } from \"@/lib/api\";\nimport { ArrowLeft, Download, Printer } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { generatePrintTemplate, printDocument, downloadAsPDF, downloadAsPNG } from \"@/lib/printUtils\";\nimport type { Payment, Customer, Supplier } from \"@shared/schema\";\n\ninterface PaymentWithDetails extends Payment {\n  customer?: Customer;\n  supplier?: Supplier;\n}\n\nfunction PaymentHistory() {\n  const { id, type } = useParams<{ id: string; type: string }>();\n  const { user } = useAuth();\n  const { formatCurrency } = useCurrency();\n  const { stationSettings } = useStation();\n\n  const { data: payments = [], isLoading } = useQuery<PaymentWithDetails[]>({\n    queryKey: [\"/api/payments\", user?.stationId, id, type],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/payments/${user?.stationId}`);\n      const allPayments = await response.json();\n      return allPayments.filter((payment: PaymentWithDetails) =>\n        type === 'customer' ? payment.customerId === id : payment.supplierId === id\n      );\n    },\n    enabled: !!user?.stationId && !!id && !!type,\n  });\n\n  const { data: customerData } = useQuery<Customer>({\n    queryKey: [\"/api/customers\", id],\n    queryFn: () => apiRequest(\"GET\", `/api/customers/${id}`).then(res => res.json()),\n    enabled: !!id && type === 'customer',\n  });\n\n  const { data: supplierData } = useQuery<Supplier>({\n    queryKey: [\"/api/suppliers\", id],\n    queryFn: () => apiRequest(\"GET\", `/api/suppliers/${id}`).then(res => res.json()),\n    enabled: !!id && type === 'supplier',\n  });\n\n  const entity = type === 'customer' ? customerData : supplierData;\n  const totalPayments = payments.reduce((sum, p) => sum + parseFloat(p.amount), 0);\n\n  const handlePrint = () => {\n    if (!entity || !payments) return;\n    \n    const statementData = {\n      entityType: type === 'customer' ? 'Customer' : 'Supplier',\n      entityName: entity.name,\n      entity,\n      payments,\n      totalPayments: formatCurrency(totalPayments),\n      outstandingAmount: formatCurrency(parseFloat(entity.outstandingAmount || '0')),\n      stationName: stationSettings?.stationName || 'FuelFlow Station',\n      stationAddress: stationSettings?.address || '',\n      stationPhone: stationSettings?.contactNumber || '',\n      stationEmail: stationSettings?.email || '',\n      generatedDate: new Date().toLocaleDateString()\n    };\n\n    const template = generatePrintTemplate(statementData, 'statement');\n    printDocument(template);\n  };\n\n  const handleDownloadPDF = () => {\n    if (!entity || !payments) return;\n\n    const statementData = {\n      entityType: type === 'customer' ? 'Customer' : 'Supplier',\n      entityName: entity.name,\n      entity,\n      payments,\n      totalPayments: formatCurrency(totalPayments),\n      outstandingAmount: formatCurrency(parseFloat(entity.outstandingAmount || '0')),\n      stationName: stationSettings?.stationName || 'FuelFlow Station',\n      stationAddress: stationSettings?.address || '',\n      stationPhone: stationSettings?.contactNumber || '',\n      stationEmail: stationSettings?.email || '',\n      generatedDate: new Date().toLocaleDateString()\n    };\n\n    const template = generatePrintTemplate(statementData, 'statement');\n    downloadAsPDF(template);\n  };\n\n  const handleDownloadPNG = () => {\n    if (!entity || !payments) return;\n\n    const statementData = {\n      entityType: type === 'customer' ? 'Customer' : 'Supplier',\n      entityName: entity.name,\n      entity,\n      payments,\n      totalPayments: formatCurrency(totalPayments),\n      outstandingAmount: formatCurrency(parseFloat(entity.outstandingAmount || '0')),\n      stationName: stationSettings?.stationName || 'FuelFlow Station',\n      stationAddress: stationSettings?.address || '',\n      stationPhone: stationSettings?.contactNumber || '',\n      stationEmail: stationSettings?.email || '',\n      generatedDate: new Date().toLocaleDateString()\n    };\n\n    const template = generatePrintTemplate(statementData, 'statement');\n    downloadAsPNG(template);\n  };\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center h-96\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"print:hidden sticky top-0 bg-background/80 backdrop-blur-sm border-b z-10\">\n        <div className=\"container mx-auto px-4 sm:px-6 py-4\">\n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n            <div className=\"flex items-center gap-4\">\n              <Link href={type === 'customer' ? '/accounts-receivable' : '/accounts-payable'}>\n                <Button variant=\"ghost\" size=\"sm\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back\n                </Button>\n              </Link>\n              <h1 className=\"text-xl sm:text-2xl font-bold\">Payment History - {entity?.name}</h1>\n            </div>\n            <div className=\"flex flex-col sm:flex-row items-stretch sm:items-center gap-2 w-full sm:w-auto\">\n              <Button onClick={handlePrint} size=\"sm\" className=\"w-full sm:w-auto\">\n                <Printer className=\"w-4 h-4 mr-2\" />\n                Print\n              </Button>\n              <Button onClick={handleDownloadPDF} variant=\"outline\" size=\"sm\" className=\"w-full sm:w-auto\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                PDF\n              </Button>\n              <Button onClick={handleDownloadPNG} variant=\"outline\" size=\"sm\" className=\"w-full sm:w-auto\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                PNG\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 sm:px-6 py-8 max-w-4xl\">\n        <Card className=\"print:shadow-none print:border-none\">\n          <CardHeader>\n            <CardTitle className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n              <span>Payment History</span>\n              <div className=\"text-sm text-muted-foreground\">\n                Total: {formatCurrency(totalPayments)} | Outstanding: {formatCurrency(parseFloat(entity?.outstandingAmount || '0'))}\n              </div>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {payments.length > 0 ? payments.map((payment) => (\n                <div key={payment.id} className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between p-4 border border-border rounded-md gap-4\">\n                  <div className=\"flex-1\">\n                    <div className=\"font-medium text-lg\">{formatCurrency(parseFloat(payment.amount))}</div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {new Date(payment.paymentDate || payment.createdAt).toLocaleDateString()} ‚Ä¢ {payment.paymentMethod}\n                    </div>\n                    {payment.referenceNumber && (\n                      <div className=\"text-xs text-muted-foreground\">Ref: {payment.referenceNumber}</div>\n                    )}\n                    {payment.notes && (\n                      <div className=\"text-xs text-muted-foreground mt-1\">{payment.notes}</div>\n                    )}\n                  </div>\n                  <div className=\"flex flex-col items-end gap-2\">\n                    <Badge variant=\"outline\">{payment.type}</Badge>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {new Date(payment.createdAt).toLocaleTimeString()}\n                    </div>\n                  </div>\n                </div>\n              )) : (\n                <div className=\"text-center text-muted-foreground py-8\">\n                  <div className=\"text-lg font-medium mb-2\">No payment history found</div>\n                  <div className=\"text-sm\">No payments have been recorded for this {type}</div>\n                </div>\n              )}\n            </div>\n            \n            {payments.length > 0 && (\n              <div className=\"mt-6 pt-6 border-t\">\n                <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4 text-center\">\n                  <div>\n                    <div className=\"text-2xl font-bold text-green-600\">{payments.length}</div>\n                    <div className=\"text-sm text-muted-foreground\">Total Payments</div>\n                  </div>\n                  <div>\n                    <div className=\"text-2xl font-bold text-blue-600\">{formatCurrency(totalPayments)}</div>\n                    <div className=\"text-sm text-muted-foreground\">Total Amount</div>\n                  </div>\n                  <div>\n                    <div className=\"text-2xl font-bold text-orange-600\">{formatCurrency(parseFloat(entity?.outstandingAmount || '0'))}</div>\n                    <div className=\"text-sm text-muted-foreground\">Outstanding</div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default PaymentHistory;\n","size_bytes":9498},"client/src/pages/PumpManagement.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCurrency } from \"@/contexts/CurrencyContext\";\nimport { apiRequest } from \"@/lib/api\";\nimport { Fuel, Settings, Eye, Edit, Trash2, Plus } from \"lucide-react\";\nimport { DeleteConfirmation } from \"@/components/ui/delete-confirmation\";\n\nconst pumpReadingSchema = z.object({\n  pumpId: z.string().min(1, \"Pump is required\"),\n  openingReading: z.string().min(1, \"Opening reading is required\").refine((val) => !isNaN(parseFloat(val)), \"Must be a valid number\"),\n  closingReading: z.string().min(1, \"Closing reading is required\").refine((val) => !isNaN(parseFloat(val)), \"Must be a valid number\"),\n  shiftNumber: z.string().min(1, \"Shift number is required\"),\n  operatorName: z.string().min(1, \"Operator name is required\"),\n  readingDate: z.string().min(1, \"Date is required\"),\n});\n\nconst pumpConfigSchema = z.object({\n  name: z.string().min(1, \"Pump name is required\"),\n  pumpNumber: z.string().min(1, \"Pump number is required\"),\n  productId: z.string().min(1, \"Product is required\"),\n  isActive: z.boolean().default(true),\n});\n\ninterface Pump {\n  id: string;\n  name: string;\n  pumpNumber: string;\n  productId: string;\n  product?: { name: string; };\n  isActive: boolean;\n  stationId: string;\n}\n\ninterface PumpReading {\n  id: string;\n  pumpId: string;\n  pump?: { name: string; pumpNumber: string; };\n  productId: string;\n  product?: { name: string; };\n  openingReading: string;\n  closingReading: string;\n  totalSale: string;\n  shiftNumber: string;\n  operatorName: string;\n  readingDate: string;\n}\n\nexport default function PumpManagement() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { formatCurrency } = useCurrency();\n  const [pumpDialogOpen, setPumpDialogOpen] = useState(false);\n  const [readingDialogOpen, setReadingDialogOpen] = useState(false);\n  const [editPumpId, setEditPumpId] = useState<string | null>(null);\n  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);\n  const [pumpToDelete, setPumpToDelete] = useState<Pump | null>(null);\n\n  const pumpForm = useForm({\n    resolver: zodResolver(pumpConfigSchema),\n    defaultValues: {\n      name: \"\",\n      pumpNumber: \"\",\n      productId: \"\",\n      isActive: true,\n    },\n  });\n\n  const readingForm = useForm({\n    resolver: zodResolver(pumpReadingSchema),\n    defaultValues: {\n      pumpId: \"\",\n      openingReading: \"\",\n      closingReading: \"\",\n      shiftNumber: \"1\",\n      operatorName: \"\",\n      readingDate: new Date().toISOString().split('T')[0],\n    },\n  });\n\n  const { data: pumps = [], isLoading: pumpsLoading } = useQuery<Pump[]>({\n    queryKey: [\"/api/pumps\", user?.stationId],\n    queryFn: () => apiRequest(\"GET\", `/api/pumps?stationId=${user?.stationId}`).then(res => res.json()),\n    enabled: !!user?.stationId,\n  });\n\n  const { data: pumpReadings = [], isLoading: readingsLoading } = useQuery<PumpReading[]>({\n    queryKey: [\"/api/pump-readings\", user?.stationId],\n    queryFn: () => apiRequest(\"GET\", `/api/pump-readings?stationId=${user?.stationId}`).then(res => res.json()),\n    enabled: !!user?.stationId,\n  });\n\n  const { data: products = [] } = useQuery<any[]>({\n    queryKey: [\"/api/products\"],\n    queryFn: () => apiRequest(\"GET\", \"/api/products\").then(res => res.json()),\n  });\n\n  const createPumpMutation = useMutation({\n    mutationFn: async (data: any) => {\n      console.log(\"Creating pump with data:\", data);\n      \n      if (!user?.stationId || !user?.id) {\n        throw new Error(\"User session not loaded properly\");\n      }\n\n      const pumpData = {\n        ...data,\n        stationId: user.stationId,\n      };\n\n      console.log(\"Final pump data being sent:\", pumpData);\n      \n      const response = await apiRequest(\"POST\", \"/api/pumps\", pumpData);\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ message: response.statusText }));\n        throw new Error(errorData.message || `HTTP ${response.status}: ${response.statusText}`);\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Pump created\",\n        description: \"New pump has been added successfully\",\n      });\n      setPumpDialogOpen(false);\n      pumpForm.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/pumps\"] });\n    },\n    onError: (error: any) => {\n      console.error(\"Pump creation error:\", error);\n      toast({\n        title: \"Error\",\n        description: error?.message || \"Failed to create pump\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePumpMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await apiRequest(\"PUT\", `/api/pumps/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Pump updated\",\n        description: \"Pump has been updated successfully\",\n      });\n      setPumpDialogOpen(false);\n      setEditPumpId(null);\n      pumpForm.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/pumps\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update pump\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createReadingMutation = useMutation({\n    mutationFn: async (data: any) => {\n      console.log(\"Creating pump reading with data:\", data);\n      \n      if (!user?.stationId || !user?.id) {\n        throw new Error(\"User session not loaded properly\");\n      }\n\n      const opening = parseFloat(data.openingReading);\n      const closing = parseFloat(data.closingReading);\n      \n      if (closing < opening) {\n        throw new Error(\"Closing reading must be greater than opening reading\");\n      }\n\n      const totalSale = closing - opening;\n      const selectedPump = pumps.find(p => p.id === data.pumpId);\n      \n      if (!selectedPump) {\n        throw new Error(\"Selected pump not found\");\n      }\n\n      const readingData = {\n        pumpId: data.pumpId,\n        productId: selectedPump.productId,\n        openingReading: opening.toString(),\n        closingReading: closing.toString(),\n        totalSale: totalSale.toString(),\n        shiftNumber: data.shiftNumber,\n        operatorName: data.operatorName,\n        readingDate: new Date(data.readingDate).toISOString(),\n        stationId: user.stationId,\n        userId: user.id,\n      };\n\n      console.log(\"Final reading data being sent:\", readingData);\n      \n      const response = await apiRequest(\"POST\", \"/api/pump-readings\", readingData);\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ message: response.statusText }));\n        throw new Error(errorData.message || `HTTP ${response.status}: ${response.statusText}`);\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Reading recorded\",\n        description: \"Pump reading has been recorded successfully\",\n      });\n      setReadingDialogOpen(false);\n      readingForm.reset({\n        pumpId: \"\",\n        openingReading: \"\",\n        closingReading: \"\",\n        shiftNumber: \"1\",\n        operatorName: \"\",\n        readingDate: new Date().toISOString().split('T')[0],\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/pump-readings\", user?.stationId] });\n    },\n    onError: (error: any) => {\n      console.error(\"Pump reading creation error:\", error);\n      toast({\n        title: \"Error\",\n        description: error?.message || \"Failed to record reading\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onPumpSubmit = (data: any) => {\n    console.log(\"Pump form submission:\", data);\n    \n    if (editPumpId) {\n      updatePumpMutation.mutate({ id: editPumpId, data });\n    } else {\n      createPumpMutation.mutate(data);\n    }\n  };\n\n  const onReadingSubmit = (data: any) => {\n    console.log(\"Reading form submission:\", data);\n    createReadingMutation.mutate(data);\n  };\n\n  const handleEditPump = (pump: Pump) => {\n    setEditPumpId(pump.id);\n    pumpForm.reset({\n      name: pump.name,\n      pumpNumber: pump.pumpNumber,\n      productId: pump.productId,\n      isActive: pump.isActive,\n    });\n    setPumpDialogOpen(true);\n  };\n\n  const deletePumpMutation = useMutation({\n    mutationFn: async (pumpId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/pumps/${pumpId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Pump deleted\",\n        description: \"Pump has been deleted successfully\",\n      });\n      setDeleteConfirmOpen(false);\n      setPumpToDelete(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/pumps\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete pump\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeletePump = (pump: Pump) => {\n    setPumpToDelete(pump);\n    setDeleteConfirmOpen(true);\n  };\n\n  const confirmDeletePump = () => {\n    if (pumpToDelete) {\n      deletePumpMutation.mutate(pumpToDelete.id);\n    }\n  };\n\n  const todaysReadings = pumpReadings.filter(reading => \n    new Date(reading.readingDate).toDateString() === new Date().toDateString()\n  );\n\n  const totalTodaySales = todaysReadings.reduce((sum, reading) => \n    sum + parseFloat(reading.totalSale || '0'), 0\n  );\n\n  if (pumpsLoading || readingsLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/3 mb-4\"></div>\n          <div className=\"h-4 bg-muted rounded w-1/2 mb-8\"></div>\n          <div className=\"h-96 bg-muted rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6 fade-in\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <div>\n          <h3 className=\"text-2xl font-semibold text-card-foreground\">Pump Management</h3>\n          <p className=\"text-muted-foreground\">Manage fuel pumps and daily readings</p>\n        </div>\n        <div className=\"flex flex-col sm:flex-row items-stretch sm:items-center space-y-2 sm:space-y-0 sm:space-x-2 w-full sm:w-auto\">\n          <Dialog open={pumpDialogOpen} onOpenChange={(isOpen) => { \n            if (!isOpen) { \n              setEditPumpId(null); \n              pumpForm.reset(); \n            } \n            setPumpDialogOpen(isOpen); \n          }}>\n            <DialogTrigger asChild>\n              <Button className=\"w-full sm:w-auto\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Pump\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[500px]\">\n              <DialogHeader>\n                <DialogTitle>{editPumpId ? \"Edit Pump\" : \"Add New Pump\"}</DialogTitle>\n              </DialogHeader>\n              <Form {...pumpForm}>\n                <form onSubmit={pumpForm.handleSubmit(onPumpSubmit)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                    <FormField\n                      control={pumpForm.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Pump Name *</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Pump A\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={pumpForm.control}\n                      name=\"pumpNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Pump Number *</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"001\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <FormField\n                    control={pumpForm.control}\n                    name=\"productId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Product *</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select product\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {products.map((product) => (\n                              <SelectItem key={product.id} value={product.id}>\n                                {product.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <div className=\"flex flex-col sm:flex-row justify-end space-y-2 sm:space-y-0 sm:space-x-2 pt-4\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setPumpDialogOpen(false)} className=\"w-full sm:w-auto\">\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\" disabled={createPumpMutation.isPending || updatePumpMutation.isPending} className=\"w-full sm:w-auto\">\n                      {createPumpMutation.isPending || updatePumpMutation.isPending \n                        ? (editPumpId ? \"Updating...\" : \"Adding...\") \n                        : (editPumpId ? \"Update Pump\" : \"Add Pump\")}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n\n          <Dialog open={readingDialogOpen} onOpenChange={setReadingDialogOpen}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\" className=\"w-full sm:w-auto\">\n                <Fuel className=\"w-4 h-4 mr-2\" />\n                Add Reading\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[600px]\">\n              <DialogHeader>\n                <DialogTitle>Record Pump Reading</DialogTitle>\n              </DialogHeader>\n              <Form {...readingForm}>\n                <form onSubmit={readingForm.handleSubmit(onReadingSubmit)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                    <FormField\n                      control={readingForm.control}\n                      name=\"pumpId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Pump *</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select pump\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {pumps.map((pump) => (\n                                <SelectItem key={pump.id} value={pump.id}>\n                                  {pump.name} - {pump.pumpNumber}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={readingForm.control}\n                      name=\"shiftNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Shift Number *</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select shift\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"1\">Shift 1</SelectItem>\n                              <SelectItem value=\"2\">Shift 2</SelectItem>\n                              <SelectItem value=\"3\">Shift 3</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                    <FormField\n                      control={readingForm.control}\n                      name=\"openingReading\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Opening Reading *</FormLabel>\n                          <FormControl>\n                            <Input type=\"number\" step=\"0.001\" placeholder=\"0.000\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={readingForm.control}\n                      name=\"closingReading\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Closing Reading *</FormLabel>\n                          <FormControl>\n                            <Input type=\"number\" step=\"0.001\" placeholder=\"0.000\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                    <FormField\n                      control={readingForm.control}\n                      name=\"operatorName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Operator Name *</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Operator name\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={readingForm.control}\n                      name=\"readingDate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Date *</FormLabel>\n                          <FormControl>\n                            <Input type=\"date\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <div className=\"flex flex-col sm:flex-row justify-end space-y-2 sm:space-y-0 sm:space-x-2 pt-4\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setReadingDialogOpen(false)} className=\"w-full sm:w-auto\">\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\" disabled={createReadingMutation.isPending} className=\"w-full sm:w-auto\">\n                      {createReadingMutation.isPending ? \"Recording...\" : \"Record Reading\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-xl md:text-2xl font-bold text-primary\">{pumps.length}</div>\n            <div className=\"text-sm text-muted-foreground\">Total Pumps</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-xl md:text-2xl font-bold text-green-600\">{pumps.filter(p => p.isActive).length}</div>\n            <div className=\"text-sm text-muted-foreground\">Active Pumps</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-xl md:text-2xl font-bold text-blue-600\">{todaysReadings.length}</div>\n            <div className=\"text-sm text-muted-foreground\">Today's Readings</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-xl md:text-2xl font-bold text-purple-600\">{totalTodaySales.toFixed(1)}L</div>\n            <div className=\"text-sm text-muted-foreground\">Today's Sales</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Pumps List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Pump Configuration</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-muted\">\n                <tr>\n                  <th className=\"text-left p-3 font-medium\">Pump Name</th>\n                  <th className=\"text-left p-3 font-medium\">Number</th>\n                  <th className=\"text-left p-3 font-medium\">Product</th>\n                  <th className=\"text-center p-3 font-medium\">Status</th>\n                  <th className=\"text-center p-3 font-medium\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {pumps.map((pump, index) => (\n                  <tr key={pump.id} className=\"border-b border-border hover:bg-muted/50\">\n                    <td className=\"p-3 font-medium\">{pump.name}</td>\n                    <td className=\"p-3\">{pump.pumpNumber}</td>\n                    <td className=\"p-3\">{pump.product?.name || 'Unknown'}</td>\n                    <td className=\"p-3 text-center\">\n                      <Badge variant={pump.isActive ? 'default' : 'secondary'}>\n                        {pump.isActive ? 'Active' : 'Inactive'}\n                      </Badge>\n                    </td>\n                    <td className=\"p-3 text-center\">\n                      <div className=\"flex items-center justify-center space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleEditPump(pump)}\n                          className=\"p-2 text-green-600 hover:text-green-800\"\n                          title=\"Edit Pump\"\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleDeletePump(pump)}\n                          className=\"p-2 text-red-600 hover:text-red-800\"\n                          title=\"Delete Pump\"\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Recent Readings */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Pump Readings</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-muted\">\n                <tr>\n                  <th className=\"text-left p-3 font-medium\">Date</th>\n                  <th className=\"text-left p-3 font-medium\">Pump</th>\n                  <th className=\"text-left p-3 font-medium\">Shift</th>\n                  <th className=\"text-left p-3 font-medium\">Operator</th>\n                  <th className=\"text-right p-3 font-medium\">Opening</th>\n                  <th className=\"text-right p-3 font-medium\">Closing</th>\n                  <th className=\"text-right p-3 font-medium\">Sale (L)</th>\n                </tr>\n              </thead>\n              <tbody>\n                {pumpReadings.slice(0, 10).map((reading, index) => (\n                  <tr key={reading.id} className=\"border-b border-border hover:bg-muted/50\">\n                    <td className=\"p-3 text-sm\">\n                      {new Date(reading.readingDate).toLocaleDateString()}\n                    </td>\n                    <td className=\"p-3\">\n                      {reading.pump?.name} - {reading.pump?.pumpNumber}\n                    </td>\n                    <td className=\"p-3\">{reading.shiftNumber}</td>\n                    <td className=\"p-3\">{reading.operatorName}</td>\n                    <td className=\"p-3 text-right\">{parseFloat(reading.openingReading).toFixed(3)}</td>\n                    <td className=\"p-3 text-right\">{parseFloat(reading.closingReading).toFixed(3)}</td>\n                    <td className=\"p-3 text-right font-medium text-green-600\">\n                      {parseFloat(reading.totalSale).toFixed(3)}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Delete Confirmation Dialog */}\n      <DeleteConfirmation\n        isOpen={deleteConfirmOpen}\n        onClose={() => setDeleteConfirmOpen(false)}\n        onConfirm={confirmDeletePump}\n        title=\"Delete Pump\"\n        description=\"Are you sure you want to delete this pump? This action cannot be undone and will remove all pump data and readings.\"\n        itemName={pumpToDelete?.name || \"pump\"}\n        isLoading={deletePumpMutation.isPending}\n      />\n    </div>\n  );\n}\n","size_bytes":27167},"client/src/pages/PurchaseInvoice.tsx":{"content":"\nimport { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useStation } from \"@/contexts/StationContext\";\nimport { formatAmount } from \"@/lib/currency\";\nimport { Printer, Download, ArrowLeft, ChevronDown } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport type { PurchaseOrder, Supplier, Station, User } from \"@shared/schema\";\n\ninterface PurchaseOrderWithDetails extends PurchaseOrder {\n  supplier: Supplier;\n  user: User;\n  station: Station;\n}\n\nexport default function PurchaseInvoice() {\n  const { id } = useParams<{ id: string }>();\n  const { user } = useAuth();\n  const { stationSettings, isLoading: stationLoading } = useStation();\n\n  const { data: order, isLoading } = useQuery<PurchaseOrderWithDetails>({\n    queryKey: [\"/api/purchase-orders/detail\", id!],\n    enabled: !!id && !!user?.stationId,\n  });\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  const handleDownloadPDF = () => {\n    const printContent = document.getElementById('purchase-invoice-print');\n    if (!printContent) return;\n\n    const printWindow = window.open('', '_blank');\n    if (!printWindow) return;\n\n    const htmlContent = `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Purchase Order ${order?.orderNumber || 'Unknown'}</title>\n          <style>\n            @page { margin: 0.5in; size: A4; }\n            body { font-family: Arial, sans-serif; line-height: 1.4; color: #000; margin: 0; padding: 20px; }\n            .container { max-width: 800px; margin: 0 auto; }\n            .header { display: flex; justify-content: space-between; align-items: start; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 20px; }\n            .station-info h1 { color: #2563eb; font-size: 28px; margin: 0; }\n            .station-info p { margin: 5px 0; color: #666; }\n            .order-title { font-size: 24px; font-weight: bold; text-align: right; }\n            .order-meta { text-align: right; margin-top: 10px; }\n            .order-meta p { margin: 5px 0; }\n            .section { margin-bottom: 30px; }\n            .section h3 { background: #f3f4f6; padding: 10px; margin: 0 0 15px 0; font-size: 16px; }\n            .details-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; }\n            .detail-item { margin-bottom: 10px; }\n            .detail-label { font-weight: bold; color: #374151; }\n            .detail-value { color: #6b7280; }\n            .totals { background: #f9fafb; padding: 20px; border-radius: 8px; margin-top: 20px; }\n            .total-row { display: flex; justify-content: space-between; margin-bottom: 10px; }\n            .total-row.final { border-top: 2px solid #333; padding-top: 10px; margin-top: 15px; font-weight: bold; font-size: 18px; }\n            .footer { text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #e5e7eb; color: #6b7280; font-size: 12px; }\n            .status-badge { background: #10b981; color: white; padding: 5px 15px; border-radius: 20px; font-size: 12px; }\n          </style>\n        </head>\n        <body>\n          <div class=\"container\">\n            <div class=\"header\">\n              <div class=\"station-info\">\n                <h1>${order?.station?.name || \"FuelFlow Station\"}</h1>\n                <p>Purchase Order Invoice</p>\n                <p>Generated on ${new Date().toLocaleDateString()}</p>\n              </div>\n              <div>\n                <div class=\"order-title\">PURCHASE ORDER</div>\n                <div class=\"order-meta\">\n                  <p><strong>PO #:</strong> ${order?.orderNumber}</p>\n                  <p><strong>Date:</strong> ${new Date(order?.orderDate || new Date()).toLocaleDateString()}</p>\n                  ${order?.expectedDeliveryDate ? `<p><strong>Expected Delivery:</strong> ${new Date(order.expectedDeliveryDate).toLocaleDateString()}</p>` : ''}\n                  <div class=\"status-badge\">${order?.status?.toUpperCase()}</div>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"section\">\n              <h3>Supplier Information</h3>\n              <div class=\"details-grid\">\n                <div>\n                  <div class=\"detail-item\">\n                    <div class=\"detail-label\">Company Name:</div>\n                    <div class=\"detail-value\">${order?.supplier?.name || 'N/A'}</div>\n                  </div>\n                  ${order?.supplier?.contactPerson ? `\n                  <div class=\"detail-item\">\n                    <div class=\"detail-label\">Contact Person:</div>\n                    <div class=\"detail-value\">${order.supplier.contactPerson}</div>\n                  </div>` : ''}\n                </div>\n                <div>\n                  ${order?.supplier?.contactPhone ? `\n                  <div class=\"detail-item\">\n                    <div class=\"detail-label\">Phone:</div>\n                    <div class=\"detail-value\">${order.supplier.contactPhone}</div>\n                  </div>` : ''}\n                  ${order?.supplier?.contactEmail ? `\n                  <div class=\"detail-item\">\n                    <div class=\"detail-label\">Email:</div>\n                    <div class=\"detail-value\">${order.supplier.contactEmail}</div>\n                  </div>` : ''}\n                </div>\n              </div>\n            </div>\n\n            ${order?.notes ? `\n            <div class=\"section\">\n              <h3>Order Notes</h3>\n              <p>${order.notes}</p>\n            </div>` : ''}\n\n            <div class=\"totals\">\n              <div class=\"total-row\">\n                <span>Subtotal:</span>\n                <span>${formatAmount(parseFloat(order?.subtotal || '0'), order?.currencyCode || 'PKR')}</span>\n              </div>\n              ${parseFloat(order?.taxAmount || '0') > 0 ? `\n              <div class=\"total-row\">\n                <span>Tax:</span>\n                <span>${formatAmount(parseFloat(order?.taxAmount || '0'), order?.currencyCode || 'PKR')}</span>\n              </div>` : ''}\n              <div class=\"total-row final\">\n                <span>Total Amount:</span>\n                <span>${formatAmount(parseFloat(order?.totalAmount || '0'), order?.currencyCode || 'PKR')}</span>\n              </div>\n            </div>\n\n            <div class=\"footer\">\n              <p>This is a computer-generated purchase order from FuelFlow Management System</p>\n              <p>Generated on ${new Date().toLocaleString()}</p>\n            </div>\n          </div>\n        </body>\n      </html>\n    `;\n\n    printWindow.document.write(htmlContent);\n    printWindow.document.close();\n    \n    printWindow.onload = () => {\n      setTimeout(() => {\n        printWindow.print();\n        printWindow.close();\n      }, 500);\n    };\n  };\n\n  if (isLoading || stationLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-64 mb-4\"></div>\n          <div className=\"h-4 bg-muted rounded w-48 mb-8\"></div>\n          <div className=\"h-96 bg-muted rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!order) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"text-center p-6\">\n            <h2 className=\"text-2xl font-bold mb-2\">Purchase Order Not Found</h2>\n            <p className=\"text-muted-foreground mb-4\">\n              The requested purchase order could not be found.\n            </p>\n            <Link href=\"/purchase-orders\">\n              <Button>\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Purchase Orders\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Print/Download Actions - Hidden when printing */}\n      <div className=\"print:hidden sticky top-0 bg-background/80 backdrop-blur-sm border-b z-10\">\n        <div className=\"container mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <Link href=\"/purchase-orders\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back\n                </Button>\n              </Link>\n              <h1 className=\"text-2xl font-bold\">Purchase Order #{order.orderNumber}</h1>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Button onClick={handlePrint} size=\"sm\">\n                <Printer className=\"w-4 h-4 mr-2\" />\n                Print\n              </Button>\n              <Button onClick={handleDownloadPDF} variant=\"outline\" size=\"sm\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Download PDF\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Invoice Content */}\n      <div className=\"container mx-auto px-6 py-8 max-w-4xl\">\n        <Card className=\"print:shadow-none print:border-none\">\n          <CardContent className=\"p-8\" id=\"purchase-invoice-print\">\n            {/* Header */}\n            <div className=\"flex justify-between items-start mb-8\">\n              <div>\n                <h1 className=\"text-4xl font-bold text-primary mb-2\">\n                  {stationSettings?.stationName || 'FuelFlow Station'}\n                </h1>\n                <div className=\"text-muted-foreground space-y-1\">\n                  <p>Purchase Order Invoice</p>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <h2 className=\"text-3xl font-bold mb-2\">PURCHASE ORDER</h2>\n                <div className=\"space-y-1 text-sm\">\n                  <p><span className=\"font-semibold\">PO #:</span> {order.orderNumber}</p>\n                  <p><span className=\"font-semibold\">Date:</span> {new Date(order.orderDate || new Date()).toLocaleDateString()}</p>\n                  {order.expectedDeliveryDate && (\n                    <p><span className=\"font-semibold\">Expected Delivery:</span> {new Date(order.expectedDeliveryDate).toLocaleDateString()}</p>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Status Badge */}\n            <div className=\"flex gap-2 mb-6\">\n              <Badge variant=\"outline\">\n                {order.status?.toUpperCase()}\n              </Badge>\n            </div>\n\n            {/* Supplier Info */}\n            <div className=\"grid md:grid-cols-2 gap-8 mb-8\">\n              <div>\n                <h3 className=\"font-semibold text-lg mb-3\">Supplier:</h3>\n                <div className=\"space-y-1\">\n                  <p className=\"font-semibold\">{order.supplier?.name}</p>\n                  {order.supplier?.contactPerson && (\n                    <p>Contact: {order.supplier.contactPerson}</p>\n                  )}\n                  {order.supplier?.contactPhone && (\n                    <p>Phone: {order.supplier.contactPhone}</p>\n                  )}\n                  {order.supplier?.contactEmail && (\n                    <p>Email: {order.supplier.contactEmail}</p>\n                  )}\n                </div>\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-lg mb-3\">Order Details:</h3>\n                <div className=\"space-y-1 text-sm\">\n                  {order.notes && (\n                    <p><span className=\"font-semibold\">Notes:</span> {order.notes}</p>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Totals */}\n            <div className=\"flex justify-end mb-8\">\n              <div className=\"w-full max-w-sm space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span>Subtotal:</span>\n                  <span>{formatAmount(parseFloat(order.subtotal || '0'), order.currencyCode || 'PKR')}</span>\n                </div>\n                {parseFloat(order.taxAmount || '0') > 0 && (\n                  <div className=\"flex justify-between\">\n                    <span>Tax:</span>\n                    <span>{formatAmount(parseFloat(order.taxAmount || '0'), order.currencyCode || 'PKR')}</span>\n                  </div>\n                )}\n                <div className=\"flex justify-between text-lg font-semibold border-t pt-2\">\n                  <span>Total Amount:</span>\n                  <span>{formatAmount(parseFloat(order.totalAmount || '0'), order.currencyCode || 'PKR')}</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Footer */}\n            <div className=\"border-t pt-4 text-center text-sm text-muted-foreground\">\n              <p>Purchase Order generated on {new Date().toLocaleDateString()}</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13286},"client/src/components/auth/SignupForm.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Fuel, ArrowLeft } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\n\ninterface SignupFormProps {\n  onBack: () => void;\n}\n\nexport default function SignupForm({ onBack }: SignupFormProps) {\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    fullName: \"\",\n    role: \"cashier\" as const,\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [showApprovalMessage, setShowApprovalMessage] = useState(false);\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (formData.password !== formData.confirmPassword) {\n      toast({\n        title: \"Password mismatch\",\n        description: \"Passwords do not match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const response = await apiRequest(\"POST\", \"/api/auth/signup\", {\n        username: formData.username,\n        password: formData.password,\n        fullName: formData.fullName,\n        role: formData.role,\n        isActive: false, // New users start inactive and need approval\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        \n        // Check if it's an admin account (automatically active)\n        if (formData.role === 'admin') {\n          toast({\n            title: \"Admin account created\",\n            description: \"Your admin account has been created successfully. You can now login.\",\n          });\n          onBack(); // Go back to login form\n        } else {\n          setShowApprovalMessage(true);\n          toast({\n            title: \"Account created\",\n            description: \"Your account has been created successfully. Please wait for admin approval.\",\n          });\n          // Instead of navigating to login, redirect to approval pending page\n          navigate(\"/approval-pending\");\n        } \n      } else {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to create account\");\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Signup failed\",\n        description: error.message || \"Failed to create account\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (showApprovalMessage) {\n    return (\n      <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n        <Card className=\"w-full max-w-sm border shadow-xl\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center mb-6\">\n              <div className=\"w-16 h-16 bg-orange-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Fuel className=\"w-8 h-8 text-white\" />\n              </div>\n              <h2 className=\"text-2xl font-bold text-card-foreground\">Account Created!</h2>\n              <p className=\"text-muted-foreground\">Awaiting Admin Approval</p>\n            </div>\n\n            <div className=\"text-center space-y-4\">\n              <div className=\"p-4 bg-orange-50 dark:bg-orange-900/20 rounded-lg border border-orange-200 dark:border-orange-800\">\n                <p className=\"text-sm text-orange-800 dark:text-orange-200\">\n                  Your account has been created successfully. Please wait for an administrator to approve your account before you can log in.\n                </p>\n              </div>\n\n              <div className=\"flex items-center justify-center space-x-2 text-sm text-muted-foreground\">\n                <div className=\"w-2 h-2 bg-orange-500 rounded-full animate-pulse\"></div>\n                <span>Waiting for approval...</span>\n              </div>\n            </div>\n\n            <div className=\"mt-6\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                className=\"w-full\"\n                onClick={onBack}\n              >\n                <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                Back to Login\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n      <Card className=\"w-full max-w-sm border shadow-xl\">\n        <CardContent className=\"pt-6\">\n          <div className=\"text-center mb-6\">\n            <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Fuel className=\"w-8 h-8 text-primary-foreground\" />\n            </div>\n            <h2 className=\"text-2xl font-bold text-card-foreground\">Create Account</h2>\n            <p className=\"text-muted-foreground\">Join FuelFlow System</p>\n          </div>\n\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"fullName\" className=\"block text-sm font-medium text-card-foreground mb-2\">\n                Full Name\n              </Label>\n              <Input\n                id=\"fullName\"\n                type=\"text\"\n                value={formData.fullName}\n                onChange={(e) => setFormData(prev => ({ ...prev, fullName: e.target.value }))}\n                placeholder=\"Enter your full name\"\n                className=\"w-full\"\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"username\" className=\"block text-sm font-medium text-card-foreground mb-2\">\n                Username\n              </Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                value={formData.username}\n                onChange={(e) => setFormData(prev => ({ ...prev, username: e.target.value }))}\n                placeholder=\"Choose a username\"\n                className=\"w-full\"\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"role\" className=\"block text-sm font-medium text-card-foreground mb-2\">\n                Role\n              </Label>\n              <Select value={formData.role} onValueChange={(value: \"cashier\" | \"manager\") => setFormData(prev => ({ ...prev, role: value }))}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"cashier\">Cashier</SelectItem>\n                  <SelectItem value=\"manager\">Manager</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"password\" className=\"block text-sm font-medium text-card-foreground mb-2\">\n                Password\n              </Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={formData.password}\n                onChange={(e) => setFormData(prev => ({ ...prev, password: e.target.value }))}\n                placeholder=\"Create a password\"\n                className=\"w-full\"\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-card-foreground mb-2\">\n                Confirm Password\n              </Label>\n              <Input\n                id=\"confirmPassword\"\n                type=\"password\"\n                value={formData.confirmPassword}\n                onChange={(e) => setFormData(prev => ({ ...prev, confirmPassword: e.target.value }))}\n                placeholder=\"Confirm your password\"\n                className=\"w-full\"\n                required\n              />\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isLoading}\n            >\n              {isLoading ? \"Creating Account...\" : \"Create Account\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              className=\"w-full\"\n              onClick={onBack}\n            >\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back to Login\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8718},"client/src/components/ui/delete-confirmation.tsx":{"content":"\nimport React from \"react\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\ninterface DeleteConfirmationProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onConfirm: () => void;\n  title?: string;\n  description?: string;\n  itemName?: string;\n  isLoading?: boolean;\n}\n\nexport function DeleteConfirmation({\n  isOpen,\n  onClose,\n  onConfirm,\n  title = \"Are you absolutely sure?\",\n  description,\n  itemName = \"this item\",\n  isLoading = false,\n}: DeleteConfirmationProps) {\n  const defaultDescription = `This action cannot be undone. This will permanently delete ${itemName} and remove all associated data from our servers.`;\n\n  return (\n    <AlertDialog open={isOpen} onOpenChange={onClose}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>{title}</AlertDialogTitle>\n          <AlertDialogDescription>\n            {description || defaultDescription}\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel onClick={onClose} disabled={isLoading}>\n            Cancel\n          </AlertDialogCancel>\n          <AlertDialogAction\n            onClick={onConfirm}\n            disabled={isLoading}\n            className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n          >\n            {isLoading ? \"Deleting...\" : \"Delete\"}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n\n","size_bytes":1624},"client/src/lib/printUtils.ts":{"content":"\nexport interface PrintTemplate {\n  title: string;\n  content: string;\n  filename: string;\n}\n\nexport const generatePrintTemplate = (data: any, type: 'invoice' | 'receipt' | 'statement' | 'expense' | 'purchaseOrder' | 'pumpReading'): PrintTemplate => {\n  const today = new Date().toLocaleDateString();\n  \n  switch (type) {\n    case 'invoice':\n      return {\n        title: `Sales Invoice ${data.invoiceNumber || data.orderNumber}`,\n        filename: `invoice-${data.invoiceNumber || data.orderNumber}`,\n        content: `\n          <!DOCTYPE html>\n          <html>\n            <head>\n              <title>Sales Invoice ${data.invoiceNumber || data.orderNumber}</title>\n              <style>\n                @page { margin: 0.5in; size: A4; }\n                body { font-family: Arial, sans-serif; line-height: 1.4; color: #000; margin: 0; padding: 20px; }\n                .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 20px; }\n                .header h1 { color: #2563eb; font-size: 28px; margin: 0; }\n                .invoice-meta { text-align: right; margin-top: 10px; }\n                .section { margin-bottom: 30px; }\n                .items-table { width: 100%; border-collapse: collapse; margin: 20px 0; }\n                .items-table th, .items-table td { padding: 12px; text-align: left; border-bottom: 1px solid #e5e7eb; }\n                .items-table th { background: #f9fafb; font-weight: bold; }\n                .totals { background: #f9fafb; padding: 20px; border-radius: 8px; margin-top: 20px; }\n                .total-row { display: flex; justify-content: space-between; margin-bottom: 10px; }\n                .footer { text-align: center; margin-top: 40px; color: #666; font-size: 12px; }\n              </style>\n            </head>\n            <body>\n              <div class=\"header\">\n                <h1>${data.stationName || 'FuelFlow Station'}</h1>\n                <h2>${data.invoiceNumber ? 'Sales Invoice' : 'Purchase Order'}</h2>\n                <div class=\"invoice-meta\">\n                  <p><strong>${data.invoiceNumber ? 'Invoice' : 'Order'} #:</strong> ${data.invoiceNumber || data.orderNumber}</p>\n                  <p><strong>Date:</strong> ${new Date(data.createdAt || data.orderDate || Date.now()).toLocaleDateString()}</p>\n                  <p><strong>${data.customer ? 'Customer' : 'Supplier'}:</strong> ${data.customer?.name || data.supplier?.name || 'Walk-in Customer'}</p>\n                </div>\n              </div>\n\n              <div class=\"section\">\n                <table class=\"items-table\">\n                  <thead>\n                    <tr>\n                      <th>Product</th>\n                      <th>Quantity</th>\n                      <th>Unit Price</th>\n                      <th>Total</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    ${data.items?.map(item => `\n                      <tr>\n                        <td>${item.product?.name || 'Product'}</td>\n                        <td>${parseFloat(item.quantity || '0').toFixed(3)} ${item.product?.unit || 'L'}</td>\n                        <td>${item.unitPrice || '0.00'}</td>\n                        <td>${item.totalPrice || '0.00'}</td>\n                      </tr>\n                    `).join('') || '<tr><td colspan=\"4\" style=\"text-align: center;\">No items</td></tr>'}\n                  </tbody>\n                </table>\n              </div>\n\n              <div class=\"totals\">\n                <div class=\"total-row\">\n                  <span>Subtotal:</span>\n                  <span>${data.subtotal || '0.00'}</span>\n                </div>\n                <div class=\"total-row\">\n                  <span>Tax:</span>\n                  <span>${data.taxAmount || '0.00'}</span>\n                </div>\n                <div class=\"total-row\">\n                  <span><strong>Total Amount:</strong></span>\n                  <span><strong>${data.totalAmount || '0.00'}</strong></span>\n                </div>\n                ${parseFloat(data.outstandingAmount || '0') > 0 ? `\n                <div class=\"total-row\" style=\"color: #dc2626;\">\n                  <span>Outstanding Amount:</span>\n                  <span>${data.outstandingAmount}</span>\n                </div>` : ''}\n              </div>\n\n              <div class=\"footer\">\n                <p>Thank you for your business!</p>\n                <p>Generated on ${today}</p>\n              </div>\n            </body>\n          </html>\n        `\n      };\n\n    case 'expense':\n      return {\n        title: `Expense Receipt ${data.receiptNumber || data.id}`,\n        filename: `expense-${data.receiptNumber || data.id}`,\n        content: `\n          <!DOCTYPE html>\n          <html>\n            <head>\n              <title>Expense Receipt ${data.receiptNumber || data.id}</title>\n              <style>\n                @page { margin: 0.5in; size: A4; }\n                body { font-family: Arial, sans-serif; line-height: 1.4; color: #000; margin: 0; padding: 20px; }\n                .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 20px; }\n                .header h1 { color: #2563eb; margin: 0; }\n                .expense-details { background: #f9fafb; padding: 15px; border-radius: 8px; margin-bottom: 20px; }\n                .footer { text-align: center; margin-top: 30px; padding-top: 15px; border-top: 1px solid #e5e7eb; font-size: 12px; color: #666; }\n              </style>\n            </head>\n            <body>\n              <div class=\"header\">\n                <h1>${data.stationName || 'FuelFlow Station'}</h1>\n                <h2>Expense Receipt</h2>\n                <p>Receipt #: ${data.receiptNumber || data.id}</p>\n              </div>\n\n              <div class=\"expense-details\">\n                <h3>Expense Details</h3>\n                <p><strong>Description:</strong> ${data.description || 'N/A'}</p>\n                <p><strong>Amount:</strong> ${data.amount || '0.00'}</p>\n                <p><strong>Category:</strong> ${data.category || 'N/A'}</p>\n                <p><strong>Payment Method:</strong> ${data.paymentMethod || 'N/A'}</p>\n                <p><strong>Date:</strong> ${new Date(data.expenseDate || Date.now()).toLocaleDateString()}</p>\n                ${data.notes ? `<p><strong>Notes:</strong> ${data.notes}</p>` : ''}\n              </div>\n\n              <div class=\"footer\">\n                <p>This is a computer-generated receipt from FuelFlow Management System</p>\n                <p>Generated on ${today}</p>\n              </div>\n            </body>\n          </html>\n        `\n      };\n\n    case 'statement':\n      return {\n        title: `Payment Statement - ${data.entityName}`,\n        filename: `statement-${data.entityName?.replace(/[^a-zA-Z0-9]/g, '_')}`,\n        content: `\n          <!DOCTYPE html>\n          <html>\n            <head>\n              <title>${data.entityType} Statement - ${data.entityName}</title>\n              <style>\n                @page { margin: 0.5in; size: A4; }\n                body { font-family: Arial, sans-serif; line-height: 1.4; color: #000; margin: 0; padding: 20px; }\n                .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 20px; }\n                .header h1 { color: #2563eb; margin: 0; }\n                .entity-info { background: #f9fafb; padding: 15px; border-radius: 8px; margin-bottom: 20px; }\n                .payments-table { width: 100%; border-collapse: collapse; margin: 20px 0; }\n                .payments-table th, .payments-table td { padding: 12px 8px; text-align: left; border-bottom: 1px solid #e5e7eb; }\n                .payments-table th { background: #f3f4f6; font-weight: bold; }\n                .payments-table .text-right { text-align: right; }\n                .summary { background: #f9fafb; padding: 15px; border-radius: 8px; margin-top: 20px; }\n                .footer { text-align: center; margin-top: 30px; padding-top: 15px; border-top: 1px solid #e5e7eb; font-size: 12px; color: #666; }\n              </style>\n            </head>\n            <body>\n              <div class=\"header\">\n                <h1>${data.stationName || 'FuelFlow Station'}</h1>\n                <h2>${data.entityType} Payment Statement</h2>\n                <p>Generated on ${data.generatedDate || today}</p>\n              </div>\n\n              <div class=\"entity-info\">\n                <h3>${data.entityType} Information</h3>\n                <p><strong>Name:</strong> ${data.entityName}</p>\n                ${data.entity?.contactPhone ? `<p><strong>Phone:</strong> ${data.entity.contactPhone}</p>` : ''}\n                ${data.entity?.contactEmail ? `<p><strong>Email:</strong> ${data.entity.contactEmail}</p>` : ''}\n                ${data.entity?.gstNumber ? `<p><strong>GST Number:</strong> ${data.entity.gstNumber}</p>` : ''}\n                ${data.entity?.address ? `<p><strong>Address:</strong> ${data.entity.address}</p>` : ''}\n              </div>\n\n              <h3>Payment History</h3>\n              <table class=\"payments-table\">\n                <thead>\n                  <tr>\n                    <th>Date</th>\n                    <th class=\"text-right\">Amount</th>\n                    <th>Method</th>\n                    <th>Reference</th>\n                    <th>Notes</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  ${data.payments && data.payments.length > 0 ? data.payments.map(payment => `\n                    <tr>\n                      <td>${new Date(payment.paymentDate || payment.createdAt).toLocaleDateString()}</td>\n                      <td class=\"text-right\">${payment.amount || '0.00'}</td>\n                      <td>${payment.paymentMethod || 'N/A'}</td>\n                      <td>${payment.referenceNumber || 'N/A'}</td>\n                      <td>${payment.notes || ''}</td>\n                    </tr>\n                  `).join('') : '<tr><td colspan=\"5\" style=\"text-align: center; color: #666;\">No payment history found</td></tr>'}\n                </tbody>\n              </table>\n\n              <div class=\"summary\">\n                <h4>Summary</h4>\n                <p><strong>Total Payments:</strong> ${data.totalPayments || '0.00'}</p>\n                <p><strong>Outstanding Amount:</strong> ${data.outstandingAmount || '0.00'}</p>\n              </div>\n\n              <div class=\"footer\">\n                <p>This is a computer-generated statement from FuelFlow Management System</p>\n                <p>For any queries regarding this statement, please contact our accounts department</p>\n              </div>\n            </body>\n          </html>\n        `\n      };\n\n    case 'purchaseOrder':\n      return {\n        title: `Purchase Order ${data.orderNumber}`,\n        filename: `purchase-order-${data.orderNumber}`,\n        content: `\n          <!DOCTYPE html>\n          <html>\n            <head>\n              <title>Purchase Order ${data.orderNumber}</title>\n              <style>\n                @page { margin: 0.5in; size: A4; }\n                body { font-family: Arial, sans-serif; line-height: 1.4; color: #000; margin: 0; padding: 20px; }\n                .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 20px; }\n                .header h1 { color: #2563eb; font-size: 28px; margin: 0; }\n                .order-meta { text-align: right; margin-top: 10px; }\n                .section { margin-bottom: 30px; }\n                .items-table { width: 100%; border-collapse: collapse; margin: 20px 0; }\n                .items-table th, .items-table td { padding: 12px; text-align: left; border-bottom: 1px solid #e5e7eb; }\n                .items-table th { background: #f9fafb; font-weight: bold; }\n                .totals { background: #f9fafb; padding: 20px; border-radius: 8px; margin-top: 20px; }\n                .total-row { display: flex; justify-content: space-between; margin-bottom: 10px; }\n                .footer { text-align: center; margin-top: 40px; color: #666; font-size: 12px; }\n                .status-badge { background: #10b981; color: white; padding: 5px 15px; border-radius: 20px; font-size: 12px; }\n              </style>\n            </head>\n            <body>\n              <div class=\"header\">\n                <h1>${data.station?.name || data.stationName || 'FuelFlow Station'}</h1>\n                <h2>Purchase Order</h2>\n                <div class=\"order-meta\">\n                  <p><strong>Order #:</strong> ${data.orderNumber}</p>\n                  <p><strong>Date:</strong> ${new Date(data.orderDate || data.createdAt || Date.now()).toLocaleDateString()}</p>\n                  <p><strong>Supplier:</strong> ${data.supplier?.name || 'Unknown Supplier'}</p>\n                  <p><strong>Status:</strong> <span class=\"status-badge\">${data.status || 'Pending'}</span></p>\n                </div>\n              </div>\n\n              <div class=\"section\">\n                <h3>Supplier Details</h3>\n                <p><strong>Name:</strong> ${data.supplier?.name || 'N/A'}</p>\n                ${data.supplier?.contactPerson ? `<p><strong>Contact Person:</strong> ${data.supplier.contactPerson}</p>` : ''}\n                ${data.supplier?.contactPhone ? `<p><strong>Phone:</strong> ${data.supplier.contactPhone}</p>` : ''}\n                ${data.supplier?.contactEmail ? `<p><strong>Email:</strong> ${data.supplier.contactEmail}</p>` : ''}\n                ${data.supplier?.address ? `<p><strong>Address:</strong> ${data.supplier.address}</p>` : ''}\n              </div>\n\n              <div class=\"section\">\n                <table class=\"items-table\">\n                  <thead>\n                    <tr>\n                      <th>Product</th>\n                      <th>Quantity</th>\n                      <th>Unit Price</th>\n                      <th>Total</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    ${data.items?.map(item => `\n                      <tr>\n                        <td>${item.product?.name || 'Product'}</td>\n                        <td>${parseFloat(item.quantity || '0').toFixed(3)} ${item.product?.unit || 'L'}</td>\n                        <td>${item.unitPrice || '0.00'}</td>\n                        <td>${item.totalPrice || '0.00'}</td>\n                      </tr>\n                    `).join('') || '<tr><td colspan=\"4\" style=\"text-align: center;\">No items</td></tr>'}\n                  </tbody>\n                </table>\n              </div>\n\n              <div class=\"totals\">\n                <div class=\"total-row\">\n                  <span>Subtotal:</span>\n                  <span>${data.subtotal || '0.00'}</span>\n                </div>\n                <div class=\"total-row\">\n                  <span>Tax:</span>\n                  <span>${data.taxAmount || '0.00'}</span>\n                </div>\n                <div class=\"total-row\">\n                  <span><strong>Total Amount:</strong></span>\n                  <span><strong>${data.totalAmount || '0.00'}</strong></span>\n                </div>\n              </div>\n\n              ${data.notes ? `\n              <div class=\"section\">\n                <h3>Notes</h3>\n                <p>${data.notes}</p>\n              </div>` : ''}\n\n              <div class=\"footer\">\n                <p>Purchase Order generated from FuelFlow Management System</p>\n                <p>Generated on ${today}</p>\n              </div>\n            </body>\n          </html>\n        `\n      };\n\n    case 'pumpReading':\n      return {\n        title: `Pump Reading - ${data.pump?.name || 'Pump'} - ${data.shiftNumber}`,\n        filename: `pump-reading-${data.pump?.pumpNumber || data.id}`,\n        content: `\n          <!DOCTYPE html>\n          <html>\n            <head>\n              <title>Pump Reading - ${data.pump?.name || 'Pump'}</title>\n              <style>\n                @page { margin: 0.5in; size: A4; }\n                body { font-family: Arial, sans-serif; line-height: 1.4; color: #000; margin: 0; padding: 20px; }\n                .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 20px; }\n                .header h1 { color: #2563eb; font-size: 28px; margin: 0; }\n                .reading-meta { text-align: right; margin-top: 10px; }\n                .section { margin-bottom: 30px; }\n                .details-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0; }\n                .detail-item { margin-bottom: 15px; padding: 10px; background: #f9fafb; border-radius: 5px; }\n                .detail-label { font-weight: bold; color: #374151; }\n                .detail-value { color: #6b7280; margin-top: 5px; }\n                .readings-table { width: 100%; border-collapse: collapse; margin: 20px 0; }\n                .readings-table th, .readings-table td { padding: 12px; text-align: left; border-bottom: 1px solid #e5e7eb; }\n                .readings-table th { background: #f9fafb; font-weight: bold; }\n                .footer { text-align: center; margin-top: 40px; color: #666; font-size: 12px; }\n                .summary { background: #f0f9ff; padding: 20px; border-radius: 8px; margin-top: 20px; border-left: 4px solid #2563eb; }\n              </style>\n            </head>\n            <body>\n              <div class=\"header\">\n                <h1>${data.station?.name || 'FuelFlow Station'}</h1>\n                <h2>Pump Reading Report</h2>\n                <div class=\"reading-meta\">\n                  <p><strong>Reading Date:</strong> ${new Date(data.readingDate || data.createdAt || Date.now()).toLocaleDateString()}</p>\n                  <p><strong>Shift Number:</strong> ${data.shiftNumber}</p>\n                  <p><strong>Operator:</strong> ${data.operatorName}</p>\n                </div>\n              </div>\n\n              <div class=\"section\">\n                <h3>Pump Information</h3>\n                <div class=\"details-grid\">\n                  <div class=\"detail-item\">\n                    <div class=\"detail-label\">Pump Name</div>\n                    <div class=\"detail-value\">${data.pump?.name || 'N/A'}</div>\n                  </div>\n                  <div class=\"detail-item\">\n                    <div class=\"detail-label\">Pump Number</div>\n                    <div class=\"detail-value\">${data.pump?.pumpNumber || 'N/A'}</div>\n                  </div>\n                  <div class=\"detail-item\">\n                    <div class=\"detail-label\">Product</div>\n                    <div class=\"detail-value\">${data.product?.name || 'N/A'}</div>\n                  </div>\n                  <div class=\"detail-item\">\n                    <div class=\"detail-label\">Product Category</div>\n                    <div class=\"detail-value\">${data.product?.category || 'N/A'}</div>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"section\">\n                <h3>Reading Details</h3>\n                <table class=\"readings-table\">\n                  <thead>\n                    <tr>\n                      <th>Measurement</th>\n                      <th>Value</th>\n                      <th>Unit</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td>Opening Reading</td>\n                      <td>${parseFloat(data.openingReading || '0').toFixed(3)}</td>\n                      <td>Litres</td>\n                    </tr>\n                    <tr>\n                      <td>Closing Reading</td>\n                      <td>${parseFloat(data.closingReading || '0').toFixed(3)}</td>\n                      <td>Litres</td>\n                    </tr>\n                    <tr style=\"background: #f0f9ff;\">\n                      <td><strong>Total Sale</strong></td>\n                      <td><strong>${parseFloat(data.totalSale || '0').toFixed(3)}</strong></td>\n                      <td><strong>Litres</strong></td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n\n              <div class=\"summary\">\n                <h3>Summary</h3>\n                <p><strong>Shift:</strong> ${data.shiftNumber}</p>\n                <p><strong>Operator:</strong> ${data.operatorName}</p>\n                <p><strong>Total Fuel Dispensed:</strong> ${parseFloat(data.totalSale || '0').toFixed(3)} Litres</p>\n                <p><strong>Reading Period:</strong> ${new Date(data.readingDate || data.createdAt || Date.now()).toLocaleDateString()}</p>\n              </div>\n\n              <div class=\"footer\">\n                <p>Pump Reading Report generated from FuelFlow Management System</p>\n                <p>Generated on ${today}</p>\n                <p>This is an official record of fuel dispensing activities</p>\n              </div>\n            </body>\n          </html>\n        `\n      };\n\n    default:\n      return {\n        title: 'Document',\n        filename: 'document',\n        content: '<html><body><h1>Document</h1></body></html>'\n      };\n  }\n};\n\nexport const printDocument = (template: PrintTemplate) => {\n  const printWindow = window.open('', '_blank');\n  if (!printWindow) {\n    alert('Please allow popups to print documents');\n    return;\n  }\n\n  printWindow.document.write(template.content);\n  printWindow.document.close();\n\n  printWindow.onload = () => {\n    setTimeout(() => {\n      printWindow.print();\n      printWindow.close();\n    }, 500);\n  };\n};\n\nexport const downloadAsPDF = (template: PrintTemplate) => {\n  const blob = new Blob([template.content], { type: 'text/html' });\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = `${template.filename}.html`;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n  URL.revokeObjectURL(url);\n};\n\nexport const downloadAsPNG = async (template: PrintTemplate) => {\n  try {\n    const tempDiv = document.createElement('div');\n    tempDiv.innerHTML = template.content;\n    tempDiv.style.position = 'absolute';\n    tempDiv.style.left = '-9999px';\n    tempDiv.style.width = '800px';\n    tempDiv.style.background = 'white';\n    document.body.appendChild(tempDiv);\n\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    canvas.width = 800;\n    canvas.height = 1200;\n\n    ctx.fillStyle = '#ffffff';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    ctx.fillStyle = '#000000';\n    ctx.font = '16px Arial';\n    ctx.fillText(template.title, 50, 50);\n\n    document.body.removeChild(tempDiv);\n\n    const link = document.createElement('a');\n    link.download = `${template.filename}.png`;\n    link.href = canvas.toDataURL('image/png');\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  } catch (error) {\n    console.error('PNG download failed:', error);\n    alert('PNG download not available. Please use PDF option.');\n  }\n};\n","size_bytes":22920},"client/src/pages/ApprovalPending.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { CheckCircle, Clock, User, AlertCircle } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ApprovalPendingProps {\n  userEmail?: string;\n  userName?: string;\n}\n\nexport default function ApprovalPending({ userEmail, userName }: ApprovalPendingProps) {\n  const { user, logout } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isApproved, setIsApproved] = useState(false);\n\n  // Check approval status periodically\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      if (!userEmail && !user?.username) return;\n\n      try {\n        // Try to login with stored credentials to check if approved\n        const username = userEmail || user?.username;\n        if (username) {\n          // This is just a status check - in real implementation, you'd have a separate endpoint\n          // For now, we'll just show the pending state\n        }\n      } catch (error) {\n        // Still pending\n      }\n    };\n\n    const interval = setInterval(checkApprovalStatus, 30000); // Check every 30 seconds\n    return () => clearInterval(interval);\n  }, [userEmail, user]);\n\n  const handleBackToLogin = () => {\n    logout();\n    setLocation(\"/login\");\n  };\n\n  const handleCheckStatus = () => {\n    toast({\n      title: \"Status Checked\",\n      description: \"Your account is still pending approval. Please wait for administrator action.\",\n      variant: \"default\",\n    });\n  };\n\n  if (isApproved) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-100 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center pb-6\">\n            <div className=\"mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-4\">\n              <CheckCircle className=\"w-8 h-8 text-green-600\" />\n            </div>\n            <CardTitle className=\"text-2xl text-gray-900\">Account Approved!</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-center space-y-4\">\n            <div className=\"space-y-2\">\n              <p className=\"text-gray-600\">\n                Great news! Your account has been approved.\n              </p>\n              <p className=\"text-gray-600\">\n                You can now log in to access the FuelFlow system.\n              </p>\n            </div>\n\n            <div className=\"pt-4\">\n              <Button \n                onClick={handleBackToLogin}\n                className=\"w-full\"\n              >\n                Continue to Login\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center pb-6\">\n          <div className=\"mx-auto w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mb-4\">\n            <Clock className=\"w-8 h-8 text-orange-600\" />\n          </div>\n          <CardTitle className=\"text-2xl text-gray-900\">Account Pending Approval</CardTitle>\n        </CardHeader>\n        <CardContent className=\"text-center space-y-4\">\n          <div className=\"space-y-2\">\n            <p className=\"text-gray-600\">\n              Thank you for registering{userName ? `, ${userName}` : ''}!\n            </p>\n            <p className=\"text-gray-600\">\n              Your account is currently pending approval from an administrator.\n            </p>\n          </div>\n\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n            <div className=\"flex items-center text-blue-800 mb-2\">\n              <User className=\"w-5 h-5 mr-2\" />\n              <span className=\"font-medium\">What's next?</span>\n            </div>\n            <p className=\"text-sm text-blue-700\">\n              An administrator will review your account and activate it. You'll be able to log in once approved.\n            </p>\n          </div>\n\n          <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n            <div className=\"flex items-center text-yellow-800 mb-2\">\n              <AlertCircle className=\"w-5 h-5 mr-2\" />\n              <span className=\"font-medium\">Need help?</span>\n            </div>\n            <p className=\"text-sm text-yellow-700\">\n              Contact your system administrator if you believe this is an error or if you've been waiting for an extended period.\n            </p>\n          </div>\n\n          <div className=\"pt-4 space-y-2\">\n            <Button \n              onClick={handleCheckStatus}\n              variant=\"outline\" \n              className=\"w-full\"\n            >\n              Check Status\n            </Button>\n            <Button \n              onClick={handleBackToLogin}\n              variant=\"ghost\" \n              className=\"w-full\"\n            >\n              Back to Login\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5310},"client/src/pages/LoginPage.tsx":{"content":"\nimport LoginForm from \"@/components/auth/LoginForm\";\n\nexport default function LoginPage() {\n  return <LoginForm />;\n}\n","size_bytes":119},"client/src/pages/SignupPage.tsx":{"content":"\nimport { useState } from \"react\";\nimport LoginForm from \"@/components/auth/LoginForm\";\nimport SignupForm from \"@/components/auth/SignupForm\";\n\nexport default function SignupPage() {\n  const [showLogin, setShowLogin] = useState(false);\n\n  if (showLogin) {\n    return <LoginForm />;\n  }\n\n  return <SignupForm onBack={() => setShowLogin(true)} />;\n}\n","size_bytes":348},"client/src/components/ui/date-picker.tsx":{"content":"\nimport * as React from \"react\"\nimport { format } from \"date-fns\"\nimport { CalendarIcon } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\"\n\ninterface DatePickerProps {\n  date?: Date\n  onDateChange?: (date: Date | undefined) => void\n  placeholder?: string\n  className?: string\n}\n\nexport function DatePicker({ date, onDateChange, placeholder = \"Pick a date\", className }: DatePickerProps) {\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          className={cn(\n            \"w-full justify-start text-left font-normal\",\n            !date && \"text-muted-foreground\",\n            className\n          )}\n        >\n          <CalendarIcon className=\"mr-2 h-4 w-4 text-muted-foreground dark:text-muted-foreground\" />\n          {date ? format(date, \"PPP\") : <span>{placeholder}</span>}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-0\" align=\"start\">\n        <Calendar\n          mode=\"single\"\n          selected={date}\n          onSelect={onDateChange}\n          initialFocus\n        />\n      </PopoverContent>\n    </Popover>\n  )\n}\n","size_bytes":1301},"client/src/components/ui/print-actions.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  DropdownMenu, \n  DropdownMenuContent, \n  DropdownMenuItem, \n  DropdownMenuTrigger,\n  DropdownMenuSeparator\n} from \"@/components/ui/dropdown-menu\";\nimport { \n  Printer, \n  Download, \n  FileText, \n  Image, \n  ChevronDown \n} from \"lucide-react\";\n\ntype PrintType = 'invoice' | 'receipt' | 'statement' | 'expense' | 'purchaseOrder' | 'pumpReading';\ntype PrintFormat = 'pdf' | 'png';\n\ninterface PrintActionsProps {\n  /** The type of document to print */\n  type: PrintType;\n  /** The ID of the document */\n  id: string;\n  /** Optional return URL after printing (defaults to current page) */\n  returnUrl?: string;\n  /** Custom button variant */\n  variant?: \"default\" | \"outline\" | \"secondary\" | \"ghost\" | \"link\" | \"destructive\";\n  /** Custom button size */\n  size?: \"default\" | \"sm\" | \"lg\" | \"icon\";\n  /** Show as individual buttons instead of dropdown */\n  layout?: 'dropdown' | 'buttons';\n  /** Custom class names */\n  className?: string;\n}\n\nexport function PrintActions({ \n  type, \n  id, \n  returnUrl, \n  variant = \"outline\", \n  size = \"default\",\n  layout = \"dropdown\",\n  className = \"\"\n}: PrintActionsProps) {\n  const [, navigate] = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Get current URL for return navigation\n  const currentUrl = returnUrl || window.location.pathname + window.location.search;\n\n  const handlePrint = () => {\n    setIsLoading(true);\n    const printUrl = `/print?type=${type}&id=${id}&mode=print&return=${encodeURIComponent(currentUrl)}`;\n    navigate(printUrl);\n  };\n\n  const handleDownload = (format: PrintFormat) => {\n    setIsLoading(true);\n    const downloadUrl = `/print?type=${type}&id=${id}&mode=download&format=${format}&return=${encodeURIComponent(currentUrl)}`;\n    navigate(downloadUrl);\n  };\n\n  // Get document type display name\n  const getDocumentName = (type: PrintType) => {\n    switch (type) {\n      case 'invoice': return 'Invoice';\n      case 'receipt': return 'Receipt';\n      case 'statement': return 'Statement';\n      case 'expense': return 'Expense Receipt';\n      case 'purchaseOrder': return 'Purchase Order';\n      case 'pumpReading': return 'Pump Reading';\n      default: return 'Document';\n    }\n  };\n\n  if (layout === 'buttons') {\n    return (\n      <div className={`flex space-x-2 ${className}`}>\n        <Button\n          onClick={handlePrint}\n          variant={variant}\n          size={size}\n          disabled={isLoading}\n          data-testid={`button-print-${type}`}\n        >\n          <Printer className=\"w-4 h-4 mr-2\" />\n          Print\n        </Button>\n        <Button\n          onClick={() => handleDownload('pdf')}\n          variant={variant}\n          size={size}\n          disabled={isLoading}\n          data-testid={`button-download-pdf-${type}`}\n        >\n          <FileText className=\"w-4 h-4 mr-2\" />\n          PDF\n        </Button>\n        <Button\n          onClick={() => handleDownload('png')}\n          variant={variant}\n          size={size}\n          disabled={isLoading}\n          data-testid={`button-download-png-${type}`}\n        >\n          <Image className=\"w-4 h-4 mr-2\" />\n          PNG\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button \n          variant={variant} \n          size={size}\n          disabled={isLoading}\n          className={className}\n          data-testid={`button-print-actions-${type}`}\n        >\n          <Printer className=\"w-4 h-4 mr-2\" />\n          {isLoading ? 'Loading...' : `Print ${getDocumentName(type)}`}\n          <ChevronDown className=\"w-4 h-4 ml-2\" />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem \n          onClick={handlePrint}\n          data-testid={`menu-print-${type}`}\n        >\n          <Printer className=\"w-4 h-4 mr-2\" />\n          Print Document\n        </DropdownMenuItem>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem \n          onClick={() => handleDownload('pdf')}\n          data-testid={`menu-download-pdf-${type}`}\n        >\n          <FileText className=\"w-4 h-4 mr-2\" />\n          Download as PDF\n        </DropdownMenuItem>\n        <DropdownMenuItem \n          onClick={() => handleDownload('png')}\n          data-testid={`menu-download-png-${type}`}\n        >\n          <Image className=\"w-4 h-4 mr-2\" />\n          Download as PNG\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n\nexport default PrintActions;","size_bytes":4602},"client/src/pages/PrintView.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { generatePrintTemplate, downloadAsPDF, downloadAsPNG } from \"@/lib/printUtils\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, Download, Printer } from \"lucide-react\";\nimport type { SalesTransaction, PurchaseOrder, Payment, Expense, PumpReading } from \"@shared/schema\";\n\ntype PrintType = 'invoice' | 'receipt' | 'statement' | 'expense' | 'purchaseOrder' | 'pumpReading';\ntype PrintMode = 'print' | 'download';\ntype PrintFormat = 'pdf' | 'png';\n\nexport default function PrintView() {\n  const [, navigate] = useLocation();\n  const [isReady, setIsReady] = useState(false);\n  \n  // Parse search params from window.location.search\n  const searchParams = new URLSearchParams(window.location.search);\n  const type = searchParams.get('type') as PrintType;\n  const id = searchParams.get('id');\n  const mode = searchParams.get('mode') as PrintMode || 'print';\n  const format = searchParams.get('format') as PrintFormat || 'pdf';\n  const returnUrl = searchParams.get('return') || '/dashboard';\n\n  // Determine which API endpoint to use based on type\n  const getQueryKey = (type: PrintType, id: string) => {\n    switch (type) {\n      case 'invoice':\n      case 'receipt':\n        return [`/api/sales/${id}`];\n      case 'purchaseOrder':\n        return [`/api/purchase-orders/${id}`];\n      case 'expense':\n        return [`/api/expenses/${id}`];\n      case 'statement':\n        return [`/api/payments/${id}/statement`];\n      case 'pumpReading':\n        return [`/api/pump-readings/${id}`];\n      default:\n        return null;\n    }\n  };\n\n  const queryKey = getQueryKey(type, id || '');\n  \n  const { data, isLoading, error } = useQuery({\n    queryKey: queryKey || ['invalid'],\n    enabled: !!queryKey && !!id,\n  });\n\n  // Auto-trigger action when data is loaded\n  useEffect(() => {\n    if (!isLoading && data && !isReady) {\n      setIsReady(true);\n      \n      // Small delay to ensure DOM is fully rendered\n      const timer = setTimeout(() => {\n        if (mode === 'print') {\n          window.print();\n        } else if (mode === 'download') {\n          handleDownload();\n        }\n      }, 500);\n\n      return () => clearTimeout(timer);\n    }\n  }, [isLoading, data, isReady, mode]);\n\n  const handleDownload = async () => {\n    if (!data) return;\n    \n    // Map new types to existing ones temporarily\n    const mappedType = type === 'purchaseOrder' ? 'invoice' : \n                      type === 'pumpReading' ? 'receipt' : \n                      type as 'invoice' | 'receipt' | 'statement' | 'expense';\n    \n    const template = generatePrintTemplate(data, mappedType);\n    \n    try {\n      if (format === 'pdf') {\n        downloadAsPDF(template);\n      } else {\n        await downloadAsPNG(template);\n      }\n    } catch (error) {\n      console.error('Download failed:', error);\n    }\n  };\n\n  const handleBack = () => {\n    navigate(returnUrl);\n  };\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  if (!type || !id) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600\">Invalid Print Request</h1>\n          <p className=\"mt-2 text-gray-600\">Missing required parameters: type and id</p>\n          <Button onClick={handleBack} className=\"mt-4\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Go Back\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold\">Loading...</h1>\n          <p className=\"mt-2 text-gray-600\">Preparing document for {type}...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !data) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600\">Error Loading Document</h1>\n          <p className=\"mt-2 text-gray-600\">Unable to load {type} with ID: {id}</p>\n          <Button onClick={handleBack} className=\"mt-4\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Go Back\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  // Map new types to existing ones temporarily\n  const mappedType = type === 'purchaseOrder' ? 'invoice' : \n                    type === 'pumpReading' ? 'receipt' : \n                    type as 'invoice' | 'receipt' | 'statement' | 'expense';\n  \n  const template = generatePrintTemplate(data, mappedType);\n\n  return (\n    <div className=\"print-view\">\n      {/* Print/Download Actions - Hidden during print */}\n      <div className=\"no-print fixed top-4 right-4 z-50 flex space-x-2\">\n        <Button onClick={handleBack} variant=\"outline\">\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          Back\n        </Button>\n        <Button onClick={handlePrint} variant=\"outline\">\n          <Printer className=\"w-4 h-4 mr-2\" />\n          Print\n        </Button>\n        <Button onClick={handleDownload} variant=\"outline\">\n          <Download className=\"w-4 h-4 mr-2\" />\n          Download {format.toUpperCase()}\n        </Button>\n      </div>\n\n      {/* Print Content */}\n      <div \n        id=\"print-content\"\n        dangerouslySetInnerHTML={{ __html: template.content }}\n        className=\"print-only-styles\"\n      />\n\n      {/* Print-specific styles */}\n      <style dangerouslySetInnerHTML={{\n        __html: `\n          @media print {\n            .no-print {\n              display: none !important;\n            }\n            \n            body {\n              margin: 0;\n              padding: 0;\n            }\n            \n            .print-view {\n              width: 100%;\n              height: 100%;\n            }\n            \n            #print-content {\n              width: 100%;\n              height: 100%;\n            }\n          }\n          \n          @media screen {\n            .print-only-styles {\n              max-width: 210mm;\n              margin: 0 auto;\n              padding: 20px;\n              box-shadow: 0 0 10px rgba(0,0,0,0.1);\n              background: white;\n              min-height: 297mm;\n            }\n          }\n        `\n      }} />\n    </div>\n  );\n}","size_bytes":6310}},"version":1}